image: gitlab.cbb.de:4567/viega/twms/twms-frontend-common/build:latest

stages:
  - pre-build
  - validate
  - build
  - test
  - report
  - assemble
  - announce

variables:
  GIT_STRATEGY: fetch

cache:
  paths:
  - node_modules/
  key: "$CI_COMMIT_REF_SLUG"

docker-build:
  stage: pre-build
  cache: {}
  before_script: []
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    # Create a configuration file for Kaniko with credentials, so that it can push images to the Docker registry
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    # Build Docker image for cross-build of the backend with Kaniko and push it to the registry
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/docker/Dockerfile --destination gitlab.cbb.de:4567/viega/twms/twms-frontend-common/build:latest
  only:
    # Only rebuild the image if its source files change
    changes:
    - docker/*
    refs:
    - master
    - develop

lint:
  stage: build
  only:
    - master
    - develop
    - schedule
  cache:
    paths:
    - node_modules/
    key: "$CI_COMMIT_REF_SLUG"
  tags:
    - amd64
    - shared-vm
  script:
    - npm install
    - npm run lint-no-fix
  artifacts:
    reports:

lint-fast:
  extends: lint
  stage: validate
  only:
  except:
    - e2e-develop
    - master
    - develop
    - tags
    - schedule

lint-warn:
  extends: lint-fast
  except:
  only:
    - e2e-develop
  allow_failure: true

build:
  stage: build
  cache:
    paths:
    - node_modules/
    key: "$CI_COMMIT_REF_SLUG"
    policy: pull
  only:
    - master
    - develop
    - tags
    - schedule
  tags:
    - amd64
    - shared-vm
  variables:
    VERSION_FILE: "src/environments/version.ts"
  script:
    - npm install
    - echo "export const VERSION = {" > $VERSION_FILE
    - "echo '    '\\''git-commit-ref-name'\\'': '\\'${CI_COMMIT_REF_NAME}\\'',' >> $VERSION_FILE"
    - "echo '    '\\''git-commit-sha'\\'': '\\'${CI_COMMIT_SHA}\\'',' >> $VERSION_FILE"
    - "echo '    '\\''git-commit-tag'\\'': '\\'${CI_COMMIT_TAG}\\'',' >> $VERSION_FILE"
    - "echo '    '\\''build-date'\\'': '\\'$(date +%FT%T%z)\\' >> $VERSION_FILE"
    - echo "};" >> $VERSION_FILE
    - cat $VERSION_FILE
    - npm run build-production >> buildlog.log
  artifacts:
    paths:
      - dist/
      - fail.log
      - buildlog.log
  allow_failure: false

build-fast:
  extends: build
  stage: validate
  except:
    - master
    - develop
    - tags
    - schedule
  only:
  script:
    - npm install
    - echo "export const VERSION = {" > $VERSION_FILE
    - "echo '    '\\''git-commit-ref-name'\\'': '\\'${CI_COMMIT_REF_NAME}\\'',' >> $VERSION_FILE"
    - "echo '    '\\''git-commit-sha'\\'': '\\'${CI_COMMIT_SHA}\\'',' >> $VERSION_FILE"
    - "echo '    '\\''git-commit-tag'\\'': '\\'${CI_COMMIT_TAG}\\'',' >> $VERSION_FILE"
    - "echo '    '\\''build-date'\\'': '\\'$(date +%FT%T%z)\\' >> $VERSION_FILE"
    - echo "};" >> $VERSION_FILE
    - cat $VERSION_FILE
    - npm run build-production-fast >> buildlog.log
  artifacts:

unit:
  stage: test
  only:
    - master
    - develop
    - schedule
  tags:
    - amd64
    - shared-vm
  cache:
    paths:
    - node_modules/
    key: "$CI_COMMIT_REF_SLUG"
    policy: pull
  script:
    - npm install
    - export CHROME_BIN=/usr/bin/chromium
    - ./node_modules/@angular/cli/bin/ng test --browsers=ChromeHeadlessNoSandbox --code-coverage --watch=false --progress=false
  artifacts:
    paths:
      - dist/
      - coverage/
    reports:
      junit: ./src/TESTS-*.xml
    when: always
  # TODO(schuster): Disable when CI is fixed.
  allow_failure: true

unit-fast:
  extends: unit
  except:
    - master
    - develop
    - tags
    - schedule
    - e2e-develop
  only:
  artifacts:
    paths:

unit-warn:
  extends: unit-fast
  except:
  only:
    - e2e-develop

e2e-fast:
  stage: test
  only:
    - master
    - develop
    - e2e-develop
  except:
    - schedules
  timeout: 15 minutes
  allow_failure: true # e2e tests should not break the master, but tell the developer that they need to check
  tags:
    - amd64
    - shared-vm
  cache:
    paths:
    - node_modules/
    key: "$CI_COMMIT_REF_SLUG"
    policy: pull
  script:
    - npm install
    # Set up gitlab token for backend download script
    - echo "GITLAB_PERSONAL_ACCESS_TOKEN=$K8S_SECRET_VIEGA_COMMON_REPO_PERSONAL_TOKEN" > .env
    - export CHROME_BIN=/usr/bin/chromium
    - npm run install-webdriver-ci > webdriver-update.log
    - npm run install-backend-ci
    - chmod +xr ./tools/ci-wait-ng-serve.sh
    - chmod +xr ./tools/ci-wait-backend.sh
    # Run the arm version of the backend and wait until it is ready
    - screen -d -m -L -Logfile "backend.log" -S backend qemu-arm -L /usr/arm-linux-gnueabihf ./third_party/twms-backend/TwmsBackend
    - screen -d -m -L -Logfile "serve.log" -S serve npm run serve-ci
    # Wait for the detached screen to create output
    - ./tools/ci-wait-ng-serve.sh
    - ./tools/ci-wait-backend.sh
    # Run the actual tests
    - npm run e2e-no-server-ci
  after_script:
    - screen -X -S serve kill
    - screen -X -S backend kill
  artifacts:
    paths:
      - backend.log
      - serve.log
      - webdriver-update.log
    # e2e currently does not have end to end test reports:
    #    reports:
    #      junit: TESTS-*.xml

e2e-nightly:
  extends: e2e-fast
  only:
    - schedules
  except:
  timeout: 45 minutes
  allow_failure: false

sonar:
  stage: report
  dependencies:
    - unit
  cache:
    paths:
    - node_modules/
    key: "$CI_COMMIT_REF_SLUG"
    policy: pull
  script:
    - npm install
    - sonar-scanner -Dsonar.host.url=http://sonarqube.cbb.de:9000 -Dsonar.login=$SONARQUBE_LOGIN
    #- sonar-scanner -Dsonar.projectKey=twms-frontend-common -Dsonar.sources=. -Dsonar.host.url=http://sonarqube.cbb.de:9000 -Dsonar.login=b364d89f663d7e35c462dc97286819bfd1593694
  when: always
  only:
    - master
  allow_failure: true

assemble:
  stage: assemble
  only:
    - master
    - develop
  dependencies:
    - build
    - unit
  cache: {}
  script:
    - ./tools/post-build.sh
  artifacts:
    paths:
      - dist

assemble-tag:
  extends: assemble
  only:
    - tags
  dependencies:
    - build

release-nexus:
  stage: assemble
  only:
    - tags
  dependencies:
    - build
  cache: {}
  script:
    - ./tools/post-build.sh
    - mkdir www
    - mv dist/* www/
    - FRONTEND_VERSION=$(jq -r '.version' package.json)
    - SUPPORTED_BACKEND_VERSION=$(jq -r '.backendVersion' package.json)
    - printf "{\n\"version\":\"${FRONTEND_VERSION}\",\n\"backendVersion\":\"${SUPPORTED_BACKEND_VERSION}\"\n}" > version.json
    - printf "{\n\"version\":\"${FRONTEND_VERSION}\",\n\"backendVersion\":\"${SUPPORTED_BACKEND_VERSION}\"\n}" > latest.json
    - tar cfvz www.tar.gz www/* version.json
    - curl -LfsS -u ${NEXUS_USERNAME}:${NEXUS_TOKEN} -T www.tar.gz https://nexus.cbb.de/repository/twms-bin/frontend/${FRONTEND_VERSION}/
    - curl -LfsS -u ${NEXUS_USERNAME}:${NEXUS_TOKEN} -T latest.json https://nexus.cbb.de/repository/twms-bin/frontend/

announce-release:
  stage: announce
  only:
    - tags
  cache: {}
  script:
    - npm install
    - npm run announce-release

announce-backend-update:
  stage: announce
  only:
    - develop
  except:
    - schedule
  when: always
  cache: {}
  script:
    - npm install
    - (git diff HEAD^ package.json | grep -q "+  \"backendVersion" && npm run announce-backend-update) || true

announce-broken-master:
  stage: announce
  only:
    - master
    - develop
  except:
    - schedule
  when: on_failure
  cache: {}
  script:
    - npm install
    - npm run announce-broken-master

announce-broken-nightly:
  stage: announce
  only:
    - schedule
  when: on_failure
  cache: {}
  script:
    - npm install
    - npm run announce-broken-nightly
