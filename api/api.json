{
  "openapi": "3.0.1",
  "info": {
    "title": "TWMS REST API",
    "description": "TWMS REST API",
    "contact": {
      "name": "cbb software GmbH"
    },
    "version": "v1"
  },
  "servers": [
    {
      "url": "/api"
    }
  ],
  "paths": {
    "/v1/Activation": {
      "get": {
        "tags": [
          "Activation"
        ],
        "summary": "Get activation status",
        "description": "Authentication is not required.",
        "operationId": "GetActivationStatus",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ActivationStatusSlim"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivationStatusSlim"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivationStatusSlim"
                }
              }
            }
          }
        },
        "authorityCodes": []
      },
      "post": {
        "tags": [
          "Activation"
        ],
        "summary": "Activate device with registration code",
        "description": "Authentication is not required.\r\nExample activation input:\r\n<pre>\r\n{\r\n    \"ActivationCode\" : \"ACTIVATION_CODE_XXXXXXX\"\r\n}\r\n</pre>",
        "operationId": "Activate",
        "requestBody": {
          "description": "Activation input object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ActivationInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivationInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivationInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ActivationInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ActivationResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivationResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivationResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          }
        },
        "authorityCodes": []
      },
      "patch": {
        "tags": [
          "Activation"
        ],
        "summary": "Reset activation",
        "operationId": "ResetActivation",
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "RESET_ACTIVATION"
          ]
        ]
      }
    },
    "/v1/Devices/Controller": {
      "post": {
        "tags": [
          "Controller"
        ],
        "summary": "Creates a new Controller",
        "description": "Example start parameter:\r\n<pre>\r\n{\r\n        \"name\":\"Controller C\",\r\n        \"serialNumber\":\"\",\r\n        \"remark\":\"\",\r\n        \"lastMaintenanceTimestamp\":\"\",\r\n        \"maintenanceInterval\":\"\"\r\n}\r\n</pre>",
        "operationId": "CreateController",
        "requestBody": {
          "description": "create device input object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ControllerCreateInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ControllerCreateInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ControllerCreateInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ControllerCreateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "CREATE_CONTROLLER"
          ]
        ]
      }
    },
    "/v1/Devices/Controller/list": {
      "get": {
        "tags": [
          "Controller"
        ],
        "summary": "Gets all Controller",
        "operationId": "GetControllerMetadataList",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ControllerOutputDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ControllerOutputDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ControllerOutputDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_CONTROLLER_LIST"
          ]
        ]
      }
    },
    "/v1/Devices/Controller/Metadata/{uuid}": {
      "get": {
        "tags": [
          "Controller"
        ],
        "summary": "Gets Controller Metadata by UUID",
        "operationId": "GetControllerUUIDMetadata",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ControllerOutputDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ControllerOutputDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ControllerOutputDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_CONTROLLER"
          ]
        ]
      }
    },
    "/v1/Devices/Controller/SetControllerMetadata/{uuid}": {
      "patch": {
        "tags": [
          "Controller"
        ],
        "summary": "Updates a Controller",
        "description": "Example\r\n<pre>\r\n{\r\n        \"newName\":\"\",\r\n        \"newSerialNumber\":\"name\",\r\n        \"newRemark\":\"Controller Test new\",\r\n        \"newLastMaintenanceTimestamp\" : \"\",\r\n        \"newMaintenanceInterval\" : \"\"\r\n}\r\n</pre>",
        "operationId": "SetControllerMetadata",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "UUID of the controller",
            "required": true,
            "schema": {
              "maxLength": 32,
              "type": "string",
              "description": "UUID of the controller",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "ControllerSetMetadataInput object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ControllerSetMetadataInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ControllerSetMetadataInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ControllerSetMetadataInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ControllerSetMetadataInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SET_CONTROLLER"
          ]
        ]
      }
    },
    "/v1/Devices/Controller/SetControllerMaintenance/{deviceUUID}": {
      "patch": {
        "tags": [
          "Controller"
        ],
        "summary": "Updates a Controller",
        "description": "Example\r\n<pre>\r\n{\r\n        \"MaintenanceIntervalDays\": 100,\r\n}\r\n</pre>",
        "operationId": "SetControllerMaintenance",
        "parameters": [
          {
            "name": "deviceUUID",
            "in": "path",
            "description": "device UUID of the controller",
            "required": true,
            "schema": {
              "maxLength": 32,
              "type": "string",
              "description": "device UUID of the controller"
            }
          }
        ],
        "requestBody": {
          "description": "edit device input object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ControllerUpdateMaintenanceInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ControllerUpdateMaintenanceInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ControllerUpdateMaintenanceInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ControllerUpdateMaintenanceInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SET_CONTROLLER"
          ]
        ]
      }
    },
    "/v1/Devices/Controller/getcontrolleruuid/{name}": {
      "get": {
        "tags": [
          "Controller"
        ],
        "summary": "Gets Controller UUID by Name",
        "operationId": "GetControllerUUID",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 100,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_CONTROLLER"
          ]
        ]
      }
    },
    "/v1/Devices/Controller/iscontrollerinstalled/{uuid}": {
      "get": {
        "tags": [
          "Controller"
        ],
        "summary": "Is Controller Installed",
        "operationId": "IsControllerInstalled",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_CONTROLLER"
          ]
        ]
      }
    },
    "/v1/Devices/Controller/StartDiscovery": {
      "post": {
        "tags": [
          "Controller"
        ],
        "summary": "Start the LSS scan",
        "operationId": "StartDiscovery",
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "CREATE_CONTROLLER"
          ]
        ]
      }
    },
    "/v1/Devices/Controller/AbortDiscovery": {
      "post": {
        "tags": [
          "Controller"
        ],
        "summary": "Abort Controller Discovery",
        "operationId": "AbortDiscovery",
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "CREATE_CONTROLLER"
          ]
        ]
      }
    },
    "/v1/Devices/Controller/DiscoveryStatus": {
      "get": {
        "tags": [
          "Controller"
        ],
        "summary": "Get Discovery Status",
        "operationId": "GetDiscoveryStatus",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DiscoveryStatusOutputDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscoveryStatusOutputDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscoveryStatusOutputDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "CREATE_CONTROLLER"
          ]
        ]
      }
    },
    "/v1/Devices/Controller/GenerateAndSetNewKey": {
      "post": {
        "tags": [
          "Controller"
        ],
        "summary": "Generate and set a new key",
        "operationId": "GenerateAndSetNewKey",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MultiControllerPassword"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultiControllerPassword"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MultiControllerPassword"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MultiControllerPassword"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "CONFIGURE_TWMS_SYSTEM"
          ]
        ]
      }
    },
    "/v1/Devices/ControllerPoint": {
      "post": {
        "tags": [
          "ControllerPoint"
        ],
        "summary": "Creates a new ControllerPoint",
        "description": "Example start parameter:\r\n<pre>\r\n{\r\n        \"name\":\"Controller C\",\r\n        \"controllerId\":\"\",\r\n        \"remark\":\"\",\r\n        \"controllerUUID\":\"\"\r\n}\r\n</pre>",
        "operationId": "CreateControllerPoint",
        "requestBody": {
          "description": "create device input object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ControllerPointCreateInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ControllerPointCreateInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ControllerPointCreateInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ControllerPointCreateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "CREATE_CONTROLLER_POINT"
          ]
        ]
      }
    },
    "/v1/Devices/ControllerPoint/list": {
      "get": {
        "tags": [
          "ControllerPoint"
        ],
        "summary": "Gets all Controller Points",
        "operationId": "GetAllControllerPoints",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ControllerPointOutputDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ControllerPointOutputDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ControllerPointOutputDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_CONTROLLER_POINT_LIST"
          ]
        ]
      }
    },
    "/v1/Devices/ControllerPoint/{uuid}": {
      "get": {
        "tags": [
          "ControllerPoint"
        ],
        "summary": "Gets a Controller Point by UUID",
        "operationId": "GetControllerPointByUuid",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ControllerPointOutputDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ControllerPointOutputDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ControllerPointOutputDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_CONTROLLER_POINT"
          ]
        ]
      }
    },
    "/v1/Devices/ControllerPoint/SetControllerPointMainMetaData/{uuid}": {
      "patch": {
        "tags": [
          "ControllerPoint"
        ],
        "summary": "Updates a Controller Point",
        "description": "Example\r\n<pre>\r\n{\r\n        \"name\":\"name\",\r\n        \"remark\":\"Controller Test new\"\r\n}\r\n</pre>",
        "operationId": "SetControllerPointMainMetaData",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "UUID of the controller",
            "required": true,
            "schema": {
              "maxLength": 32,
              "type": "string",
              "description": "UUID of the controller"
            }
          }
        ],
        "requestBody": {
          "description": "edit device input object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMainMetadataCompnentInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMainMetadataCompnentInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMainMetadataCompnentInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMainMetadataCompnentInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SET_CONTROLLER_POINT"
          ]
        ]
      }
    },
    "/v1/Devices/ControllerPoint/UpdateControllerPoint/{uuid}": {
      "patch": {
        "tags": [
          "ControllerPoint"
        ],
        "summary": "Updates a Controller Point",
        "description": "Example\r\n<pre>\r\n{\r\n        \"building\" : \"\",\r\n        \"area\" : \"\",\r\n        \"room\" : \"\",\r\n        \"segment\" : \"\"\r\n}\r\n</pre>",
        "operationId": "UpdateControllerPoint",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "UUID of the controller",
            "required": true,
            "schema": {
              "maxLength": 32,
              "type": "string",
              "description": "UUID of the controller"
            }
          }
        ],
        "requestBody": {
          "description": "edit device input object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PointAddressUpdateInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PointAddressUpdateInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PointAddressUpdateInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PointAddressUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SET_CONTROLLER_POINT"
          ]
        ]
      }
    },
    "/v1/Devices/ControllerPoint/UpdateControllerPointByAddressUUID/{uuid}": {
      "patch": {
        "tags": [
          "ControllerPoint"
        ],
        "summary": "Updates a Controller Point",
        "description": "Example\r\n<pre>\r\n{\r\n        \"AdressUUID\" : \"dec1ceaaace1ceaaaaaaaaaaaaaa0001\",\r\n}\r\n</pre>",
        "operationId": "UpdateControllerPointByAddressUUID",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "UUID of the controller",
            "required": true,
            "schema": {
              "maxLength": 32,
              "type": "string",
              "description": "UUID of the controller"
            }
          }
        ],
        "requestBody": {
          "description": "edit device input object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PointAddressUpdateByAddressUUIDInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PointAddressUpdateByAddressUUIDInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PointAddressUpdateByAddressUUIDInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PointAddressUpdateByAddressUUIDInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SET_CONTROLLER_POINT"
          ]
        ]
      }
    },
    "/v1/Devices/ControllerPoint/UpdateEnabledTimestamp/{uuid}": {
      "patch": {
        "tags": [
          "ControllerPoint"
        ],
        "summary": "Updates a Controller Point enabled timestamp",
        "description": "Example\r\n<pre>\r\n{\r\n        \"newEnabledTimestamp\":\"\"\r\n}\r\n</pre>",
        "operationId": "SetControllerPointEnabledTimestamp",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "UUID of the controller",
            "required": true,
            "schema": {
              "maxLength": 32,
              "type": "string",
              "description": "UUID of the controller"
            }
          }
        ],
        "requestBody": {
          "description": "edit device input object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEnabledTimestampInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEnabledTimestampInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEnabledTimestampInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEnabledTimestampInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SET_CONTROLLER_POINT"
          ]
        ]
      }
    },
    "/v1/Devices/ControllerPoint/UpdateDisabledTimestamp/{uuid}": {
      "patch": {
        "tags": [
          "ControllerPoint"
        ],
        "summary": "Updates a Controller Point disabled timestamp",
        "description": "Example\r\n<pre>\r\n{\r\n        \"newDisabledTimestamp\":\"\"\r\n}\r\n</pre>",
        "operationId": "SetControllerPointDisabledTimestamp",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "UUID of the controller",
            "required": true,
            "schema": {
              "maxLength": 32,
              "type": "string",
              "description": "UUID of the controller"
            }
          }
        ],
        "requestBody": {
          "description": "edit device input object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDisabledTimestampInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDisabledTimestampInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDisabledTimestampInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDisabledTimestampInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SET_CONTROLLER_POINT"
          ]
        ]
      }
    },
    "/v1/Devices/ControllerPoint/SetControllerPointDisabled/{uuid}": {
      "patch": {
        "tags": [
          "ControllerPoint"
        ],
        "summary": "Disables a Controller Point",
        "description": "Example",
        "operationId": "SetControllerPointDisabled",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "UUID of the controller",
            "required": true,
            "schema": {
              "maxLength": 32,
              "type": "string",
              "description": "UUID of the controller"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SET_CONTROLLER_POINT"
          ]
        ]
      }
    },
    "/v1/Devices/ControllerPoint/installcontrollertocontrollerpoint": {
      "patch": {
        "tags": [
          "ControllerPoint"
        ],
        "summary": "Install Controller To Controller Point",
        "description": "Example\r\n<pre>\r\n{\r\n        \"controllerUUID\":\"\",\r\n        \"controllerPointUUID\":\"\"\r\n}\r\n</pre>",
        "operationId": "InstallControllerToControllerPoint",
        "requestBody": {
          "description": "InstallControllerToControllerPointInput object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/InstallControllerToControllerPointInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstallControllerToControllerPointInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InstallControllerToControllerPointInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InstallControllerToControllerPointInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "INSTALL_CONTROLLER_TO_CONTROLLER_POINT"
          ]
        ]
      }
    },
    "/v1/Devices/ControllerPoint/uninstallcontrollerfromcontrollerpoint/{uuid}": {
      "patch": {
        "tags": [
          "ControllerPoint"
        ],
        "summary": "Uninstall Controller To Controller Point",
        "operationId": "UninstallControllerFromControllerPoint",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "target controller uuid",
            "required": true,
            "schema": {
              "maxLength": 32,
              "type": "string",
              "description": "target controller uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "UNINSTALL_CONTROLLER_FROM_CONTROLLER_POINT"
          ]
        ]
      }
    },
    "/v1/Devices/ControllerPoint/resetcontrollerbyuuid/{uuid}": {
      "post": {
        "tags": [
          "ControllerPoint"
        ],
        "summary": "Reset Controller By UUID",
        "operationId": "ResetControllerByUUID",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "ControllerPoint UUID",
            "required": true,
            "schema": {
              "maxLength": 32,
              "type": "string",
              "description": "ControllerPoint UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "REBOOT_CONTROLLER"
          ]
        ]
      }
    },
    "/v1/Devices/ControllerPoint/resetcontrollerbyname/{name}": {
      "post": {
        "tags": [
          "ControllerPoint"
        ],
        "summary": "Reset Controller By UUID",
        "operationId": "ResetControllerByName",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "ControllerPoint Name",
            "required": true,
            "schema": {
              "maxLength": 100,
              "type": "string",
              "description": "ControllerPoint Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "REBOOT_CONTROLLER"
          ]
        ]
      }
    },
    "/v1/Devices/ControllerPoint/setipaddress": {
      "patch": {
        "tags": [
          "ControllerPoint"
        ],
        "summary": "Set IP Address to a Controller Point",
        "operationId": "SetIPAddress",
        "requestBody": {
          "description": "SetIPAddressInput Object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SetIPAddressInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetIPAddressInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetIPAddressInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetIPAddressInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SET_IP_ADDRESS"
          ]
        ]
      }
    },
    "/v1/Devices/DevicePoint/list": {
      "get": {
        "tags": [
          "DevicePoint"
        ],
        "summary": "Get device point list without deleted devices",
        "operationId": "GetDevicePoints",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DevicePointOutputDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DevicePointOutputDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DevicePointOutputDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_DEVICE_POINT_LIST"
          ]
        ]
      }
    },
    "/v1/Devices/DevicePoint/listfull": {
      "get": {
        "tags": [
          "DevicePoint"
        ],
        "summary": "Get full device point list without deleted devices",
        "operationId": "GetDevicePointsFull",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DevicePointFullOutputDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DevicePointFullOutputDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DevicePointFullOutputDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_DEVICE_POINT_LIST"
          ]
        ]
      }
    },
    "/v1/Devices/DevicePoint/list/{returnDeleted}": {
      "get": {
        "tags": [
          "DevicePoint"
        ],
        "summary": "Get device point list with or without deleted devices",
        "operationId": "GetDevicePoints",
        "parameters": [
          {
            "name": "returnDeleted",
            "in": "path",
            "required": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DevicePointOutputDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DevicePointOutputDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DevicePointOutputDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_DEVICE_POINT_LIST"
          ]
        ]
      }
    },
    "/v1/Devices/DevicePoint/{uuid}": {
      "get": {
        "tags": [
          "DevicePoint"
        ],
        "summary": "Gets a Device Point by UUID",
        "operationId": "GetDevicePointByUuid",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DevicePointOutputDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicePointOutputDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicePointOutputDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_DEVICE_POINT"
          ]
        ]
      },
      "delete": {
        "tags": [
          "DevicePoint"
        ],
        "summary": "Delete a Device Point (internally we will deactivate and rename the device point)",
        "description": "",
        "operationId": "DeleteDevicePoint",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "UUID of the device",
            "required": true,
            "schema": {
              "maxLength": 32,
              "type": "string",
              "description": "UUID of the device"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "DELETE_DEVICE_POINT"
          ]
        ]
      }
    },
    "/v1/Devices/DevicePoint/full/{uuid}": {
      "get": {
        "tags": [
          "DevicePoint"
        ],
        "summary": "Gets a Device Point by UUID with extended details",
        "operationId": "GetFullDevicePointByUuid",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 32,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DevicePointFullOutputDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicePointFullOutputDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicePointFullOutputDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_DEVICE_POINT"
          ]
        ]
      }
    },
    "/v1/Devices/DevicePoint": {
      "post": {
        "tags": [
          "DevicePoint"
        ],
        "summary": "Creates a new DevicePoint",
        "description": "Example start parameter:\r\n<pre>\r\n{\r\n    \"name\": \"Device Point B\",\r\n    \"nodeId\": \"Building B\",\r\n    \"remark\":\"Area A\"\r\n}\r\n</pre>",
        "operationId": "CreateDevicePoint",
        "requestBody": {
          "description": "create device point input object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DevicePointCreateInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DevicePointCreateInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DevicePointCreateInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DevicePointCreateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "CREATE_DEVICE_POINT"
          ]
        ]
      },
      "patch": {
        "tags": [
          "DevicePoint"
        ],
        "summary": "Set Device Point Metadata",
        "description": "<pre>\r\n             {\r\n                 \"UUID\": \"DP2\",\r\n                 \"newName\": \"Device Point 22\",\r\n                 \"newDeviceId\": \"Device Point 22\",\r\n                 \"newNodeId\": \"Device Point 22\",\r\n                 \"newRemark\": \"Test Device Point 22\",\r\n                 \"newEnabledTimestamp\": \"\",\r\n                 \"newDisabledTimestamp\": \"Bulding 4\"\r\n            }\r\n             </pre>",
        "operationId": "SetDevicePointMetadata",
        "requestBody": {
          "description": "DevicePointUpdateInput Object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DevicePointSetMetadataInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DevicePointSetMetadataInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DevicePointSetMetadataInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DevicePointSetMetadataInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SET_DEVICE_POINT"
          ]
        ]
      }
    },
    "/v1/Devices/DevicePoint/install": {
      "post": {
        "tags": [
          "DevicePoint"
        ],
        "summary": "Connect device to one device point",
        "description": "Example\r\n<pre>\r\n{\r\n        \"deviceUUID\":\"[Device UUID]\",\r\n        \"devicePointUUID\":\"[DevicePoint UUID]\"\r\n}\r\n</pre>",
        "operationId": "InstallDeviceToDevicePoint",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/InstallDeviceToDevicePointInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstallDeviceToDevicePointInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InstallDeviceToDevicePointInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InstallDeviceToDevicePointInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "INSTALL_DEVICE_TO_DEVICE_POINT"
          ]
        ]
      }
    },
    "/v1/Devices/DevicePoint/link": {
      "post": {
        "tags": [
          "DevicePoint"
        ],
        "summary": "Connect devie to sensor",
        "description": "Example\r\n<pre>\r\n{\r\n        \"deviceUUID\":\"[Device UUID]\",\r\n        \"devicePointUUID\":\"[DevicePoint UUID]\"\r\n}\r\n</pre>",
        "operationId": "LinkDevicePortToSensor",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LinkDevicePortToSensorInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkDevicePortToSensorInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkDevicePortToSensorInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LinkDevicePortToSensorInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "LINK_DEVICEPORT_TO_SENSOR"
          ]
        ]
      }
    },
    "/v1/Devices/DevicePoint/uninstall": {
      "post": {
        "tags": [
          "DevicePoint"
        ],
        "summary": "Connect device to one device point",
        "description": "Example\r\n<pre>\r\n{\r\n        \"deviceUUID\":\"[Device UUID]\",\r\n        \"devicePointUUID\":\"[DevicePoint UUID]\"\r\n}\r\n</pre>",
        "operationId": "UninstallDeviceFromDevicePoint",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/InstallDeviceToDevicePointInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstallDeviceToDevicePointInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InstallDeviceToDevicePointInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InstallDeviceToDevicePointInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "UNINSTALL_DEVICE_FROM_DEVICE_POINT"
          ]
        ]
      }
    },
    "/v1/Devices/DevicePoint/SetDevicePointMainMetaData/{uuid}": {
      "patch": {
        "tags": [
          "DevicePoint"
        ],
        "summary": "Updates a Device Point",
        "description": "Example\r\n<pre>\r\n{\r\n        \"name\":\"name\",\r\n        \"remark\":\"Device Test new\"\r\n}\r\n</pre>",
        "operationId": "SetDevicePointMainMetaData",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "UUID of the device",
            "required": true,
            "schema": {
              "maxLength": 32,
              "type": "string",
              "description": "UUID of the device"
            }
          }
        ],
        "requestBody": {
          "description": "edit device input object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMainMetadataCompnentInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMainMetadataCompnentInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMainMetadataCompnentInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMainMetadataCompnentInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SET_DEVICE_POINT"
          ]
        ]
      }
    },
    "/v1/Devices/DevicePoint/UpdateDevicePoint/{uuid}": {
      "patch": {
        "tags": [
          "DevicePoint"
        ],
        "summary": "Updates a Device Point",
        "description": "Example\r\n<pre>\r\n{\r\n        \"building\" : \"\",\r\n        \"area\" : \"\",\r\n        \"room\" : \"\",\r\n        \"segment\" : \"\"\r\n}\r\n</pre>",
        "operationId": "UpdateDevicePoint",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "UUID of the device",
            "required": true,
            "schema": {
              "maxLength": 32,
              "type": "string",
              "description": "UUID of the device"
            }
          }
        ],
        "requestBody": {
          "description": "edit device input object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PointAddressUpdateInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PointAddressUpdateInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PointAddressUpdateInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PointAddressUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SET_DEVICE_POINT"
          ]
        ]
      }
    },
    "/v1/Devices/DevicePoint/UpdateDevicePointByAddressUUID/{uuid}": {
      "patch": {
        "tags": [
          "DevicePoint"
        ],
        "summary": "Updates a Device Point",
        "description": "Example\r\n<pre>\r\n{\r\n        \"AdressUUID\" : \"dec1ceaaace1ceaaaaaaaaaaaaaa0001\",\r\n}\r\n</pre>",
        "operationId": "UpdateDevicePointByAddressUUID",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "UUID of the device",
            "required": true,
            "schema": {
              "maxLength": 32,
              "type": "string",
              "description": "UUID of the device"
            }
          }
        ],
        "requestBody": {
          "description": "edit device input object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PointAddressUpdateByAddressUUIDInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PointAddressUpdateByAddressUUIDInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PointAddressUpdateByAddressUUIDInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PointAddressUpdateByAddressUUIDInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SET_DEVICE_POINT"
          ]
        ]
      }
    },
    "/v1/Devices/DevicePoint/ResetDevicePointDisabled/{uuid}": {
      "post": {
        "tags": [
          "DevicePoint"
        ],
        "summary": "Enables a Device Point",
        "operationId": "ResetDevicePointDisabled",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "UUID of the device",
            "required": true,
            "schema": {
              "maxLength": 32,
              "type": "string",
              "description": "UUID of the device"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SET_DEVICE_POINT"
          ]
        ]
      }
    },
    "/v1/Devices/DevicePoint/SetDevicePointDisabled/{uuid}": {
      "post": {
        "tags": [
          "DevicePoint"
        ],
        "summary": "Disable a Device Point",
        "description": "",
        "operationId": "SetDevicePointDisabled",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "UUID of the device",
            "required": true,
            "schema": {
              "maxLength": 32,
              "type": "string",
              "description": "UUID of the device"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SET_DEVICE_POINT"
          ]
        ]
      }
    },
    "/v1/Devices/DevicePoint/IsDevicePointExists/{name}": {
      "get": {
        "tags": [
          "DevicePoint"
        ],
        "summary": "IsDevicePointExists",
        "operationId": "IsDevicePointExists",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the device point",
            "required": true,
            "schema": {
              "maxLength": 100,
              "type": "string",
              "description": "Name of the device point"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "IS_DEVICE_POINT_EXISTS"
          ]
        ]
      }
    },
    "/v1/Devices/DevicePoint/AssignCirculationFunctionToFlushableDevice": {
      "post": {
        "tags": [
          "DevicePoint"
        ],
        "summary": "IsDevicePointExists",
        "operationId": "AssignCirculationFunctionToFlushableDevice",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AssignCirculationFunctionToFlushableDeviceInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignCirculationFunctionToFlushableDeviceInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignCirculationFunctionToFlushableDeviceInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AssignCirculationFunctionToFlushableDeviceInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "IS_DEVICE_POINT_EXISTS"
          ]
        ]
      }
    },
    "/v1/DeviceUpdate/InstallDeviceFirmware/{deviceUUID}": {
      "post": {
        "tags": [
          "DeviceUpdate"
        ],
        "summary": "Install a device firmware to a device",
        "operationId": "InstallDeviceFirmwareToDevice",
        "parameters": [
          {
            "name": "deviceUUID",
            "in": "path",
            "description": "device Uuid",
            "required": true,
            "schema": {
              "type": "string",
              "description": "device Uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "deviceFirmwareTarFile": {
                    "pattern": "^[a-zA-Z0-9_\\.-]+\\.(?i)(tar|bin)$",
                    "type": "string",
                    "description": ".tar file",
                    "format": "binary",
                    "nullable": true
                  }
                }
              },
              "encoding": {
                "deviceFirmwareTarFile": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "ASSIGN_FIRMWARE_TO_DEVICE"
          ]
        ]
      }
    },
    "/v1/DeviceUpdate/GetUpdateStatus/{deviceUUID}": {
      "get": {
        "tags": [
          "DeviceUpdate"
        ],
        "summary": "Get the status of a device udpate",
        "operationId": "GetUpdateStatus",
        "parameters": [
          {
            "name": "deviceUUID",
            "in": "path",
            "description": "device Uuid",
            "required": true,
            "schema": {
              "type": "string",
              "description": "device Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceUpdateStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceUpdateStatus"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceUpdateStatus"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "ASSIGN_FIRMWARE_TO_DEVICE"
          ]
        ]
      }
    },
    "/v1/Devices/startlss": {
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Start the LSS scan",
        "operationId": "StartLss",
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_DEVICE_LIST"
          ]
        ]
      }
    },
    "/v1/Devices/isscanninglss": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Checks whether LSS is running",
        "operationId": "IsScanningLSS",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_DEVICE_LIST"
          ]
        ]
      }
    },
    "/v1/Devices/list": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Get devices list",
        "operationId": "GetDeviceMetadataList",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DevicesOutputDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DevicesOutputDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DevicesOutputDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_DEVICE_LIST"
          ]
        ]
      }
    },
    "/v1/Devices/metadata/{deviceUUID}": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Get device metadata",
        "operationId": "GetDeviceUUIDMetadata",
        "parameters": [
          {
            "name": "deviceUUID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesOutputDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesOutputDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesOutputDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_DEVICE"
          ]
        ]
      }
    },
    "/v1/Devices": {
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Creates new device",
        "description": "Example start parameter:\r\n<pre>\r\n{\r\n        \"name\":\"Controller C\",\r\n        \"serialNumber\":\"Controller\",\r\n        \"vendorID\":\"192.168.10.50\",\r\n        \"productCode\":\"CE-76-D4-23-B4\",\r\n        \"revisionNumber\":\"Controller Test\",\r\n        \"DeviceTypeName\":\"\",\r\n        \"Remark\":\"\",\r\n        \"MaintenanceInterval\":\"\",\r\n        \"LastMaintenanceTimestamp\":\"\"\r\n}\r\n</pre>",
        "operationId": "CreateDevice",
        "requestBody": {
          "description": "create device input object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceCreateInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceCreateInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceCreateInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceCreateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "CREATE_DEVICE"
          ]
        ]
      }
    },
    "/v1/Devices/WithAncestor": {
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Creates new device with ancestor",
        "description": "Example start parameter:\r\n<pre>\r\n{\r\n        \"name\":\"Controller C\",\r\n        \"serialNumber\":\"Controller\",\r\n        \"vendorID\":\"192.168.10.50\",\r\n        \"productCode\":\"CE-76-D4-23-B4\",\r\n        \"revisionNumber\":\"Controller Test\",\r\n        \"DeviceTypeName\":\"\",\r\n        \"Remark\":\"\",\r\n        \"MaintenanceInterval\":\"\",\r\n        \"LastMaintenanceTimestamp\":\"\"\r\n}\r\n</pre>",
        "operationId": "CreateDeviceWithAncestor",
        "requestBody": {
          "description": "create device input object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceCreateWithAncestorInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceCreateWithAncestorInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceCreateWithAncestorInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceCreateWithAncestorInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "CREATE_DEVICE"
          ]
        ]
      }
    },
    "/v1/Devices/Sensor": {
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Creates new sensor fromancestor",
        "operationId": "CreateSensorFromAncestor",
        "requestBody": {
          "description": "DeviceCreateSensorFromAncestorInput object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceCreateSensorFromAncestorInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceCreateSensorFromAncestorInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceCreateSensorFromAncestorInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceCreateSensorFromAncestorInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesOutputDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesOutputDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevicesOutputDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "CREATE_DEVICE"
          ]
        ]
      }
    },
    "/v1/Devices/unlink": {
      "post": {
        "tags": [
          "Devices"
        ],
        "operationId": "UnlinkDevicePortByUUID",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UnlinkDevicePortByUUIDInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnlinkDevicePortByUUIDInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UnlinkDevicePortByUUIDInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UnlinkDevicePortByUUIDInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "LINK_DEVICEPORT_TO_SENSOR"
          ]
        ]
      }
    },
    "/v1/Devices/SetDeviceMainMetadata": {
      "patch": {
        "tags": [
          "Devices"
        ],
        "summary": "Updates device Information",
        "description": "Example\r\n<pre>\r\n{\r\n        \"uuid\":\"\",\r\n        \"newName\":\"Device A\",\r\n        \"newSerialNumber\":44,\r\n        \"newVendorID\":43,\r\n        \"newProductCode\":33,\r\n        \"newRevisionNumber\":12,\r\n        \"newDeviceTypeName\":\"\",\r\n        \"newRemark\":\"\"\r\n}\r\n</pre>",
        "operationId": "SetDeviceMainMetadata",
        "requestBody": {
          "description": "DeviceUpdateInput object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SetDeviceMainMetadataInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetDeviceMainMetadataInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetDeviceMainMetadataInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetDeviceMainMetadataInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SET_DEVICE"
          ]
        ]
      }
    },
    "/v1/Devices/transfer": {
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Copy the configuration from source device and apply for target device",
        "description": "Example\r\n<pre>\r\n{\r\n        \"SourceDeviceUUID\":\"[Old Device UUID]\",\r\n        \"TargetDeviceUUID\":\"[New Device UUID]\"       \r\n}\r\n</pre>",
        "operationId": "TransferDeviceConfiguration",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceConfigTransferInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceConfigTransferInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceConfigTransferInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceConfigTransferInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "TRANSFER_FUNCTION_DEVICE"
          ]
        ]
      }
    },
    "/v1/Devices/reset": {
      "patch": {
        "tags": [
          "Devices"
        ],
        "summary": "Reset Device",
        "description": "Example\r\n<pre>\r\n{\r\n        \"devicePointUuid\":\"[Device Point UUID]\",\r\n}\r\n</pre>",
        "operationId": "ResetDevice",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ResetDeviceInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetDeviceInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetDeviceInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ResetDeviceInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "FACTORY_RESET_DEVICE"
          ]
        ]
      }
    },
    "/v1/Devices/locatedevice": {
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Locate Device",
        "operationId": "LocateDevice",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LocateDeviceInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocateDeviceInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LocateDeviceInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LocateDeviceInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "LOCATE_DEVICE"
          ]
        ]
      }
    },
    "/v1/Devices/executedevicefunctiontest/{devicePointUUID}": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Executes Device Function Test",
        "operationId": "ExecuteDeviceFunctionTest",
        "parameters": [
          {
            "name": "devicePointUUID",
            "in": "path",
            "description": "DevicePoint UUID",
            "required": true,
            "schema": {
              "maxLength": 32,
              "type": "string",
              "description": "DevicePoint UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EXECUTE_FUNCTION_TEST"
          ]
        ]
      }
    },
    "/v1/Devices/setdevicemaintenanceinterval/{devicePointUUID}": {
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Sets the maintenance interval for a device",
        "operationId": "SetDeviceMaintenanceInterval",
        "parameters": [
          {
            "name": "devicePointUUID",
            "in": "path",
            "description": "DevicePoint UUID",
            "required": true,
            "schema": {
              "maxLength": 32,
              "type": "string",
              "description": "DevicePoint UUID"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SetDeviceMaintenanceIntervalInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetDeviceMaintenanceIntervalInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetDeviceMaintenanceIntervalInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetDeviceMaintenanceIntervalInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SET_DEVICE_MAINTENANCE_INTERVAL"
          ]
        ]
      }
    },
    "/v1/Devices/setdevicemaintenancelasttimestamp/{devicePointUUID}": {
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Sets the maintenance interval for a device",
        "operationId": "ExecuteDeviceMaintenance",
        "parameters": [
          {
            "name": "devicePointUUID",
            "in": "path",
            "description": "DevicePoint UUID",
            "required": true,
            "schema": {
              "maxLength": 32,
              "type": "string",
              "description": "DevicePoint UUID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "pattern": "^[a-zA-Z0-9_-]+\\.(?i)(odt|doc|docx|txt|pdf)$",
                    "type": "string",
                    "description": "maintenance report file (.doc, .docx, .odt, .pdf, .txt)",
                    "format": "binary",
                    "nullable": true
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EXECUTE_DEVICE_MAINTENANCE"
          ]
        ]
      }
    },
    "/v1/Devices/sensorsonport/{deviceTypeName}": {
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Get all SensorTypeNames for Port",
        "operationId": "GetSensorsOnPort",
        "parameters": [
          {
            "name": "deviceTypeName",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": []
      }
    },
    "/v1/Devices/StartLocateDeviceReverse": {
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Locate the device reverse\r\nAt first call this endpoint and after manual localization of a device, call LocateDeviceReverse endpoint",
        "operationId": "StartLocateDeviceReverse",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": []
      }
    },
    "/v1/Devices/LocateDeviceReverse": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Returns the devices that want to be found by user\r\nAt first call StartLocateDeviceReverse before use this endpoint",
        "operationId": "LocateDeviceReverse",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": []
      }
    },
    "/v1/DteFunctionTest/StartTest": {
      "put": {
        "tags": [
          "DteFunctionTest"
        ],
        "summary": "Starts the dte function test and returns the total number of test cases.",
        "operationId": "StartTest",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TestStartInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestStartInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TestStartInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TestStartInput"
              }
            }
          }
        },
        "responses": {
          "102": {
            "description": "Information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EXECUTE_FUNCTION_TEST"
          ]
        ]
      }
    },
    "/v1/DteFunctionTest/GetCurrentTestCase/{testId}": {
      "get": {
        "tags": [
          "DteFunctionTest"
        ],
        "summary": "Returns the current test case. For the current index, see TwmsBackend.Services.DteFunctionTestService.TestCase.TestCaseIndex.",
        "operationId": "GetCurrentTestCase",
        "parameters": [
          {
            "name": "testId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "102": {
            "description": "Information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EXECUTE_FUNCTION_TEST"
          ]
        ]
      }
    },
    "/v1/DteFunctionTest/SetTestCaseInput": {
      "post": {
        "tags": [
          "DteFunctionTest"
        ],
        "summary": "Set ipnut of a test case.",
        "operationId": "SetTestCaseInput",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TestSetInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestSetInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TestSetInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TestSetInput"
              }
            }
          }
        },
        "responses": {
          "102": {
            "description": "Information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EXECUTE_FUNCTION_TEST"
          ]
        ]
      }
    },
    "/v1/DteFunctionTest/Cancel": {
      "patch": {
        "tags": [
          "DteFunctionTest"
        ],
        "summary": "Cancel the test.",
        "operationId": "Cancel",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TestInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TestInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TestInput"
              }
            }
          }
        },
        "responses": {
          "102": {
            "description": "Information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EXECUTE_FUNCTION_TEST"
          ]
        ]
      }
    },
    "/v1/DteFunctionTest/SkipTestCase": {
      "patch": {
        "tags": [
          "DteFunctionTest"
        ],
        "summary": "Skips the current step case.",
        "operationId": "SkipTestCase",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TestSkipInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestSkipInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TestSkipInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TestSkipInput"
              }
            }
          }
        },
        "responses": {
          "102": {
            "description": "Information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EXECUTE_FUNCTION_TEST"
          ]
        ]
      }
    },
    "/v1/DteFunctionTest/NextTestCase": {
      "patch": {
        "tags": [
          "DteFunctionTest"
        ],
        "summary": "Go to the next test case. Only possible if the current test case was finished.",
        "operationId": "NextTestCase",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TestInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TestInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TestInput"
              }
            }
          }
        },
        "responses": {
          "102": {
            "description": "Information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EXECUTE_FUNCTION_TEST"
          ]
        ]
      }
    },
    "/v1/DteFunctionTest/RestartCurrentTestCase": {
      "patch": {
        "tags": [
          "DteFunctionTest"
        ],
        "summary": "Restarts the current test case.",
        "operationId": "RestartCurrentTestCase",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TestInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TestInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TestInput"
              }
            }
          }
        },
        "responses": {
          "102": {
            "description": "Information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EXECUTE_FUNCTION_TEST"
          ]
        ]
      }
    },
    "/v1/DteFunctionTest/GetTestResult/{testId}": {
      "get": {
        "tags": [
          "DteFunctionTest"
        ],
        "summary": "Get the result objects of every test.",
        "operationId": "GetTestResult",
        "parameters": [
          {
            "name": "testId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TestSeriesResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestSeriesResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestSeriesResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EXECUTE_FUNCTION_TEST"
          ]
        ]
      }
    },
    "/v1/DteFunctionTest/RestartTest": {
      "patch": {
        "tags": [
          "DteFunctionTest"
        ],
        "summary": "Restarts the test series",
        "operationId": "RestartTest",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TestInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TestInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TestInput"
              }
            }
          }
        },
        "responses": {
          "102": {
            "description": "Information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCase"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EXECUTE_FUNCTION_TEST"
          ]
        ]
      }
    },
    "/v1/DteFunctionTest/FinishTest": {
      "delete": {
        "tags": [
          "DteFunctionTest"
        ],
        "summary": "Finishes the test series",
        "operationId": "FinishTest",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TestInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TestInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TestInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EXECUTE_FUNCTION_TEST"
          ]
        ]
      }
    },
    "/v1/Functions/Flush/StartThermalDisinfection/{functionName}": {
      "post": {
        "tags": [
          "Flush"
        ],
        "summary": "Starts thermal disinfection (see https://collab.cbb.de/confluence/pages/viewpage.action?pageId=20742424 for more details)",
        "operationId": "StartThermalDisinfection",
        "parameters": [
          {
            "name": "functionName",
            "in": "path",
            "description": "Name of the thermal disinfection function",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the thermal disinfection function",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "Node Id's of all devices that are flushed",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "Node Id's of all devices that are flushed"
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "Node Id's of all devices that are flushed"
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "Node Id's of all devices that are flushed"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                },
                "description": "Node Id's of all devices that are flushed"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StartThermalDisinfectionOutputDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartThermalDisinfectionOutputDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartThermalDisinfectionOutputDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EXECUTE_FUNCTION"
          ]
        ]
      }
    },
    "/v1/Functions/Flush/ThermalDisinfectionStatus/{taskId}": {
      "get": {
        "tags": [
          "Flush"
        ],
        "summary": "Gets the thermal disinfection status (see https://collab.cbb.de/confluence/pages/viewpage.action?pageId=20742424 for more details)",
        "operationId": "GetThermalDisinfectionStatus",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "Id of the thermal disinfection task",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Id of the thermal disinfection task",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ThermalDisinfectionTaskStatusObjOutputDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThermalDisinfectionTaskStatusObjOutputDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThermalDisinfectionTaskStatusObjOutputDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EXECUTE_FUNCTION"
          ]
        ]
      }
    },
    "/v1/Functions/Flush/GetThermalDisinfectionTasks": {
      "get": {
        "tags": [
          "Flush"
        ],
        "summary": "Get all thermal disinfection tasks",
        "operationId": "GetThermalDisinfectionTasks",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/FunctionNameStartTimeOutputDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/FunctionNameStartTimeOutputDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/FunctionNameStartTimeOutputDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EXECUTE_FUNCTION"
          ]
        ]
      }
    },
    "/v1/Functions/Flush/AbortThermalDisinfection/{taskId}": {
      "post": {
        "tags": [
          "Flush"
        ],
        "summary": "Aborts a thermal disinfection (see https://collab.cbb.de/confluence/pages/viewpage.action?pageId=20742424 for more details)",
        "operationId": "AbortThermalDisinfection",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "TaskId of a running thermal Disinfection",
            "required": true,
            "schema": {
              "type": "string",
              "description": "TaskId of a running thermal Disinfection",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EXECUTE_FUNCTION"
          ]
        ]
      }
    },
    "/v1/Functions/Flush/SetThermalDisinfectionDteTargetTemperatureUserClaim/{taskId}": {
      "post": {
        "tags": [
          "Flush"
        ],
        "summary": "Claims the DTE target temperature for running thermal disinfection task. Only availble if FunctionsInput.DteUuid == null\r\n(see https://collab.cbb.de/confluence/pages/viewpage.action?pageId=20742424 for more details)",
        "operationId": "SetThermalDisinfectionDteTargetTemperatureUserClaim",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "TaskId of a running thermal Disinfection",
            "required": true,
            "schema": {
              "type": "string",
              "description": "TaskId of a running thermal Disinfection",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EXECUTE_FUNCTION"
          ]
        ]
      }
    },
    "/v1/Functions/Flush/schedule/default": {
      "get": {
        "tags": [
          "Flush"
        ],
        "summary": "Returns a flush schedule with default values",
        "operationId": "GetDefaultFlushSchedule",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FlushScheduleInput"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlushScheduleInput"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlushScheduleInput"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "READ_DEVICE_POINT_GROUP_FUNCTION"
          ]
        ]
      }
    },
    "/v1/Functions/Flush/schedule/shutdown": {
      "post": {
        "tags": [
          "Flush"
        ],
        "summary": "Set a cleaning shutdown for a flush schedule",
        "description": "Example start parameter:\r\n<pre>\r\n{\r\n    \"functionName\" : \"My flush schedule interval\",\r\n    \"durationMin\" : 20\r\n}\r\n</pre>",
        "operationId": "SetCleaningShutdown",
        "requestBody": {
          "description": "Parameters for the cleaning shutdown",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SetCleaningShutdownInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetCleaningShutdownInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetCleaningShutdownInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetCleaningShutdownInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "DEACTIVATE_CLEANING"
          ]
        ]
      }
    },
    "/v1/FunctionTest/GetHandleNoValues": {
      "get": {
        "tags": [
          "FunctionTest"
        ],
        "summary": "Get Hanlde Value via HandleNo",
        "description": "Example start parameter:\r\n<pre>\r\n[\r\n    { \"handleNo\" : \"10023\", \"valueType\" : \"int32\", \"value\" : 123 },\r\n    { \"handleNo\" : \"10021\", \"valueType\" : \"int32\", \"value\" : 123 }\r\n]\r\n</pre>",
        "operationId": "GetHandleNoValues",
        "requestBody": {
          "description": "List of handleNo's and value types",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HandleNoValueType"
                },
                "description": "List of handleNo's and value types",
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HandleNoValueType"
                },
                "description": "List of handleNo's and value types",
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HandleNoValueType"
                },
                "description": "List of handleNo's and value types",
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HandleNoValueType"
                },
                "description": "List of handleNo's and value types",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EXECUTE_PRODUCTION_FUNCTION_TEST"
          ]
        ]
      }
    },
    "/v1/FunctionTest/GetCanObjectValues": {
      "get": {
        "tags": [
          "FunctionTest"
        ],
        "summary": "Get Hanlde Value via CAN-Object data",
        "description": "Example start parameter:\r\n<pre>\r\n[\r\n    { \"nodeID\" : \"10023\", \"mainIndex\" : \"12AB\", \"subIndex\": 1, \"value\" : 123 },\r\n    { \"nodeID\" : \"10023\", \"mainIndex\" : \"12AB\", \"subIndex\": 1, \"value\" : 123 }\r\n]\r\n</pre>",
        "operationId": "GetCanObjectValues",
        "requestBody": {
          "description": "List of handleNo's and value types",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CanObjectValueType"
                },
                "description": "List of handleNo's and value types",
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CanObjectValueType"
                },
                "description": "List of handleNo's and value types",
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CanObjectValueType"
                },
                "description": "List of handleNo's and value types",
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CanObjectValueType"
                },
                "description": "List of handleNo's and value types",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EXECUTE_PRODUCTION_FUNCTION_TEST"
          ]
        ]
      }
    },
    "/v1/FunctionTest/SetCanObjectValues": {
      "post": {
        "tags": [
          "FunctionTest"
        ],
        "summary": "Set Hanlde Value via CAN-Object data",
        "description": "Example start parameter:\r\n<pre>\r\n[\r\n    { \"nodeID\" : \"10023\", \"mainIndex\" : \"12AB\", \"subIndex\": 1, \"value\" : 123 },\r\n    { \"nodeID\" : \"10023\", \"mainIndex\" : \"12AB\", \"subIndex\": 1, \"value\" : 123 }\r\n]\r\n</pre>",
        "operationId": "SetCanObjectValues",
        "requestBody": {
          "description": "List of handleNo's and value types",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CanObjectValueTypeValue"
                },
                "description": "List of handleNo's and value types",
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CanObjectValueTypeValue"
                },
                "description": "List of handleNo's and value types",
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CanObjectValueTypeValue"
                },
                "description": "List of handleNo's and value types",
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CanObjectValueTypeValue"
                },
                "description": "List of handleNo's and value types",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EXECUTE_PRODUCTION_FUNCTION_TEST"
          ]
        ]
      }
    },
    "/v1/FunctionTest/SetHandleNoValues": {
      "post": {
        "tags": [
          "FunctionTest"
        ],
        "summary": "Set Hanlde Value via HandleNo",
        "description": "Example start parameter:\r\n<pre>\r\n[\r\n    { \"handleNo\" : \"10023\", \"valueType\" : \"int32\" },\r\n    { \"handleNo\" : \"10021\", \"valueType\" : \"int32\" }\r\n]\r\n</pre>",
        "operationId": "SetHandleNoValues",
        "requestBody": {
          "description": "List of handleNo's and value types",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HandleNoValueTypeValue"
                },
                "description": "List of handleNo's and value types",
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HandleNoValueTypeValue"
                },
                "description": "List of handleNo's and value types",
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HandleNoValueTypeValue"
                },
                "description": "List of handleNo's and value types",
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HandleNoValueTypeValue"
                },
                "description": "List of handleNo's and value types",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EXECUTE_PRODUCTION_FUNCTION_TEST"
          ]
        ]
      }
    },
    "/v1/FunctionTest/writeTestResult": {
      "post": {
        "tags": [
          "FunctionTest"
        ],
        "summary": "Writes DTE Werkfunktionstest Ergibnis to TWMS Database\r\non success disables ProductionTest",
        "operationId": "WriteTestResult",
        "parameters": [
          {
            "name": "success",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "description": ""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EXECUTE_PRODUCTION_FUNCTION_TEST"
          ]
        ]
      }
    },
    "/v1/FunctionTest/gpio": {
      "post": {
        "tags": [
          "FunctionTest"
        ],
        "operationId": "SetGPIOPin",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SetGPOIPinInput"
                },
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SetGPOIPinInput"
                },
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SetGPOIPinInput"
                },
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SetGPOIPinInput"
                },
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IActionResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IActionResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IActionResult"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EXECUTE_PRODUCTION_FUNCTION_TEST"
          ]
        ]
      },
      "get": {
        "tags": [
          "FunctionTest"
        ],
        "operationId": "GetGPIOPin",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GetGPOIPinInput"
                },
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GetGPOIPinInput"
                },
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GetGPOIPinInput"
                },
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GetGPOIPinInput"
                },
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetGPOIPinOutput"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetGPOIPinOutput"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetGPOIPinOutput"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EXECUTE_PRODUCTION_FUNCTION_TEST"
          ]
        ]
      }
    },
    "/v1/Images/postimage": {
      "post": {
        "tags": [
          "Image"
        ],
        "summary": "Uploads an image",
        "description": "Example\r\n<pre></pre>",
        "operationId": "PostImage",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "pattern": "^[a-zA-Z0-9_-]+\\.(?i)(gif|jpg|jpeg|png)$",
                    "type": "string",
                    "description": "IFormFile Object",
                    "format": "binary",
                    "nullable": true
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "POST_IMAGE"
          ]
        ]
      }
    },
    "/v1/Images": {
      "get": {
        "tags": [
          "Image"
        ],
        "summary": "Gets all images",
        "description": "Example\r\n<pre></pre>",
        "operationId": "GetFiles",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "DELETE_IMAGE"
          ]
        ]
      }
    },
    "/v1/Images/deleteimage": {
      "post": {
        "tags": [
          "Image"
        ],
        "summary": "Delete an Image",
        "description": "Example\r\n<pre></pre>",
        "operationId": "DeleteImage",
        "requestBody": {
          "description": "DeleteImageInput Object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteImageInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteImageInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteImageInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteImageInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "DELETE_IMAGE"
          ]
        ]
      }
    },
    "/v1/Reports/usbfile": {
      "get": {
        "tags": [
          "ItemReports"
        ],
        "summary": "Show the files names/reports from the signed in user on the usb-drive.",
        "operationId": "GetUsbfiles",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ReportFileParametersDto"
                    }
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ReportFileParametersDto"
                    }
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ReportFileParametersDto"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_LOCAL_REPORTS"
          ]
        ]
      }
    },
    "/v1/Reports/usbfile/{uuid}/{fileName}": {
      "get": {
        "tags": [
          "ItemReports"
        ],
        "summary": "Download file/report from the local filesystem (usb-drive).",
        "operationId": "DownloadUsbfile",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "user uuid",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 0,
              "type": "string",
              "description": "user uuid"
            }
          },
          {
            "name": "fileName",
            "in": "path",
            "description": "report/file created by user uuid",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9_-]+\\.(?i)(csv|pdf)$",
              "type": "string",
              "description": "report/file created by user uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_LOCAL_REPORTS"
          ]
        ]
      },
      "delete": {
        "tags": [
          "ItemReports"
        ],
        "summary": "Read/import files/reports from the usb-drive.",
        "operationId": "DeleteUsbfile",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "user uuid",
            "required": true,
            "schema": {
              "maxLength": 32,
              "minLength": 0,
              "type": "string",
              "description": "user uuid"
            }
          },
          {
            "name": "fileName",
            "in": "path",
            "description": "report/file created by user uuid",
            "required": true,
            "schema": {
              "pattern": "^[a-zA-Z0-9_-]+\\.(?i)(csv|pdf)$",
              "type": "string",
              "description": "report/file created by user uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "DELETE_ALL_LOCAL_REPORTS"
          ]
        ]
      }
    },
    "/v1/Reports/liveview/{devicePointId}/{channelFunc}": {
      "get": {
        "tags": [
          "ItemReports"
        ],
        "summary": "Get data from a running liveview",
        "operationId": "GetLiveview",
        "parameters": [
          {
            "name": "devicePointId",
            "in": "path",
            "description": "devicePointId",
            "required": true,
            "schema": {
              "type": "string",
              "description": "devicePointId"
            }
          },
          {
            "name": "channelFunc",
            "in": "path",
            "description": "channelFunc e.g. Get_Temperature",
            "required": true,
            "schema": {
              "type": "string",
              "description": "channelFunc e.g. Get_Temperature"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReportLiveviewObject"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportLiveviewObject"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportLiveviewObject"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_DATA_LOG"
          ]
        ]
      }
    },
    "/v1/Reports/Filter/options": {
      "get": {
        "tags": [
          "ItemReportsFilter"
        ],
        "summary": "Get all filter categories (e.g. uuid, typeName, ...)",
        "operationId": "GetCategories",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_DATA_LOG"
          ]
        ]
      }
    },
    "/v1/Reports/Filter/options/{filterCategory}": {
      "get": {
        "tags": [
          "ItemReportsFilter"
        ],
        "summary": "Get all possible values per filter category (e.g. all device names)",
        "operationId": "GetOptions",
        "parameters": [
          {
            "name": "filterCategory",
            "in": "path",
            "description": "filter category",
            "required": true,
            "schema": {
              "type": "string",
              "description": "filter category"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_DATA_LOG"
          ]
        ]
      }
    },
    "/v1/Reports/Filter/option": {
      "get": {
        "tags": [
          "ItemReportsFilter"
        ],
        "summary": "Used for dropdown filtering (e.g. select typeName \"Wall-E\" => get all devicePointNames/uuid's with Type \"Wall-E\"). \r\nReturns table with columns uuid, devicePointName, typeName, channelName",
        "description": "Example\r\n<pre>\r\n{\r\n\t\"uuid\":\"8953641b732467a4d07372d45eb05abc\",\r\n\t\"devicePointName\":\"Wandauslauf 12\",\r\n\t\"typeName\":\"DTE\",\r\n\t\"channelChannelNo\":\"4\",\r\n\t\"channelName\":\"Mischtemp.\"\r\n}\r\n</pre>",
        "operationId": "GetOptionQuery",
        "parameters": [
          {
            "name": "device_point_uuid",
            "in": "query",
            "description": "name of the device point, e.g. \"Wandauslauf Zimmer 1\"",
            "schema": {
              "type": "string",
              "description": "name of the device point, e.g. \"Wandauslauf Zimmer 1\"",
              "nullable": true
            }
          },
          {
            "name": "device_uuid",
            "in": "query",
            "description": "name of the device, e.g. \"Wall-E 2\"",
            "schema": {
              "type": "string",
              "description": "name of the device, e.g. \"Wall-E 2\"",
              "nullable": true
            }
          },
          {
            "name": "device_type_name",
            "in": "query",
            "description": "type of the device, e.g. \"Wall-E\"",
            "schema": {
              "type": "string",
              "description": "type of the device, e.g. \"Wall-E\"",
              "nullable": true
            }
          },
          {
            "name": "unit",
            "in": "query",
            "description": "unit of DataPoint, e.g. \"degC\"",
            "schema": {
              "type": "string",
              "description": "unit of DataPoint, e.g. \"degC\"",
              "nullable": true
            }
          },
          {
            "name": "data_point_id",
            "in": "query",
            "description": "number of the channel, e.g. 6 (6 = Temperature_Get, see enum ChannelValueCodes or emico c api)",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "description": "number of the channel, e.g. 6 (6 = Temperature_Get, see enum ChannelValueCodes or emico c api)",
              "format": "int32",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReportOptionsQueryResultDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportOptionsQueryResultDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportOptionsQueryResultDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_DATA_LOG"
          ]
        ]
      }
    },
    "/v1/Reports/Filter/data": {
      "get": {
        "tags": [
          "ItemReportsFilter"
        ],
        "summary": "Select data via filter options. Returns table with columns DateUtc, DevicePointName, DevicePointUuid, DeviceName, DeviceUuid, DeviceTypeName, DataPointId, Value",
        "description": "Example\r\n<pre>\r\n{\r\n\t\"devicePointUuid\":\"8953641b732467a4d07372d45eb05abc\",\r\n\t\"typeName\":\"DTE\",\r\n\t\"DataPointId\":\"4\",\r\n\t\"dateUTCMin\":\"2019-03-04T11:28:18.000000\"\r\n\t\"dateUTCMax\":\"2019-03-04T11:28:18.000000\",\r\n\t\"offset\":\"10\",\r\n\t\"limit\":\"5\",\r\n\t\"order\":\"asc\"\r\n}\r\n</pre>",
        "operationId": "GetDataQuery",
        "parameters": [
          {
            "name": "device_point_name",
            "in": "query",
            "description": "uuid of the device point which created this data point",
            "schema": {
              "type": "string",
              "description": "uuid of the device point which created this data point",
              "nullable": true
            }
          },
          {
            "name": "device_point_uuid",
            "in": "query",
            "description": "uuid of the device point which created this data point",
            "schema": {
              "maxLength": 32,
              "minLength": 0,
              "type": "string",
              "description": "uuid of the device point which created this data point",
              "nullable": true
            }
          },
          {
            "name": "device_uuid",
            "in": "query",
            "description": "name of the device, e.g. \"Wall-E 2\"",
            "schema": {
              "maxLength": 32,
              "minLength": 0,
              "type": "string",
              "description": "name of the device, e.g. \"Wall-E 2\"",
              "nullable": true
            }
          },
          {
            "name": "device_type_name",
            "in": "query",
            "description": "type of the device, e.g. \"Wall-E\"",
            "schema": {
              "type": "string",
              "description": "type of the device, e.g. \"Wall-E\"",
              "nullable": true
            }
          },
          {
            "name": "data_point_id",
            "in": "query",
            "description": "number of the channel, e.g. 6 (6 = Temperature_Get, see enum ChannelValueCodes or emico c api)",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "description": "number of the channel, e.g. 6 (6 = Temperature_Get, see enum ChannelValueCodes or emico c api)",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "data_point_description",
            "in": "query",
            "description": "channel description, e.g. Get Temperature",
            "schema": {
              "type": "string",
              "description": "channel description, e.g. Get Temperature",
              "nullable": true
            }
          },
          {
            "name": "data_point_unit",
            "in": "query",
            "description": "channel unit, e.g. DegC",
            "schema": {
              "type": "string",
              "description": "channel unit, e.g. DegC",
              "nullable": true
            }
          },
          {
            "name": "date_utc_min",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "date_utc_max",
            "in": "query",
            "description": "Consider only datalog elements with date less or equal DateUTCMax",
            "schema": {
              "type": "string",
              "description": "Consider only datalog elements with date less or equal DateUTCMax",
              "nullable": true
            }
          },
          {
            "name": "date_utc_offset_base",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "date_offset_sec",
            "in": "query",
            "description": "Alternative option to set DateUTCMin and DateUTCMax\r\nOnly in combination with DateUTC",
            "schema": {
              "type": "integer",
              "description": "Alternative option to set DateUTCMin and DateUTCMax\r\nOnly in combination with DateUTC",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "value_min",
            "in": "query",
            "description": "Value should be greater equal ValueMin\r\nif we want to allow negatives values, we have to change the generator constaint \"if (valueMin lower 0.0) then\"",
            "schema": {
              "minimum": 0,
              "type": "number",
              "description": "Value should be greater equal ValueMin\r\nif we want to allow negatives values, we have to change the generator constaint \"if (valueMin lower 0.0) then\"",
              "format": "double",
              "nullable": true
            }
          },
          {
            "name": "value_max",
            "in": "query",
            "description": "Value should be lower equal ValueMax",
            "schema": {
              "type": "number",
              "description": "Value should be lower equal ValueMax",
              "format": "double",
              "nullable": true
            }
          },
          {
            "name": "DataType",
            "in": "query",
            "description": "Desired Datatype",
            "schema": {
              "$ref": "#/components/schemas/OutputDataType"
            }
          },
          {
            "name": "VirtualInitValue",
            "in": "query",
            "description": "should include virtual initial value\r\nif no DataPoint matches filter criteria the last DataPoint befor selected timeframe is given",
            "schema": {
              "type": "boolean",
              "description": "should include virtual initial value\r\nif no DataPoint matches filter criteria the last DataPoint befor selected timeframe is given"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the number of returned data log entries (obtained by the query)",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "description": "Limits the number of returned data log entries (obtained by the query)",
              "format": "int32"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "Offset for the query result (useful for pagination)",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "description": "Offset for the query result (useful for pagination)",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "skiptoken",
            "in": "query",
            "description": "Predicate for the seek pagination (row id)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "description": "Predicate for the seek pagination (row id)",
              "format": "int64",
              "nullable": true
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Order the returned data log entries (by now there is only the \"Date\" column supported)",
            "schema": {
              "type": "string",
              "description": "Order the returned data log entries (by now there is only the \"Date\" column supported)",
              "nullable": true
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order of the returned data log entries (dependent to OrderBy)\r\n\"asc\" or \"desc\" allowed, default OrderBy column is \"date\"",
            "schema": {
              "type": "string",
              "description": "Order of the returned data log entries (dependent to OrderBy)\r\n\"asc\" or \"desc\" allowed, default OrderBy column is \"date\"",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportDataQueryOutputDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportDataQueryOutputDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportDataQueryOutputDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_DATA_LOG"
          ]
        ]
      }
    },
    "/v1/Reports/Filter/data/odata": {
      "get": {
        "tags": [
          "ItemReportsFilter"
        ],
        "summary": "Select data via filter options. Returns table with columns DateUtc, DevicePointName, DevicePointUuid, DeviceName, DeviceUuid, DeviceTypeName, RegisterNumber, Value\r\nYou can set the following filter parameters {this predicates are possible for the parameter}:\r\nstring DevicePointUuid {eq}\r\nstring DataType {eq} => possible values are 'json'(default if not set) and 'csv'(string) and 'csvfile'(file object)\r\nstring DeviceUuid {eq}\r\nstring DeviceTypeName {eq} => e.g. 'Beat-E'\r\nint RegisterNumber {eq}\r\nstring DateUtc {eq,ge,le}\r\nfloat Value {eq,ge,le}",
        "description": "Example\r\n{{base_url}}/reports/filter/data/odata/?$count=true&$orderBy=dateUtc&$skip=5&$top=10&$filter=RegisterNumber eq 6 and DateUtc ge '2018-03-04T11:28:18.000000' and DateUtc le '2020-03-07T13:29:39.000000' and DevicePointUuid eq 'dec1ceb01d7aaabea7eaaaaaaaaa0001' and DeviceUuid eq 'dec1ceaaabea7eaaaaaaaaaaaaaa0001' and DeviceTypeName eq 'Beat-E' and Value le 70 and Value ge 2 and DataType eq 'json'",
        "operationId": "GetDataQueryOData",
        "parameters": [
          {
            "name": "device_point_name",
            "in": "query",
            "description": "uuid of the device point which created this data point",
            "schema": {
              "type": "string",
              "description": "uuid of the device point which created this data point",
              "nullable": true
            }
          },
          {
            "name": "device_point_uuid",
            "in": "query",
            "description": "uuid of the device point which created this data point",
            "schema": {
              "maxLength": 32,
              "minLength": 0,
              "type": "string",
              "description": "uuid of the device point which created this data point",
              "nullable": true
            }
          },
          {
            "name": "device_uuid",
            "in": "query",
            "description": "name of the device, e.g. \"Wall-E 2\"",
            "schema": {
              "maxLength": 32,
              "minLength": 0,
              "type": "string",
              "description": "name of the device, e.g. \"Wall-E 2\"",
              "nullable": true
            }
          },
          {
            "name": "device_type_name",
            "in": "query",
            "description": "type of the device, e.g. \"Wall-E\"",
            "schema": {
              "type": "string",
              "description": "type of the device, e.g. \"Wall-E\"",
              "nullable": true
            }
          },
          {
            "name": "data_point_id",
            "in": "query",
            "description": "number of the channel, e.g. 6 (6 = Temperature_Get, see enum ChannelValueCodes or emico c api)",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "description": "number of the channel, e.g. 6 (6 = Temperature_Get, see enum ChannelValueCodes or emico c api)",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "data_point_description",
            "in": "query",
            "description": "channel description, e.g. Get Temperature",
            "schema": {
              "type": "string",
              "description": "channel description, e.g. Get Temperature",
              "nullable": true
            }
          },
          {
            "name": "data_point_unit",
            "in": "query",
            "description": "channel unit, e.g. DegC",
            "schema": {
              "type": "string",
              "description": "channel unit, e.g. DegC",
              "nullable": true
            }
          },
          {
            "name": "date_utc_min",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "date_utc_max",
            "in": "query",
            "description": "Consider only datalog elements with date less or equal DateUTCMax",
            "schema": {
              "type": "string",
              "description": "Consider only datalog elements with date less or equal DateUTCMax",
              "nullable": true
            }
          },
          {
            "name": "date_utc_offset_base",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "date_offset_sec",
            "in": "query",
            "description": "Alternative option to set DateUTCMin and DateUTCMax\r\nOnly in combination with DateUTC",
            "schema": {
              "type": "integer",
              "description": "Alternative option to set DateUTCMin and DateUTCMax\r\nOnly in combination with DateUTC",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "value_min",
            "in": "query",
            "description": "Value should be greater equal ValueMin\r\nif we want to allow negatives values, we have to change the generator constaint \"if (valueMin lower 0.0) then\"",
            "schema": {
              "minimum": 0,
              "type": "number",
              "description": "Value should be greater equal ValueMin\r\nif we want to allow negatives values, we have to change the generator constaint \"if (valueMin lower 0.0) then\"",
              "format": "double",
              "nullable": true
            }
          },
          {
            "name": "value_max",
            "in": "query",
            "description": "Value should be lower equal ValueMax",
            "schema": {
              "type": "number",
              "description": "Value should be lower equal ValueMax",
              "format": "double",
              "nullable": true
            }
          },
          {
            "name": "DataType",
            "in": "query",
            "description": "Desired Datatype",
            "schema": {
              "$ref": "#/components/schemas/OutputDataType"
            }
          },
          {
            "name": "VirtualInitValue",
            "in": "query",
            "description": "should include virtual initial value\r\nif no DataPoint matches filter criteria the last DataPoint befor selected timeframe is given",
            "schema": {
              "type": "boolean",
              "description": "should include virtual initial value\r\nif no DataPoint matches filter criteria the last DataPoint befor selected timeframe is given"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the number of returned data log entries (obtained by the query)",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "description": "Limits the number of returned data log entries (obtained by the query)",
              "format": "int32"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "Offset for the query result (useful for pagination)",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "description": "Offset for the query result (useful for pagination)",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "skiptoken",
            "in": "query",
            "description": "Predicate for the seek pagination (row id)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "description": "Predicate for the seek pagination (row id)",
              "format": "int64",
              "nullable": true
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Order the returned data log entries (by now there is only the \"Date\" column supported)",
            "schema": {
              "type": "string",
              "description": "Order the returned data log entries (by now there is only the \"Date\" column supported)",
              "nullable": true
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order of the returned data log entries (dependent to OrderBy)\r\n\"asc\" or \"desc\" allowed, default OrderBy column is \"date\"",
            "schema": {
              "type": "string",
              "description": "Order of the returned data log entries (dependent to OrderBy)\r\n\"asc\" or \"desc\" allowed, default OrderBy column is \"date\"",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ODataOutput"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ODataOutput"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ODataOutput"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_DATA_LOG"
          ]
        ]
      }
    },
    "/v1/Reports/Filter/data/odatapdf": {
      "get": {
        "tags": [
          "ItemReportsFilter"
        ],
        "summary": "The top value is ignored in this endpoint\r\nSelect data via filter options. Returns a csv file with columns DateUtc, DevicePointName, DevicePointUuid, DeviceName, DeviceUuid, DeviceTypeName, DataPointId, Value\r\nYou can set the following filter parameters {this predicates are possible for the parameter}:\r\nstring DevicePointUuid {eq}\r\nstring DeviceUuid {eq}\r\nstring DeviceTypeName {eq} => e.g. 'Beat-E'\r\nint DataPointId {eq}\r\nstring DateUtc {eq,ge,le}\r\nfloat Value {eq,ge,le}",
        "description": "Example\r\n{{base_url}}/reports/filter/data/odata/?$count=true&$orderBy=dateUtc&$skip=5&$top=10&$filter=DataPointId eq 6 and DateUtc ge '2018-03-04T11:28:18.000000' and DateUtc le '2020-03-07T13:29:39.000000' and DevicePointUuid eq 'dec1ceb01d7aaabea7eaaaaaaaaa0001' and DeviceUuid eq 'dec1ceaaabea7eaaaaaaaaaaaaaa0001' and DeviceTypeName eq 'Beat-E' and Value le 70 and Value ge 2 and DataType eq 'json'",
        "operationId": "GetDataQueryODataPdf",
        "parameters": [
          {
            "name": "device_point_name",
            "in": "query",
            "description": "uuid of the device point which created this data point",
            "schema": {
              "type": "string",
              "description": "uuid of the device point which created this data point",
              "nullable": true
            }
          },
          {
            "name": "device_point_uuid",
            "in": "query",
            "description": "uuid of the device point which created this data point",
            "schema": {
              "maxLength": 32,
              "minLength": 0,
              "type": "string",
              "description": "uuid of the device point which created this data point",
              "nullable": true
            }
          },
          {
            "name": "device_uuid",
            "in": "query",
            "description": "name of the device, e.g. \"Wall-E 2\"",
            "schema": {
              "maxLength": 32,
              "minLength": 0,
              "type": "string",
              "description": "name of the device, e.g. \"Wall-E 2\"",
              "nullable": true
            }
          },
          {
            "name": "device_type_name",
            "in": "query",
            "description": "type of the device, e.g. \"Wall-E\"",
            "schema": {
              "type": "string",
              "description": "type of the device, e.g. \"Wall-E\"",
              "nullable": true
            }
          },
          {
            "name": "data_point_id",
            "in": "query",
            "description": "number of the channel, e.g. 6 (6 = Temperature_Get, see enum ChannelValueCodes or emico c api)",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "description": "number of the channel, e.g. 6 (6 = Temperature_Get, see enum ChannelValueCodes or emico c api)",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "data_point_description",
            "in": "query",
            "description": "channel description, e.g. Get Temperature",
            "schema": {
              "type": "string",
              "description": "channel description, e.g. Get Temperature",
              "nullable": true
            }
          },
          {
            "name": "data_point_unit",
            "in": "query",
            "description": "channel unit, e.g. DegC",
            "schema": {
              "type": "string",
              "description": "channel unit, e.g. DegC",
              "nullable": true
            }
          },
          {
            "name": "date_utc_min",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "date_utc_max",
            "in": "query",
            "description": "Consider only datalog elements with date less or equal DateUTCMax",
            "schema": {
              "type": "string",
              "description": "Consider only datalog elements with date less or equal DateUTCMax",
              "nullable": true
            }
          },
          {
            "name": "date_utc_offset_base",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "date_offset_sec",
            "in": "query",
            "description": "Alternative option to set DateUTCMin and DateUTCMax\r\nOnly in combination with DateUTC",
            "schema": {
              "type": "integer",
              "description": "Alternative option to set DateUTCMin and DateUTCMax\r\nOnly in combination with DateUTC",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "value_min",
            "in": "query",
            "description": "Value should be greater equal ValueMin\r\nif we want to allow negatives values, we have to change the generator constaint \"if (valueMin lower 0.0) then\"",
            "schema": {
              "minimum": 0,
              "type": "number",
              "description": "Value should be greater equal ValueMin\r\nif we want to allow negatives values, we have to change the generator constaint \"if (valueMin lower 0.0) then\"",
              "format": "double",
              "nullable": true
            }
          },
          {
            "name": "value_max",
            "in": "query",
            "description": "Value should be lower equal ValueMax",
            "schema": {
              "type": "number",
              "description": "Value should be lower equal ValueMax",
              "format": "double",
              "nullable": true
            }
          },
          {
            "name": "DataType",
            "in": "query",
            "description": "Desired Datatype",
            "schema": {
              "$ref": "#/components/schemas/OutputDataType"
            }
          },
          {
            "name": "VirtualInitValue",
            "in": "query",
            "description": "should include virtual initial value\r\nif no DataPoint matches filter criteria the last DataPoint befor selected timeframe is given",
            "schema": {
              "type": "boolean",
              "description": "should include virtual initial value\r\nif no DataPoint matches filter criteria the last DataPoint befor selected timeframe is given"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the number of returned data log entries (obtained by the query)",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "description": "Limits the number of returned data log entries (obtained by the query)",
              "format": "int32"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "Offset for the query result (useful for pagination)",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "description": "Offset for the query result (useful for pagination)",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "skiptoken",
            "in": "query",
            "description": "Predicate for the seek pagination (row id)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "description": "Predicate for the seek pagination (row id)",
              "format": "int64",
              "nullable": true
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Order the returned data log entries (by now there is only the \"Date\" column supported)",
            "schema": {
              "type": "string",
              "description": "Order the returned data log entries (by now there is only the \"Date\" column supported)",
              "nullable": true
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order of the returned data log entries (dependent to OrderBy)\r\n\"asc\" or \"desc\" allowed, default OrderBy column is \"date\"",
            "schema": {
              "type": "string",
              "description": "Order of the returned data log entries (dependent to OrderBy)\r\n\"asc\" or \"desc\" allowed, default OrderBy column is \"date\"",
              "nullable": true
            }
          },
          {
            "name": "sid",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_DATA_LOG"
          ]
        ]
      }
    },
    "/v1/Reports/Filter/data/odatacsv": {
      "get": {
        "tags": [
          "ItemReportsFilter"
        ],
        "summary": "The top value is ignored in this endpoint\r\nSelect data via filter options. Returns a csv file with columns DateUtc, DevicePointName, DevicePointUuid, DeviceName, DeviceUuid, DeviceTypeName, DataPointId, Value\r\nYou can set the following filter parameters {this predicates are possible for the parameter}:\r\nstring DevicePointUuid {eq}\r\nstring DataType {eq} => possible values are 'json'(default if not set) and 'csv'(string) and 'csvfile'(file object)\r\nstring DeviceUuid {eq}\r\nstring DeviceTypeName {eq} => e.g. 'Beat-E'\r\nint DataPointId {eq}\r\nstring DateUtc {eq,ge,le}\r\nfloat Value {eq,ge,le}",
        "description": "Example\r\n{{base_url}}/reports/filter/data/odata/?$count=true&amp;$orderBy=dateUtc&amp;$skip=5&amp;$top=10&amp;$filter=DataPointId eq 6 and DateUtc ge '2018-03-04T11:28:18.000000' and DateUtc le '2020-03-07T13:29:39.000000' and DevicePointUuid eq 'dec1ceb01d7aaabea7eaaaaaaaaa0001' and DeviceUuid eq 'dec1ceaaabea7eaaaaaaaaaaaaaa0001' and DeviceTypeName eq 'Beat-E' and Value le 70 and Value ge 2 and DataType eq 'json'",
        "operationId": "GetDataQueryODataCsv",
        "parameters": [
          {
            "name": "device_point_name",
            "in": "query",
            "description": "uuid of the device point which created this data point",
            "schema": {
              "type": "string",
              "description": "uuid of the device point which created this data point",
              "nullable": true
            }
          },
          {
            "name": "device_point_uuid",
            "in": "query",
            "description": "uuid of the device point which created this data point",
            "schema": {
              "maxLength": 32,
              "minLength": 0,
              "type": "string",
              "description": "uuid of the device point which created this data point",
              "nullable": true
            }
          },
          {
            "name": "device_uuid",
            "in": "query",
            "description": "name of the device, e.g. \"Wall-E 2\"",
            "schema": {
              "maxLength": 32,
              "minLength": 0,
              "type": "string",
              "description": "name of the device, e.g. \"Wall-E 2\"",
              "nullable": true
            }
          },
          {
            "name": "device_type_name",
            "in": "query",
            "description": "type of the device, e.g. \"Wall-E\"",
            "schema": {
              "type": "string",
              "description": "type of the device, e.g. \"Wall-E\"",
              "nullable": true
            }
          },
          {
            "name": "data_point_id",
            "in": "query",
            "description": "number of the channel, e.g. 6 (6 = Temperature_Get, see enum ChannelValueCodes or emico c api)",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "description": "number of the channel, e.g. 6 (6 = Temperature_Get, see enum ChannelValueCodes or emico c api)",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "data_point_description",
            "in": "query",
            "description": "channel description, e.g. Get Temperature",
            "schema": {
              "type": "string",
              "description": "channel description, e.g. Get Temperature",
              "nullable": true
            }
          },
          {
            "name": "data_point_unit",
            "in": "query",
            "description": "channel unit, e.g. DegC",
            "schema": {
              "type": "string",
              "description": "channel unit, e.g. DegC",
              "nullable": true
            }
          },
          {
            "name": "date_utc_min",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "date_utc_max",
            "in": "query",
            "description": "Consider only datalog elements with date less or equal DateUTCMax",
            "schema": {
              "type": "string",
              "description": "Consider only datalog elements with date less or equal DateUTCMax",
              "nullable": true
            }
          },
          {
            "name": "date_utc_offset_base",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "date_offset_sec",
            "in": "query",
            "description": "Alternative option to set DateUTCMin and DateUTCMax\r\nOnly in combination with DateUTC",
            "schema": {
              "type": "integer",
              "description": "Alternative option to set DateUTCMin and DateUTCMax\r\nOnly in combination with DateUTC",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "value_min",
            "in": "query",
            "description": "Value should be greater equal ValueMin\r\nif we want to allow negatives values, we have to change the generator constaint \"if (valueMin lower 0.0) then\"",
            "schema": {
              "minimum": 0,
              "type": "number",
              "description": "Value should be greater equal ValueMin\r\nif we want to allow negatives values, we have to change the generator constaint \"if (valueMin lower 0.0) then\"",
              "format": "double",
              "nullable": true
            }
          },
          {
            "name": "value_max",
            "in": "query",
            "description": "Value should be lower equal ValueMax",
            "schema": {
              "type": "number",
              "description": "Value should be lower equal ValueMax",
              "format": "double",
              "nullable": true
            }
          },
          {
            "name": "DataType",
            "in": "query",
            "description": "Desired Datatype",
            "schema": {
              "$ref": "#/components/schemas/OutputDataType"
            }
          },
          {
            "name": "VirtualInitValue",
            "in": "query",
            "description": "should include virtual initial value\r\nif no DataPoint matches filter criteria the last DataPoint befor selected timeframe is given",
            "schema": {
              "type": "boolean",
              "description": "should include virtual initial value\r\nif no DataPoint matches filter criteria the last DataPoint befor selected timeframe is given"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the number of returned data log entries (obtained by the query)",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "description": "Limits the number of returned data log entries (obtained by the query)",
              "format": "int32"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "Offset for the query result (useful for pagination)",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "description": "Offset for the query result (useful for pagination)",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "skiptoken",
            "in": "query",
            "description": "Predicate for the seek pagination (row id)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "description": "Predicate for the seek pagination (row id)",
              "format": "int64",
              "nullable": true
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Order the returned data log entries (by now there is only the \"Date\" column supported)",
            "schema": {
              "type": "string",
              "description": "Order the returned data log entries (by now there is only the \"Date\" column supported)",
              "nullable": true
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order of the returned data log entries (dependent to OrderBy)\r\n\"asc\" or \"desc\" allowed, default OrderBy column is \"date\"",
            "schema": {
              "type": "string",
              "description": "Order of the returned data log entries (dependent to OrderBy)\r\n\"asc\" or \"desc\" allowed, default OrderBy column is \"date\"",
              "nullable": true
            }
          },
          {
            "name": "sid",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "description": "",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_DATA_LOG"
          ]
        ]
      }
    },
    "/v1/Reports/Filter/lastflush": {
      "get": {
        "tags": [
          "ItemReportsFilter"
        ],
        "operationId": "GetLastFlushingTimestamp",
        "parameters": [
          {
            "name": "devicePointUUID",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_DATA_LOG"
          ]
        ]
      }
    },
    "/v1/Reports/service/{serviceId}": {
      "get": {
        "tags": [
          "ItemReportsService"
        ],
        "summary": "Get report service",
        "operationId": "GetService",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "service uuid",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "service uuid",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReportServiceParametersDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportServiceParametersDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportServiceParametersDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_REPORT_SERVICES"
          ]
        ]
      },
      "post": {
        "tags": [
          "ItemReportsService"
        ],
        "summary": "Execute report service",
        "operationId": "ExecuteService",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "serviceId",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReportServiceExecutionResultDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportServiceExecutionResultDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportServiceExecutionResultDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EXECUTE_REPORT_SERVICES"
          ]
        ]
      },
      "delete": {
        "tags": [
          "ItemReportsService"
        ],
        "summary": "Delete report service",
        "operationId": "DeleteService",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "serviceId",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "DELETE_REPORT_SERVICES"
          ]
        ]
      }
    },
    "/v1/Reports/service": {
      "get": {
        "tags": [
          "ItemReportsService"
        ],
        "summary": "Get all report services",
        "operationId": "GetServices",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportServiceParametersDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportServiceParametersDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportServiceParametersDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_REPORT_SERVICES"
          ]
        ]
      },
      "post": {
        "tags": [
          "ItemReportsService"
        ],
        "summary": "Add report service",
        "description": "Example (see https://collab.cbb.de/confluence/display/CIT/CreateService+backend+endpoint+description for more details)\r\n<pre>\r\n{\r\n    \"servicename\":\"my Servüce\",\r\n    \"filename\":\"myServuece\",\r\n\t\"action\":\"email\",\r\n\t\"emailAddress\" :\"me@cbb.de\"\r\n\t\"cronJobTimeStr\":\"3 * * * *\", // Execute action at the 3th minute every hour\r\n\t\"dateAdaptToNow\":\"no\", // \r\n\t\"dataQueryParameters\":\r\n\t{\r\n\t    \"uuid\":\"2b196a3513794cb054574d18c28d46e6\",\r\n\t    \"typeName\":\"Wall-E\",\r\n\t    \"channelChannelNo\":\"1\",\r\n\t    \"dateUTCMin\":\"2019-03-04T11:28:18.000000\",\r\n\t    \"dateUTCMax\":\"2019-03-04T11:29:39.000000\",\r\n\t    \"offset\":\"10\",\r\n\t    \"limit\":\"5\",\r\n\t    \"order\":\"asc\"\r\n    }\r\n}\r\n</pre>",
        "operationId": "CreateService",
        "requestBody": {
          "description": "service object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ReportServiceInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportServiceInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportServiceInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReportServiceInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ReportServiceParametersDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportServiceParametersDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportServiceParametersDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SET_REPORT_SERVICES"
          ]
        ]
      }
    },
    "/v1/Functions/Management": {
      "post": {
        "tags": [
          "Management"
        ],
        "summary": "Creates a function",
        "description": " Example create parameter: (see https://collab.cbb.de/confluence/display/CIT/CreateFunction+backend+endpoint+description for more details)\r\n <pre>\r\n{\r\n \"name\": \"My hygiene flush (fix interval)\",\r\n \"type\": \"hygieneFlush\",\r\n \"disabledTimestamp\": \"2022-04-12T08:00:00.000000\",\r\n \"legacy\": false,\r\n \"remark\": \"my remark\",\r\n \"flushableDevicePointUuids\": [\r\n     \"dec1ceb01d7aaabea7eaaaaaaaaa0001\",\r\n     \"dec1ceb01d7aaac1ad71caaaaaaa0001\",\r\n      \"dec1ceb01d7aaafa11eaaaaaaaaa0001\"\r\n  ],\r\n  \"flushSchedule\": {\r\n     \"fixIntervalFlushPlan\": {\r\n         \"startDateUtc\": \"2018-04-12T08:00:00.000000\",\r\n          \"intervalHours\": 72\r\n       }\r\n   }\r\n}\r\n </pre>",
        "operationId": "CreateFunction",
        "requestBody": {
          "description": "Configuration of the function",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FunctionsInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunctionsInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunctionsInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunctionsInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "CREATE_DEVICE_POINT_GROUP_FUNCTION"
          ]
        ]
      },
      "get": {
        "tags": [
          "Management"
        ],
        "summary": "Gets all functions",
        "operationId": "GetAllFunctions",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunctionDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunctionDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunctionDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "READ_DEVICE_POINT_GROUP_FUNCTIONS"
          ]
        ]
      }
    },
    "/v1/Functions/Management/circulationtemperaturelevels/{dteDevicePointUuid}": {
      "get": {
        "tags": [
          "Management"
        ],
        "summary": "https://collab.cbb.de/confluence/display/TWMS/Software+Lastenheft+%7C+TWMS+1#SoftwareLastenheft|TWMS1-12b.Funktionen-Zirkulation\r\n(FA-TWMS-12b-1 | Ändern der Betriebstemperaturen der Trinkwasseranlage warm (PWH)/Einstellen der Zirkulationsregulierventile auf andere Temperaturen)\r\n1. 60°C/55°C\r\n2. 55°C/50°C\r\n3. 48°C/45°C\r\n4. manual config ϑ PWH/ϑ PWH-C min",
        "operationId": "GetTemperatureLevelsForCirculation",
        "parameters": [
          {
            "name": "dteDevicePointUuid",
            "in": "path",
            "required": true,
            "schema": {
              "maxLength": 32,
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TemperatureLevelObject"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TemperatureLevelObject"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TemperatureLevelObject"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "CREATE_DEVICE_POINT_GROUP_FUNCTION"
          ]
        ]
      }
    },
    "/v1/Functions/Management/{functionName}": {
      "patch": {
        "tags": [
          "Management"
        ],
        "summary": "Updates a function",
        "description": " Example update parameter:\r\n <pre>\r\n{\r\n \"name\": \"My hygiene flush (fix interval) updated\",\r\n \"type\": \"hygieneFlush\",\r\n \"disabledTimestamp\": \"2022-04-12T08:00:00.000000\",\r\n \"legacy\": false,\r\n \"remark\": \"my remark\",\r\n \"flushableDevicePointUuids\": [\r\n     \"dec1ceb01d7aaabea7eaaaaaaaaa0001\",\r\n     \"dec1ceb01d7aaac1ad71caaaaaaa0001\",\r\n      \"dec1ceb01d7aaafa11eaaaaaaaaa0001\"\r\n  ],\r\n  \"flushSchedule\": {\r\n     \"fixIntervalFlushPlan\": {\r\n         \"startDateUtc\": \"2018-04-12T08:00:00.000000\",\r\n          \"intervalHours\": 72\r\n       }\r\n   }\r\n}\r\n </pre>",
        "operationId": "UpdateFunction",
        "parameters": [
          {
            "name": "functionName",
            "in": "path",
            "description": "Name of the function",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the function"
            }
          }
        ],
        "requestBody": {
          "description": "New configuration for the function",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FunctionsInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FunctionsInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/FunctionsInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FunctionsInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "UPDATE_DEVICE_POINT_GROUP_FUNCTION"
          ]
        ]
      },
      "get": {
        "tags": [
          "Management"
        ],
        "summary": "Gets a function",
        "operationId": "GetFunction",
        "parameters": [
          {
            "name": "functionName",
            "in": "path",
            "description": "Name of the function",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the function"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "READ_DEVICE_POINT_GROUP_FUNCTION"
          ]
        ]
      },
      "delete": {
        "tags": [
          "Management"
        ],
        "summary": "Deletes a function",
        "operationId": "DeleteFunction",
        "parameters": [
          {
            "name": "functionName",
            "in": "path",
            "description": "Name of the function",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the function"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "DELETE_DEVICE_POINT_GROUP_FUNCTION"
          ]
        ]
      }
    },
    "/v1/Functions/Management/resetDisabledTimestamp/{functionName}": {
      "patch": {
        "tags": [
          "Management"
        ],
        "summary": "Activates a function",
        "operationId": "ResetDisabledTimestamp",
        "parameters": [
          {
            "name": "functionName",
            "in": "path",
            "description": "Name of the function",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the function"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "RESET_DEVICE_POINT_GROUP_FUNCTION_DISABLED"
          ]
        ]
      }
    },
    "/v1/Functions/Management/setDisabledTimestamp": {
      "patch": {
        "tags": [
          "Management"
        ],
        "summary": "Deactivates a function",
        "description": " Example update parameter:\r\n <pre>\r\n{\r\n     \"functionName\": \"My flush schedule interval\",\r\n     \"disabledTimestamp\": \"2022-04-12T09:00:00.000000\"\r\n}\r\n </pre>",
        "operationId": "SetDisabledTimestamp",
        "requestBody": {
          "description": "Uuid of the function",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SetDisabledTimestampFunctionInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetDisabledTimestampFunctionInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetDisabledTimestampFunctionInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetDisabledTimestampFunctionInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SET_DEVICE_POINT_GROUP_FUNCTION_DISABLED"
          ]
        ]
      }
    },
    "/v1/Functions/Management/componentTest/{functionName}": {
      "patch": {
        "tags": [
          "Management"
        ],
        "summary": "Executes a component test",
        "operationId": "ExecuteComponentTest",
        "parameters": [
          {
            "name": "functionName",
            "in": "path",
            "description": "Name of the function",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the function"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "boolean"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "boolean"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EXECUTE_FUNCTION"
          ]
        ]
      }
    },
    "/v1/Functions/Management/functionTest/{functionName}": {
      "patch": {
        "tags": [
          "Management"
        ],
        "summary": "Executes a function test (e.g. start hygiene flush)",
        "operationId": "ExecuteFunctionTest",
        "parameters": [
          {
            "name": "functionName",
            "in": "path",
            "description": "Name of the function",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the function"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EXECUTE_FUNCTION"
          ]
        ]
      }
    },
    "/v1/Functions/Management/assignFlushableDevicePoint": {
      "patch": {
        "tags": [
          "Management"
        ],
        "summary": "Assign a device to a existing function",
        "description": " Example update parameter:\r\n <pre>\r\n{\r\n\t    \"functionName\" : \"My flush schedule interval\",\r\n     \"devicePointUuid\" : \"dec1ceb01d7aaabea7eaaaaaaaaa0001\",\r\n     \"isHighPriority\" : false\r\n}\r\n </pre>",
        "operationId": "AssignFlushableDevicePointToFunction",
        "requestBody": {
          "description": "Name of the function",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AssignDeviceToFunctionInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignDeviceToFunctionInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignDeviceToFunctionInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AssignDeviceToFunctionInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "UPDATE_DEVICE_POINT_GROUP_FUNCTION"
          ]
        ]
      }
    },
    "/v1/Functions/Management/removeFlushableDevicePoint": {
      "patch": {
        "tags": [
          "Management"
        ],
        "summary": "Assign a device to a existing function",
        "description": " Example update parameter:\r\n <pre>\r\n{\r\n     \"functionName\" : \"My flush schedule interval\",\r\n     \"devicePointUuid\" : \"dec1ceb01d7aaabea7eaaaaaaaaa0001\"\r\n}\r\n </pre>",
        "operationId": "RemoveFlushableDeviceFromFunction",
        "requestBody": {
          "description": "Name of the function",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveDeviceFromFunctionInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveDeviceFromFunctionInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveDeviceFromFunctionInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveDeviceFromFunctionInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "REMOVE_FUNCTION"
          ]
        ]
      }
    },
    "/v1/Functions/Management/functionsForDevice/{uuid}": {
      "get": {
        "tags": [
          "Management"
        ],
        "summary": "Get all device point related functions",
        "operationId": "GetFunctionsForDevicePoint",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "Uuid of the device point",
            "required": true,
            "schema": {
              "maxLength": 32,
              "type": "string",
              "description": "Uuid of the device point"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunctionDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunctionDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunctionDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "READ_DEVICE_POINT_GROUP_FUNCTIONS"
          ]
        ]
      }
    },
    "/v1/Functions/Management/getallcompatibledevicepoints/{functionTypeName}": {
      "get": {
        "tags": [
          "Management"
        ],
        "summary": "Gets all compatible devices point for target function type",
        "operationId": "GetAllCompatibleDevicePointsForTargetFunction",
        "parameters": [
          {
            "name": "functionTypeName",
            "in": "path",
            "description": "Function Type Name like: hygieneFlush, circulation or thermalDisinfection",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/FunctionTypes"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DevicePointOutputDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DevicePointOutputDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DevicePointOutputDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_COMPATIBLE_DEVICES"
          ]
        ]
      }
    },
    "/v1/Functions/Management/GetCompatibleFunctionsForDevice/{uuid}": {
      "get": {
        "tags": [
          "Management"
        ],
        "summary": "Get all compatible functions for a target device",
        "operationId": "GetCompatibleFunctionsForDevice",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "devicePointUUID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "devicePointUUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunctionDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunctionDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FunctionDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_COMPATIBLE_FUNCTIONS"
          ]
        ]
      }
    },
    "/v1/Messages/odata": {
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "Select data via filter options. Returns table with columns DateUtc, DevicePointName, DevicePointUuid, DeviceName, DeviceUuid, DeviceTypeName, RegisterNumber, Value\r\nYou can set the following filter parameters {this predicates are possible for the parameter}:\r\nint ErrorCode {eq}\r\nstring SortDirection {eq} => possible values are 'DESC'(default if not set) and 'ASC' \r\nstring CreatedByUuid {eq}\r\nstring ViewedByUuid {eq}\r\nstring AcknowledgedByUuid {eq}\r\nstring FixedByUuid {eq}\r\nstring CreatedTime {eq,ge,le}\r\nstring ViewedTime {eq,ge,le}\r\nstring AcknowledgedTime {eq,ge,le}\r\nstring FixedTime {eq,ge,le}\r\nEventTypes is a custom parameter (see example below), e.g. 'ALARM' or 'DISRUPTION' or 'ALARM|DISRUPTION'",
        "description": "Example\r\n{{base_url}}/messages/odata?$count=true&amp;EventTypes=ALARM|DISRUPTIONamp;amp;$orderBy=CreatedTime&amp;$skip=0&amp;$top=20&amp;$filter=ErrorCode eq 0 and CreatedByUuid eq &apos;dec1ceb01d7aaabea7eaaaaaaaaa0001&apos; and CreatedTime ge &apos;2018-03-04T11:28:18.000000&apos; and CreatedTime le &apos;2020-03-04T13:29:39.000000&apos; and ViewedByUuid eq &apos;683963e2-f976-4075-53b6-f942f128&apos; and ViewedTime ge &apos;2018-03-04T11:28:18.000000&apos; and ViewedTime le &apos;2020-03-04T13:29:39.000000&apos; and AcknowledgedByUuid eq &apos;683963e2-f976-4075-53b6-f942f128&apos; and AcknowledgedTime ge &apos;2018-03-04T11:28:18.000000&apos; and AcknowledgedTime le &apos;2020-03-04T13:29:39.000000&apos; and FixedByUuid eq &apos;683963e2-f976-4075-53b6-f942f128&apos; and FixedTime ge &apos;2018-03-04T11:28:18.000000&apos; and FixedTime le &apos;2020-03-04T13:29:39.000000&apos; and SortDirection eq &apos;ASC&apos;",
        "operationId": "GetMessagesOData",
        "parameters": [
          {
            "name": "ErrorCodeMin",
            "in": "query",
            "description": "unique error code",
            "schema": {
              "maximum": 999999,
              "minimum": -2000000000,
              "type": "integer",
              "description": "unique error code",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "ErrorCodeMax",
            "in": "query",
            "schema": {
              "maximum": 999999,
              "minimum": -2000000000,
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "MessagesMaxRowId",
            "in": "query",
            "description": "Messages Max Row ID",
            "schema": {
              "type": "integer",
              "description": "Messages Max Row ID",
              "format": "int32"
            }
          },
          {
            "name": "EventTypes",
            "in": "query",
            "description": "e.g. ALARM, EVENT",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "e.g. ALARM, EVENT",
              "nullable": true
            }
          },
          {
            "name": "CreatedTimeMin",
            "in": "query",
            "description": "timestamp message occured",
            "schema": {
              "type": "string",
              "description": "timestamp message occured",
              "nullable": true
            }
          },
          {
            "name": "CreatedTimeMax",
            "in": "query",
            "description": "timestamp message occured",
            "schema": {
              "type": "string",
              "description": "timestamp message occured",
              "nullable": true
            }
          },
          {
            "name": "CreatedByUuid.Value",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "CreatedByUuid.NotEqual",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "DeviceUuid.Value",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "DeviceUuid.NotEqual",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "DeviceTypeName.Value",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "DeviceTypeName.NotEqual",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ViewedTimeMin",
            "in": "query",
            "description": "timestamp when the user accessed the message for the first time",
            "schema": {
              "type": "string",
              "description": "timestamp when the user accessed the message for the first time",
              "nullable": true
            }
          },
          {
            "name": "ViewedTimeMax",
            "in": "query",
            "description": "timestamp when the user accessed the message for the first time",
            "schema": {
              "type": "string",
              "description": "timestamp when the user accessed the message for the first time",
              "nullable": true
            }
          },
          {
            "name": "ViewedByUuid.Value",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "ViewedByUuid.NotEqual",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ViewedIsNull",
            "in": "query",
            "description": "true = return messages with ViewedTimestamp == NULL",
            "schema": {
              "type": "boolean",
              "description": "true = return messages with ViewedTimestamp == NULL"
            }
          },
          {
            "name": "AcknowledgedTimeMin",
            "in": "query",
            "description": "timestamp of user acknowledgement",
            "schema": {
              "type": "string",
              "description": "timestamp of user acknowledgement",
              "nullable": true
            }
          },
          {
            "name": "AcknowledgedTimeMax",
            "in": "query",
            "description": "timestamp of user acknowledgement",
            "schema": {
              "type": "string",
              "description": "timestamp of user acknowledgement",
              "nullable": true
            }
          },
          {
            "name": "AcknowledgedByUuid.Value",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "AcknowledgedByUuid.NotEqual",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "AcknowledgedIsNull",
            "in": "query",
            "description": "true = return messages with AcknowledgedTimestamp == NULL",
            "schema": {
              "type": "boolean",
              "description": "true = return messages with AcknowledgedTimestamp == NULL"
            }
          },
          {
            "name": "FixedTimeMin",
            "in": "query",
            "description": "timestamp of user resolve fix",
            "schema": {
              "type": "string",
              "description": "timestamp of user resolve fix",
              "nullable": true
            }
          },
          {
            "name": "FixedTimeMax",
            "in": "query",
            "description": "timestamp of user resolve fix",
            "schema": {
              "type": "string",
              "description": "timestamp of user resolve fix",
              "nullable": true
            }
          },
          {
            "name": "FixedByUuid.Value",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "FixedByUuid.NotEqual",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "FixedIsNull",
            "in": "query",
            "description": "true = return messages with FixedTimestamp == NULL",
            "schema": {
              "type": "boolean",
              "description": "true = return messages with FixedTimestamp == NULL"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the number of returned data log entries (obtained by the query)",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "description": "Limits the number of returned data log entries (obtained by the query)",
              "format": "int32"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "Offset for the query result (useful for pagination)",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "description": "Offset for the query result (useful for pagination)",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "skiptoken",
            "in": "query",
            "description": "Predicate for the seek pagination (row id)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "description": "Predicate for the seek pagination (row id)",
              "format": "int64",
              "nullable": true
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Order the returned data log entries (by now there is only the \"Date\" column supported)",
            "schema": {
              "type": "string",
              "description": "Order the returned data log entries (by now there is only the \"Date\" column supported)",
              "nullable": true
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order of the returned data log entries (dependent to OrderBy)\r\n\"asc\" or \"desc\" allowed, default OrderBy column is \"date\"",
            "schema": {
              "type": "string",
              "description": "Order of the returned data log entries (dependent to OrderBy)\r\n\"asc\" or \"desc\" allowed, default OrderBy column is \"date\"",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ODataOutput"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ODataOutput"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ODataOutput"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SHOW_MESSAGES"
          ]
        ]
      }
    },
    "/v1/Messages/odatacsv": {
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "Select data via filter options. Returns a csv file with columns DateUtc, DevicePointName, DevicePointUuid, DeviceName, DeviceUuid, DeviceTypeName, DataPointId, Value\r\nYou can set the following filter parameters {this predicates are possible for the parameter}:\r\nint ErrorCode {eq}\r\nstring SortDirection {eq} => possible values are 'DESC'(default if not set) and 'ASC' \r\nstring EventType {eq} => e.g. 'ALARM' or 'DISRUPTION'\r\nstring CreatedByUuid {eq}\r\nstring ViewedByUuid {eq}\r\nstring AcknowledgedByUuid {eq}\r\nstring FixedByUuid {eq}\r\nstring CreatedTime {eq,ge,le}\r\nstring ViewedTime {eq,ge,le}\r\nstring AcknowledgedTime {eq,ge,le}\r\nstring FixedTime {eq,ge,le}",
        "description": "Example\r\n{{base_url}}/messages/odata?$count=true&$orderBy=CreatedTime&$skip=0&$top=20&$filter=ErrorCode eq 0 and EventType eq 'ALARM' and CreatedByUuid eq 'dec1ceb01d7aaabea7eaaaaaaaaa0001' and CreatedTime ge '2018-03-04T11:28:18.000000' and CreatedTime le '2020-03-04T13:29:39.000000' and ViewedByUuid eq '683963e2-f976-4075-53b6-f942f128' and ViewedTime ge '2018-03-04T11:28:18.000000' and ViewedTime le '2020-03-04T13:29:39.000000' and AcknowledgedByUuid eq '683963e2-f976-4075-53b6-f942f128' and AcknowledgedTime ge '2018-03-04T11:28:18.000000' and AcknowledgedTime le '2020-03-04T13:29:39.000000' and FixedByUuid eq '683963e2-f976-4075-53b6-f942f128' and FixedTime ge '2018-03-04T11:28:18.000000' and FixedTime le '2020-03-04T13:29:39.000000' and SortDirection eq 'ASC'",
        "operationId": "GetMessagesODataCsv",
        "parameters": [
          {
            "name": "ErrorCodeMin",
            "in": "query",
            "description": "unique error code",
            "schema": {
              "maximum": 999999,
              "minimum": -2000000000,
              "type": "integer",
              "description": "unique error code",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "ErrorCodeMax",
            "in": "query",
            "schema": {
              "maximum": 999999,
              "minimum": -2000000000,
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "MessagesMaxRowId",
            "in": "query",
            "description": "Messages Max Row ID",
            "schema": {
              "type": "integer",
              "description": "Messages Max Row ID",
              "format": "int32"
            }
          },
          {
            "name": "EventTypes",
            "in": "query",
            "description": "e.g. ALARM, EVENT",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "e.g. ALARM, EVENT",
              "nullable": true
            }
          },
          {
            "name": "CreatedTimeMin",
            "in": "query",
            "description": "timestamp message occured",
            "schema": {
              "type": "string",
              "description": "timestamp message occured",
              "nullable": true
            }
          },
          {
            "name": "CreatedTimeMax",
            "in": "query",
            "description": "timestamp message occured",
            "schema": {
              "type": "string",
              "description": "timestamp message occured",
              "nullable": true
            }
          },
          {
            "name": "CreatedByUuid.Value",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "CreatedByUuid.NotEqual",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "DeviceUuid.Value",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "DeviceUuid.NotEqual",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "DeviceTypeName.Value",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "DeviceTypeName.NotEqual",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ViewedTimeMin",
            "in": "query",
            "description": "timestamp when the user accessed the message for the first time",
            "schema": {
              "type": "string",
              "description": "timestamp when the user accessed the message for the first time",
              "nullable": true
            }
          },
          {
            "name": "ViewedTimeMax",
            "in": "query",
            "description": "timestamp when the user accessed the message for the first time",
            "schema": {
              "type": "string",
              "description": "timestamp when the user accessed the message for the first time",
              "nullable": true
            }
          },
          {
            "name": "ViewedByUuid.Value",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "ViewedByUuid.NotEqual",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ViewedIsNull",
            "in": "query",
            "description": "true = return messages with ViewedTimestamp == NULL",
            "schema": {
              "type": "boolean",
              "description": "true = return messages with ViewedTimestamp == NULL"
            }
          },
          {
            "name": "AcknowledgedTimeMin",
            "in": "query",
            "description": "timestamp of user acknowledgement",
            "schema": {
              "type": "string",
              "description": "timestamp of user acknowledgement",
              "nullable": true
            }
          },
          {
            "name": "AcknowledgedTimeMax",
            "in": "query",
            "description": "timestamp of user acknowledgement",
            "schema": {
              "type": "string",
              "description": "timestamp of user acknowledgement",
              "nullable": true
            }
          },
          {
            "name": "AcknowledgedByUuid.Value",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "AcknowledgedByUuid.NotEqual",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "AcknowledgedIsNull",
            "in": "query",
            "description": "true = return messages with AcknowledgedTimestamp == NULL",
            "schema": {
              "type": "boolean",
              "description": "true = return messages with AcknowledgedTimestamp == NULL"
            }
          },
          {
            "name": "FixedTimeMin",
            "in": "query",
            "description": "timestamp of user resolve fix",
            "schema": {
              "type": "string",
              "description": "timestamp of user resolve fix",
              "nullable": true
            }
          },
          {
            "name": "FixedTimeMax",
            "in": "query",
            "description": "timestamp of user resolve fix",
            "schema": {
              "type": "string",
              "description": "timestamp of user resolve fix",
              "nullable": true
            }
          },
          {
            "name": "FixedByUuid.Value",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "FixedByUuid.NotEqual",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "FixedIsNull",
            "in": "query",
            "description": "true = return messages with FixedTimestamp == NULL",
            "schema": {
              "type": "boolean",
              "description": "true = return messages with FixedTimestamp == NULL"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the number of returned data log entries (obtained by the query)",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "description": "Limits the number of returned data log entries (obtained by the query)",
              "format": "int32"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "Offset for the query result (useful for pagination)",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "description": "Offset for the query result (useful for pagination)",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "skiptoken",
            "in": "query",
            "description": "Predicate for the seek pagination (row id)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "description": "Predicate for the seek pagination (row id)",
              "format": "int64",
              "nullable": true
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Order the returned data log entries (by now there is only the \"Date\" column supported)",
            "schema": {
              "type": "string",
              "description": "Order the returned data log entries (by now there is only the \"Date\" column supported)",
              "nullable": true
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order of the returned data log entries (dependent to OrderBy)\r\n\"asc\" or \"desc\" allowed, default OrderBy column is \"date\"",
            "schema": {
              "type": "string",
              "description": "Order of the returned data log entries (dependent to OrderBy)\r\n\"asc\" or \"desc\" allowed, default OrderBy column is \"date\"",
              "nullable": true
            }
          },
          {
            "name": "exportFileName",
            "in": "path",
            "description": "File name of the returned file",
            "required": true,
            "schema": {
              "type": "string",
              "description": "File name of the returned file",
              "nullable": true
            }
          },
          {
            "name": "sid",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FileStreamObject"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileStreamObject"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileStreamObject"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SHOW_MESSAGES"
          ]
        ]
      }
    },
    "/v1/Messages/odatacsv/{exportFileName}": {
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "Select data via filter options. Returns a csv file with columns DateUtc, DevicePointName, DevicePointUuid, DeviceName, DeviceUuid, DeviceTypeName, DataPointId, Value\r\nYou can set the following filter parameters {this predicates are possible for the parameter}:\r\nint ErrorCode {eq}\r\nstring SortDirection {eq} => possible values are 'DESC'(default if not set) and 'ASC' \r\nstring EventType {eq} => e.g. 'ALARM' or 'DISRUPTION'\r\nstring CreatedByUuid {eq}\r\nstring ViewedByUuid {eq}\r\nstring AcknowledgedByUuid {eq}\r\nstring FixedByUuid {eq}\r\nstring CreatedTime {eq,ge,le}\r\nstring ViewedTime {eq,ge,le}\r\nstring AcknowledgedTime {eq,ge,le}\r\nstring FixedTime {eq,ge,le}",
        "description": "Example\r\n{{base_url}}/messages/odata?$count=true&$orderBy=CreatedTime&$skip=0&$top=20&$filter=ErrorCode eq 0 and EventType eq 'ALARM' and CreatedByUuid eq 'dec1ceb01d7aaabea7eaaaaaaaaa0001' and CreatedTime ge '2018-03-04T11:28:18.000000' and CreatedTime le '2020-03-04T13:29:39.000000' and ViewedByUuid eq '683963e2-f976-4075-53b6-f942f128' and ViewedTime ge '2018-03-04T11:28:18.000000' and ViewedTime le '2020-03-04T13:29:39.000000' and AcknowledgedByUuid eq '683963e2-f976-4075-53b6-f942f128' and AcknowledgedTime ge '2018-03-04T11:28:18.000000' and AcknowledgedTime le '2020-03-04T13:29:39.000000' and FixedByUuid eq '683963e2-f976-4075-53b6-f942f128' and FixedTime ge '2018-03-04T11:28:18.000000' and FixedTime le '2020-03-04T13:29:39.000000' and SortDirection eq 'ASC'",
        "operationId": "GetMessagesODataCsv",
        "parameters": [
          {
            "name": "ErrorCodeMin",
            "in": "query",
            "description": "unique error code",
            "schema": {
              "maximum": 999999,
              "minimum": -2000000000,
              "type": "integer",
              "description": "unique error code",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "ErrorCodeMax",
            "in": "query",
            "schema": {
              "maximum": 999999,
              "minimum": -2000000000,
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "MessagesMaxRowId",
            "in": "query",
            "description": "Messages Max Row ID",
            "schema": {
              "type": "integer",
              "description": "Messages Max Row ID",
              "format": "int32"
            }
          },
          {
            "name": "EventTypes",
            "in": "query",
            "description": "e.g. ALARM, EVENT",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "e.g. ALARM, EVENT",
              "nullable": true
            }
          },
          {
            "name": "CreatedTimeMin",
            "in": "query",
            "description": "timestamp message occured",
            "schema": {
              "type": "string",
              "description": "timestamp message occured",
              "nullable": true
            }
          },
          {
            "name": "CreatedTimeMax",
            "in": "query",
            "description": "timestamp message occured",
            "schema": {
              "type": "string",
              "description": "timestamp message occured",
              "nullable": true
            }
          },
          {
            "name": "CreatedByUuid.Value",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "CreatedByUuid.NotEqual",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "DeviceUuid.Value",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "DeviceUuid.NotEqual",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "DeviceTypeName.Value",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "DeviceTypeName.NotEqual",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ViewedTimeMin",
            "in": "query",
            "description": "timestamp when the user accessed the message for the first time",
            "schema": {
              "type": "string",
              "description": "timestamp when the user accessed the message for the first time",
              "nullable": true
            }
          },
          {
            "name": "ViewedTimeMax",
            "in": "query",
            "description": "timestamp when the user accessed the message for the first time",
            "schema": {
              "type": "string",
              "description": "timestamp when the user accessed the message for the first time",
              "nullable": true
            }
          },
          {
            "name": "ViewedByUuid.Value",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "ViewedByUuid.NotEqual",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "ViewedIsNull",
            "in": "query",
            "description": "true = return messages with ViewedTimestamp == NULL",
            "schema": {
              "type": "boolean",
              "description": "true = return messages with ViewedTimestamp == NULL"
            }
          },
          {
            "name": "AcknowledgedTimeMin",
            "in": "query",
            "description": "timestamp of user acknowledgement",
            "schema": {
              "type": "string",
              "description": "timestamp of user acknowledgement",
              "nullable": true
            }
          },
          {
            "name": "AcknowledgedTimeMax",
            "in": "query",
            "description": "timestamp of user acknowledgement",
            "schema": {
              "type": "string",
              "description": "timestamp of user acknowledgement",
              "nullable": true
            }
          },
          {
            "name": "AcknowledgedByUuid.Value",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "AcknowledgedByUuid.NotEqual",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "AcknowledgedIsNull",
            "in": "query",
            "description": "true = return messages with AcknowledgedTimestamp == NULL",
            "schema": {
              "type": "boolean",
              "description": "true = return messages with AcknowledgedTimestamp == NULL"
            }
          },
          {
            "name": "FixedTimeMin",
            "in": "query",
            "description": "timestamp of user resolve fix",
            "schema": {
              "type": "string",
              "description": "timestamp of user resolve fix",
              "nullable": true
            }
          },
          {
            "name": "FixedTimeMax",
            "in": "query",
            "description": "timestamp of user resolve fix",
            "schema": {
              "type": "string",
              "description": "timestamp of user resolve fix",
              "nullable": true
            }
          },
          {
            "name": "FixedByUuid.Value",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "FixedByUuid.NotEqual",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "FixedIsNull",
            "in": "query",
            "description": "true = return messages with FixedTimestamp == NULL",
            "schema": {
              "type": "boolean",
              "description": "true = return messages with FixedTimestamp == NULL"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limits the number of returned data log entries (obtained by the query)",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "description": "Limits the number of returned data log entries (obtained by the query)",
              "format": "int32"
            }
          },
          {
            "name": "Offset",
            "in": "query",
            "description": "Offset for the query result (useful for pagination)",
            "schema": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "description": "Offset for the query result (useful for pagination)",
              "format": "int32",
              "nullable": true
            }
          },
          {
            "name": "skiptoken",
            "in": "query",
            "description": "Predicate for the seek pagination (row id)",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "description": "Predicate for the seek pagination (row id)",
              "format": "int64",
              "nullable": true
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Order the returned data log entries (by now there is only the \"Date\" column supported)",
            "schema": {
              "type": "string",
              "description": "Order the returned data log entries (by now there is only the \"Date\" column supported)",
              "nullable": true
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Order of the returned data log entries (dependent to OrderBy)\r\n\"asc\" or \"desc\" allowed, default OrderBy column is \"date\"",
            "schema": {
              "type": "string",
              "description": "Order of the returned data log entries (dependent to OrderBy)\r\n\"asc\" or \"desc\" allowed, default OrderBy column is \"date\"",
              "nullable": true
            }
          },
          {
            "name": "exportFileName",
            "in": "path",
            "description": "File name of the returned file",
            "required": true,
            "schema": {
              "type": "string",
              "description": "File name of the returned file",
              "nullable": true
            }
          },
          {
            "name": "sid",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FileStreamObject"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileStreamObject"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileStreamObject"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SHOW_MESSAGES"
          ]
        ]
      }
    },
    "/v1/Messages/messagesmaxrow": {
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "Get messages filtered by the given parameters",
        "operationId": "GetDataMaxRowId",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "text/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SHOW_MESSAGES"
          ]
        ]
      }
    },
    "/v1/Messages/datalogmaxrow": {
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "Get DataLog max row id",
        "operationId": "GetDatalogMaxRowId",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "text/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SHOW_MESSAGES"
          ]
        ]
      }
    },
    "/v1/Messages/list": {
      "post": {
        "tags": [
          "Messages"
        ],
        "summary": "Get Message list",
        "operationId": "GetAllMessages",
        "requestBody": {
          "description": "message type e.g. \"ALRAM\" or \"DISRUPTION\"",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EventTypes"
                },
                "description": "message type e.g. \"ALRAM\" or \"DISRUPTION\"",
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EventTypes"
                },
                "description": "message type e.g. \"ALRAM\" or \"DISRUPTION\"",
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EventTypes"
                },
                "description": "message type e.g. \"ALRAM\" or \"DISRUPTION\"",
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EventTypes"
                },
                "description": "message type e.g. \"ALRAM\" or \"DISRUPTION\"",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageOutputDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageOutputDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageOutputDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SHOW_MESSAGES"
          ]
        ]
      }
    },
    "/v1/Messages/new": {
      "post": {
        "tags": [
          "Messages"
        ],
        "summary": "Get new messages for visual illustration",
        "operationId": "GetNewMessages",
        "requestBody": {
          "description": "message type e.g. \"ALRAM\" or \"DISRUPTION\"",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EventTypes"
                },
                "description": "message type e.g. \"ALRAM\" or \"DISRUPTION\"",
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EventTypes"
                },
                "description": "message type e.g. \"ALRAM\" or \"DISRUPTION\"",
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EventTypes"
                },
                "description": "message type e.g. \"ALRAM\" or \"DISRUPTION\"",
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EventTypes"
                },
                "description": "message type e.g. \"ALRAM\" or \"DISRUPTION\"",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageOutputDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageOutputDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageOutputDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SHOW_MESSAGES"
          ]
        ]
      }
    },
    "/v1/Messages/history": {
      "post": {
        "tags": [
          "Messages"
        ],
        "summary": "Get historical Message list",
        "operationId": "GetHistoricalMessages",
        "requestBody": {
          "description": "message type e.g. \"ALRAM\" or \"DISRUPTION\"",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EventTypes"
                },
                "description": "message type e.g. \"ALRAM\" or \"DISRUPTION\"",
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EventTypes"
                },
                "description": "message type e.g. \"ALRAM\" or \"DISRUPTION\"",
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EventTypes"
                },
                "description": "message type e.g. \"ALRAM\" or \"DISRUPTION\"",
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EventTypes"
                },
                "description": "message type e.g. \"ALRAM\" or \"DISRUPTION\"",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageOutputDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageOutputDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageOutputDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SHOW_MESSAGES"
          ]
        ]
      }
    },
    "/v1/Messages/{rowId}": {
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "Get detail information for messages",
        "operationId": "GetMessage",
        "parameters": [
          {
            "name": "rowId",
            "in": "path",
            "description": "message id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "message id",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOutputDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOutputDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOutputDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "VIEW_MESSAGE"
          ]
        ]
      }
    },
    "/v1/Messages": {
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "Get detail information for messages",
        "operationId": "GetMessages",
        "requestBody": {
          "description": "message id's",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MessageIdsInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageIdsInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageIdsInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MessageIdsInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageOutputDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageOutputDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageOutputDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "VIEW_MESSAGE"
          ]
        ]
      }
    },
    "/v1/Messages/test": {
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "For testing the indexList, e.g. \"1,2,3\"",
        "operationId": "GetMessages",
        "requestBody": {
          "description": "message id's",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string",
                "description": "message id's"
              }
            },
            "application/json": {
              "schema": {
                "type": "string",
                "description": "message id's"
              }
            },
            "text/json": {
              "schema": {
                "type": "string",
                "description": "message id's"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string",
                "description": "message id's"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOutputDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOutputDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOutputDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "VIEW_MESSAGE"
          ]
        ]
      }
    },
    "/v1/Messages/view/{rowId}": {
      "patch": {
        "tags": [
          "Messages"
        ],
        "summary": "Given alarm/disruption message was viewed by the user",
        "operationId": "SetMessageViewed",
        "parameters": [
          {
            "name": "rowId",
            "in": "path",
            "description": "message id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "message id",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "VIEW_MESSAGE"
          ]
        ]
      }
    },
    "/v1/Messages/view/reset/{rowId}": {
      "patch": {
        "tags": [
          "Messages"
        ],
        "summary": "Reset viewed status",
        "operationId": "ResetMessageViewed",
        "parameters": [
          {
            "name": "rowId",
            "in": "path",
            "description": "message id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "message id",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "UNVIEW_MESSAGE"
          ]
        ]
      }
    },
    "/v1/Messages/ack/{rowId}": {
      "patch": {
        "tags": [
          "Messages"
        ],
        "summary": "Acknowledge of given alarm/disruption message",
        "operationId": "SetMessageAcknowledged",
        "parameters": [
          {
            "name": "rowId",
            "in": "path",
            "description": "message id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "message id",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "ACKNOWLEDGE_MESSAGE"
          ]
        ]
      }
    },
    "/v1/Messages/ack/reset/{rowId}": {
      "patch": {
        "tags": [
          "Messages"
        ],
        "summary": "Reset acknowledge of given messages",
        "operationId": "ResetMessageAcknowledged",
        "parameters": [
          {
            "name": "rowId",
            "in": "path",
            "description": "message id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "message id",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "UNACKNOWLEDGE_MESSAGE"
          ]
        ]
      }
    },
    "/v1/Messages/fix/{rowId}": {
      "patch": {
        "tags": [
          "Messages"
        ],
        "summary": "Fixed of given alarm/disruption message",
        "operationId": "SetMessageFixed",
        "parameters": [
          {
            "name": "rowId",
            "in": "path",
            "description": "message id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "message id",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "FIX_MESSAGE"
          ]
        ]
      }
    },
    "/v1/Messages/fix/reset/{rowId}": {
      "patch": {
        "tags": [
          "Messages"
        ],
        "summary": "Reset fixed status of messages",
        "operationId": "ResetMessageFixed",
        "parameters": [
          {
            "name": "rowId",
            "in": "path",
            "description": "message id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "message id",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "UNFIX_MESSAGE"
          ]
        ]
      }
    },
    "/v1/Messages/edit/{rowId}": {
      "patch": {
        "tags": [
          "Messages"
        ],
        "summary": "Edits message Information not implemented",
        "description": "Example\r\n<pre>\r\n{\r\n\t\"description\":\"new description\",\r\n\t\"summary\": \"new summary\",\r\n}\r\n</pre>",
        "operationId": "EditMessage",
        "parameters": [
          {
            "name": "rowId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "edit message input object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MessageEditInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageEditInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageEditInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MessageEditInput"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EDIT_MESSAGE_OWN"
          ]
        ]
      }
    },
    "/v1/Messages/overview": {
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "Get message overview",
        "operationId": "GetMessagesOverview",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": []
      }
    },
    "/v1/Messages/delete/mark/reset/{rowId}": {
      "patch": {
        "tags": [
          "Messages"
        ],
        "summary": "Allow own/any message to be deleted",
        "operationId": "SetMessageDeletedMark",
        "parameters": [
          {
            "name": "rowId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SET_OWN_MESSAGE_DELETE_MARK"
          ]
        ]
      }
    },
    "/v1/Messages/delete/mark/{rowId}": {
      "patch": {
        "tags": [
          "Messages"
        ],
        "summary": "Disallow any message to be deleted",
        "operationId": "ResetMessageDeletedMark",
        "parameters": [
          {
            "name": "rowId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "RESET_OWN_MESSAGE_DELETE_MARK"
          ]
        ]
      }
    },
    "/v1/Messages/delete/fromdisk/{rowId}": {
      "delete": {
        "tags": [
          "Messages"
        ],
        "summary": "Deletes all messages of the specified index. A message should only be completely erasable from the system if it has previously been marked as deleted. For this purpose, the attribute 'DeletedTimestamp' of the entity 'msg_messageLog' must have an arbitrary date. This should only represent a ToDo flag according to the specifications. The actual size of the database on the disk did not change after the execution!",
        "operationId": "DeleteMessagesIds",
        "parameters": [
          {
            "name": "rowId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "DELETE_MESSAGE"
          ]
        ]
      }
    },
    "/v1/Messages/errorlist/{uuid}": {
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "Get error messages as list",
        "operationId": "GetErrorMessages",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "uuid of device to get error list from",
            "required": true,
            "schema": {
              "type": "string",
              "description": "uuid of device to get error list from"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageOutputDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageOutputDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MessageOutputDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SHOW_MESSAGES"
          ]
        ]
      }
    },
    "/v1/Parameter/definition": {
      "get": {
        "tags": [
          "Parameter"
        ],
        "summary": "Get paramatere datapoint definition",
        "operationId": "GetParameterDefinitionList",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParameterDefinitionDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParameterDefinitionDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParameterDefinitionDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": []
      }
    },
    "/v1/Parameter/valuesDb/{devicePointUUID}": {
      "get": {
        "tags": [
          "Parameter"
        ],
        "summary": "Get all parameter for device",
        "operationId": "GetParameterValueDb",
        "parameters": [
          {
            "name": "devicePointUUID",
            "in": "path",
            "description": "device point uuid",
            "required": true,
            "schema": {
              "type": "string",
              "description": "device point uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeviceParameter"
                },
                "description": "",
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeviceParameter"
                },
                "description": "",
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeviceParameter"
                },
                "description": "",
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeviceParameter"
                },
                "description": "",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceParameter"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceParameter"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceParameter"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_PARAMETER_VALUE"
          ]
        ]
      }
    },
    "/v1/Parameter/values/{devicePointUUID}": {
      "get": {
        "tags": [
          "Parameter"
        ],
        "summary": "Get all parameter for device",
        "operationId": "GetParameterValue",
        "parameters": [
          {
            "name": "devicePointUUID",
            "in": "path",
            "description": "device point uuid",
            "required": true,
            "schema": {
              "type": "string",
              "description": "device point uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceParameter"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceParameter"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceParameter"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_PARAMETER_VALUE"
          ]
        ]
      },
      "post": {
        "tags": [
          "Parameter"
        ],
        "summary": "Set all parameter Config Value",
        "operationId": "SetParameterValue",
        "parameters": [
          {
            "name": "devicePointUUID",
            "in": "path",
            "description": "device point uuid",
            "required": true,
            "schema": {
              "type": "string",
              "description": "device point uuid"
            }
          }
        ],
        "requestBody": {
          "description": "parameters you want to set",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeviceParameter"
                },
                "description": "parameters you want to set",
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeviceParameter"
                },
                "description": "parameters you want to set",
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeviceParameter"
                },
                "description": "parameters you want to set",
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeviceParameter"
                },
                "description": "parameters you want to set",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceParameterFailed"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceParameterFailed"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceParameterFailed"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SET_PARAMETER_VALUE"
          ]
        ]
      }
    },
    "/v1/Parameter/value/{devicePointUUID}": {
      "get": {
        "tags": [
          "Parameter"
        ],
        "summary": "Get specific parameter for device",
        "operationId": "GetSpecificParameterValue",
        "parameters": [
          {
            "name": "devicePointUUID",
            "in": "path",
            "description": "device point uuid",
            "required": true,
            "schema": {
              "type": "string",
              "description": "device point uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeviceParameter"
                },
                "description": "",
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeviceParameter"
                },
                "description": "",
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeviceParameter"
                },
                "description": "",
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeviceParameter"
                },
                "description": "",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceParameter"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceParameter"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceParameter"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_PARAMETER_VALUE"
          ]
        ]
      }
    },
    "/v1/Parameter/factoryreset/{devicePointUUID}": {
      "post": {
        "tags": [
          "Parameter"
        ],
        "summary": "Factory Reset Device",
        "operationId": "FactoryResetParameters",
        "parameters": [
          {
            "name": "devicePointUUID",
            "in": "path",
            "description": "device point uuid",
            "required": true,
            "schema": {
              "type": "string",
              "description": "device point uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "FACTORY_RESET_DEVICE"
          ]
        ]
      }
    },
    "/v1/Parameter/GetDefaultValuesForDeviceType/{devicePointUUID}": {
      "get": {
        "tags": [
          "Parameter"
        ],
        "summary": "Get the default values for a specific device",
        "operationId": "GetDefaultValuesForDevice",
        "parameters": [
          {
            "name": "devicePointUUID",
            "in": "path",
            "description": "device point uuid",
            "required": true,
            "schema": {
              "type": "string",
              "description": "device point uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceParameterValuesOutputDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceParameterValuesOutputDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceParameterValuesOutputDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_PARAMETER_VALUE"
          ]
        ]
      }
    },
    "/v1/Devices/PointAddress": {
      "post": {
        "tags": [
          "PointAddress"
        ],
        "summary": "Creates new point address",
        "description": "Example start parameter:\r\n<pre>\r\n{\r\n    \"building\":\"Building 1\",\r\n    \"area\":\"Area A\",\r\n    \"room\":\"Room B\",\r\n    \"segment\":\"Segment B\"\r\n}\r\n</pre>",
        "operationId": "CreatePointAddress",
        "requestBody": {
          "description": "point address create input object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PointAddressCreateInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PointAddressCreateInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PointAddressCreateInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PointAddressCreateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "CREATE_POINT_ADDRESS"
          ]
        ]
      },
      "put": {
        "tags": [
          "PointAddress"
        ],
        "summary": "Edits a Point address",
        "description": "<pre>\r\n            {\r\n                \"building\": \"Bulding 4\",\r\n                \"area\": \"Area 4\",\r\n                \"room\": \"Room 4\",\r\n                \"segment\": \"Segment 4\"\r\n                \"newBuilding\": \"newBuilding\",\r\n                \"newArea\": \"newArea\",\r\n                \"newRoom\": \"newRoom\",\r\n                \"newSegment\": \"newSegment\"\r\n            }\r\n            </pre>",
        "operationId": "SetPointAddress",
        "requestBody": {
          "description": "PointAddressEditInput with old and new point address",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PointAddressEditInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PointAddressEditInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PointAddressEditInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PointAddressEditInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SET_POINT_ADDRESS"
          ]
        ]
      }
    },
    "/v1/Devices/PointAddress/delete": {
      "post": {
        "tags": [
          "PointAddress"
        ],
        "summary": "Deletes a point address",
        "description": "Example start parameter:\r\n<pre>\r\n{\r\n    \"building\":\"Building 1\",\r\n    \"area\":\"Area A\",\r\n    \"room\":\"Room B\",\r\n    \"segment\":\"Segment B\"\r\n}\r\n</pre>",
        "operationId": "DeletePointAddress",
        "requestBody": {
          "description": "point address create input object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PointAddressCreateInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PointAddressCreateInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PointAddressCreateInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PointAddressCreateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "DELETE_POINT_ADDRESS"
          ]
        ]
      }
    },
    "/v1/Devices/PointAddress/exists": {
      "post": {
        "tags": [
          "PointAddress"
        ],
        "summary": "Exists a Point address",
        "description": "<pre></pre>",
        "operationId": "IsPointAddressExists",
        "requestBody": {
          "description": "PointAddressEditInput with old and new point address",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PointAddressCreateInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PointAddressCreateInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PointAddressCreateInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PointAddressCreateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "IS_POINT_ADDRESS_EXISTS"
          ]
        ]
      }
    },
    "/v1/Projects/basedata": {
      "get": {
        "tags": [
          "Projects"
        ],
        "operationId": "GetProjectBaseData",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectBaseData"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectBaseData"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectBaseData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SHOW_PROJECT_INFORMATION"
          ]
        ]
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "operationId": "CreateUpdateProjectBaseData",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectBaseDataInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectBaseDataInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectBaseDataInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectBaseDataInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectBaseData"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectBaseData"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectBaseData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "CREATE_PROJECT"
          ]
        ]
      }
    },
    "/v1/Projects/structure": {
      "get": {
        "tags": [
          "Projects"
        ],
        "operationId": "GetProjectStructureData",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectStructure"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectStructure"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectStructure"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SHOW_PROJECT_INFORMATION"
          ]
        ]
      }
    },
    "/v1/Projects/export": {
      "get": {
        "tags": [
          "Projects"
        ],
        "operationId": "ExportProjectFile",
        "parameters": [
          {
            "name": "exportFileName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "sid",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EXPORT_PROJECT"
          ]
        ]
      }
    },
    "/v1/Projects/export/{exportFileName}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "operationId": "ExportProjectFile",
        "parameters": [
          {
            "name": "exportFileName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "sid",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EXPORT_PROJECT"
          ]
        ]
      }
    },
    "/v1/Projects/import": {
      "post": {
        "tags": [
          "Projects"
        ],
        "operationId": "ImportProjectFile",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "pattern": "^[ a-zA-Z0-9_-]+\\.(?i)([a-z]{1,5})$",
                    "type": "string",
                    "format": "binary",
                    "nullable": true
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "IMPORT_PROJECT"
          ]
        ]
      }
    },
    "/v1/Projects/reset": {
      "post": {
        "tags": [
          "Projects"
        ],
        "operationId": "ResetProjectStructure",
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "CREATE_PROJECT"
          ]
        ]
      }
    },
    "/v1/Sessions": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "summary": "Start a new session (login)",
        "description": "Start a new session (login)\r\nExample:\r\n<pre>\r\n{\r\n    \"username\": \"admin\",\r\n    \"password\": \"Admin123@cbb\"\r\n}\r\n</pre>",
        "operationId": "Login",
        "requestBody": {
          "description": "login information",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SessionLoginInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionLoginInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionLoginInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SessionLoginInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SessionProfile"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionProfile"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionProfile"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserLockedresponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLockedresponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLockedresponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          }
        },
        "authorityCodes": []
      },
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get list of current active sessions",
        "operationId": "GetSessions",
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SHOW_ALL_ACTIVE_SESSIONS"
          ]
        ]
      }
    },
    "/v1/Sessions/{sessionId}": {
      "delete": {
        "tags": [
          "Sessions"
        ],
        "summary": "End session (logout)",
        "operationId": "Logout",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "description": "session id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "session id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "LOGOUT_OWN_USER"
          ],
          [
            "LOGOUT_ANY_USER"
          ]
        ]
      }
    },
    "/v1/Sessions/{sessionId}/{isExtendLiveTime}": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "summary": "Get session information",
        "operationId": "GetSession",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isExtendLiveTime",
            "in": "path",
            "required": true,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "GET_SESSION"
          ]
        ]
      }
    },
    "/v1/System/restApiVersion": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get rest api version",
        "operationId": "GetRestApiVersion",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": []
      }
    },
    "/v1/System/general/{uuid}": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get info about system (e.g. network information, controller status)",
        "operationId": "GetSystemInfo",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "Uuid of the controller point",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Uuid of the controller point"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SystemInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SHOW_SYSTEM_STATUS"
          ]
        ]
      }
    },
    "/v1/System/drives/{uuid}": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get info about all drives (internal flash, external usb-drive)",
        "operationId": "GetDrivesInfo",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "Uuid of the controller point",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Uuid of the controller point"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DriveInfoObject"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DriveInfoObject"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DriveInfoObject"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SHOW_SYSTEM_STATUS"
          ]
        ]
      }
    },
    "/v1/System/file/{uuid}": {
      "post": {
        "tags": [
          "System"
        ],
        "summary": "Set the configuration of the system",
        "operationId": "SetSystemConfig",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "Uuid of the controller point",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Uuid of the controller point"
            }
          }
        ],
        "requestBody": {
          "description": "Configuration parameters",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SystemConfigInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemConfigInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemConfigInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SystemConfigInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "CONFIGURE_TWMS_SYSTEM"
          ]
        ]
      },
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get the saved configuration of the system from the database\r\nTo get the actual network parameters from the system use GetSystemInfo",
        "operationId": "GetSystemConfig",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "description": "Uuid of the controller point",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Uuid of the controller point"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SystemConfigDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemConfigDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemConfigDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SHOW_SYSTEM_CONFIG"
          ]
        ]
      }
    },
    "/v1/System/uploadPrivateKey": {
      "post": {
        "tags": [
          "System"
        ],
        "summary": "Uploads the private key",
        "operationId": "UploadPrivateKeyForSftp",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "ContentType": {
                    "type": "string",
                    "nullable": true
                  },
                  "ContentDisposition": {
                    "type": "string",
                    "nullable": true
                  },
                  "Headers": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "nullable": true
                  },
                  "Length": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "Name": {
                    "type": "string",
                    "nullable": true
                  },
                  "FileName": {
                    "type": "string",
                    "nullable": true
                  }
                }
              },
              "encoding": {
                "ContentType": {
                  "style": "form"
                },
                "ContentDisposition": {
                  "style": "form"
                },
                "Headers": {
                  "style": "form"
                },
                "Length": {
                  "style": "form"
                },
                "Name": {
                  "style": "form"
                },
                "FileName": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "CONFIGURE_TWMS_SYSTEM"
          ]
        ]
      }
    },
    "/v1/System/checkSmtpConfiguration": {
      "post": {
        "tags": [
          "System"
        ],
        "summary": "Checks the SMTP configuration for security",
        "operationId": "CheckSmtpConfiguration",
        "requestBody": {
          "description": "Email configuration",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EmailConfiguration"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailConfiguration"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailConfiguration"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/EmailConfiguration"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailSecurityError"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailSecurityError"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailSecurityError"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "CONFIGURE_TWMS_SYSTEM"
          ]
        ]
      }
    },
    "/v1/System/checkSftpConfiguration": {
      "post": {
        "tags": [
          "System"
        ],
        "summary": "Checks the SFTP configuration for security",
        "operationId": "CheckSftpConfiguration",
        "requestBody": {
          "description": "SFTP configuration",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SftpConfiguration"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SftpConfiguration"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SftpConfiguration"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SftpConfiguration"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SftpSecurityError"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SftpSecurityError"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SftpSecurityError"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "CONFIGURE_TWMS_SYSTEM"
          ]
        ]
      }
    },
    "/v1/System/preference/{applicationKey}": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get a system preference",
        "operationId": "GetSystemPreference",
        "parameters": [
          {
            "name": "applicationKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SHOW_SYSTEM_CONFIG"
          ]
        ]
      },
      "post": {
        "tags": [
          "System"
        ],
        "summary": "Set a system preference",
        "operationId": "SetSystemPreference",
        "parameters": [
          {
            "name": "applicationKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string",
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "string",
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "string",
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SHOW_SYSTEM_CONFIG"
          ]
        ]
      }
    },
    "/v1/System/reloadconfig": {
      "post": {
        "tags": [
          "System"
        ],
        "summary": "Generate and Relaod Emico Config",
        "operationId": "ReloadConfig",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SHOW_SYSTEM_CONFIG"
          ]
        ]
      }
    },
    "/v1/Update/postupdate": {
      "post": {
        "tags": [
          "Update"
        ],
        "summary": "Uploads an update file",
        "description": "Example\r\n<pre></pre>",
        "operationId": "PostUpdate",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "pattern": "^twms-bundle-full-[a-zA-Z0-9.\\-_]*.raucb$",
                    "type": "string",
                    "description": "IFormFile Object",
                    "format": "binary",
                    "nullable": true
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "UPDATE_FIRMWARE_CONTROLLER"
          ]
        ]
      }
    },
    "/v1/Update/getupdatestatus": {
      "get": {
        "tags": [
          "Update"
        ],
        "summary": "Checks the status of the update process",
        "operationId": "GetUpdateStatus",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ControllerUpdateStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ControllerUpdateStatus"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ControllerUpdateStatus"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": []
      }
    },
    "/v1/Users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user detail information",
        "operationId": "GetUsers",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserOutputDto"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserOutputDto"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserOutputDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SHOW_ALL_USERS"
          ]
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a user",
        "description": "Example create parameter:\r\n<pre>\r\n{\r\n\t  \"loginname\"           :\"TestNewCreatedUser\",\r\n\t  \"password\"            :\"Paccccc1%\",\r\n\t  \"PasswordConfirmation\":\"Paccccc1%\",\r\n\t  \"lastname\"            :\"MyLastName\",\r\n\t  \"firstname\"           :\"MyFirstName\",\r\n\t  \"email\"               :\"MyEmail@cbb.de\",\r\n\t  \"AuthorityTemplateName\"  :\"GUESTS\"\r\n}\r\n</pre>",
        "operationId": "CreateUser",
        "requestBody": {
          "description": "Create user input object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserOutputDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserOutputDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserOutputDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "CREATE_ANY_USER"
          ]
        ]
      }
    },
    "/v1/Users/{loginName}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get one user detail information",
        "operationId": "GetUserMetadata",
        "parameters": [
          {
            "name": "loginName",
            "in": "path",
            "description": "user login name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "user login name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserOutputDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserOutputDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserOutputDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SHOW_OWN_USER"
          ]
        ]
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Modify user own metadata.",
        "description": "Example\r\n<pre>\r\n{\r\n\t\"loginname\":\"admin\",\r\n\t\"lastname\" :\"UpdateTest\",\r\n\t\"firstname\":\"UpdateTest\",\r\n\t\"email\"    :\"UpdateTest@cbb.de\"\r\n}\r\n</pre>",
        "operationId": "UpdateUserOwnMetadata",
        "parameters": [
          {
            "name": "loginName",
            "in": "path",
            "description": "user login Name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "user login Name"
            }
          }
        ],
        "requestBody": {
          "description": "user update obejct",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateOwnMetadataInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateOwnMetadataInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateOwnMetadataInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateOwnMetadataInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EDIT_OWN_USER"
          ]
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Set or update other user metadata",
        "description": "Example\r\n<pre>\r\n{\r\n\t\"loginname\":\"DemoLoginNameUpdated\",\r\n\t\"lastname\":\"UpdateTest\",\r\n\t\"firstname\":\"UpdateTest\",\r\n\t\"email\":\"UpdateTest@cbb.de\"\r\n}\r\n</pre>",
        "operationId": "UpdateUserAnyMetadata",
        "parameters": [
          {
            "name": "loginName",
            "in": "path",
            "description": "target user login name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "target user login name"
            }
          }
        ],
        "requestBody": {
          "description": "user update object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateAnyMetadataInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateAnyMetadataInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateAnyMetadataInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateAnyMetadataInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EDIT_ANY_USER"
          ]
        ]
      }
    },
    "/v1/Users/password": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update user own password",
        "description": "Example\r\n<pre>\r\n{\r\n\t\"OldPassword\":\"Admin123@cbb\",\r\n\t\"NewPassword\": \"Admin123@cbbNew\",\r\n\t\"NewPasswordConfirmation\":\"Admin123@cbbNew\"\r\n}\r\n</pre>",
        "operationId": "UpdatePassword",
        "requestBody": {
          "description": "Updatepassword input object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdatePasswordInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdatePasswordInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdatePasswordInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdatePasswordInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "CHANGE_OWN_PASSWORD"
          ]
        ]
      }
    },
    "/v1/Users/password/reset/{loginName}": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Reset password for other user",
        "description": "Example\r\n<pre>\r\n{\r\n\t\"Password\": \"11ssJOKq*(\",\r\n\t\"PasswordConfirmation\": \"11ssJOKq*(\",\r\n\t\"ManagerPassword\":\"Admin123@cbb\" // This is the passowrd from the caller,for example the administrator.\r\n}\r\n</pre>",
        "operationId": "ResetPassword",
        "parameters": [
          {
            "name": "loginName",
            "in": "path",
            "description": "target user login name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "target user login name"
            }
          }
        ],
        "requestBody": {
          "description": "password reset object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserResetPasswordInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserResetPasswordInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserResetPasswordInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserResetPasswordInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "CHANGE_ANY_PASSWORD"
          ]
        ]
      }
    },
    "/v1/Users/unlock/{loginName}": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Unlock one user",
        "operationId": "UnlockUser",
        "parameters": [
          {
            "name": "loginName",
            "in": "path",
            "description": "Target user login name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Target user login name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "RESET_ANY_USER_LOCK"
          ]
        ]
      }
    },
    "/v1/Users/lock/{loginName}": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Lock one user",
        "operationId": "LockUser",
        "parameters": [
          {
            "name": "loginName",
            "in": "path",
            "description": "Target user login name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Target user login name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SET_ANY_USER_LOCK"
          ]
        ]
      }
    },
    "/v1/Users/authoritytemplate/{loginName}": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Set user authority template",
        "description": "Example\r\n<pre>\r\n{\r\n\t\"ManagerPassword\":\"Admin123@cbb\" // This is the passowrd from the caller,for example the administrator.\r\n\t\"AuthorityTemplateName\": \"USERS\"\r\n}\r\n</pre>",
        "operationId": "SetUserAuthorityTemplate",
        "parameters": [
          {
            "name": "loginName",
            "in": "path",
            "description": "Target user login name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Target user login name"
            }
          }
        ],
        "requestBody": {
          "description": "set user authority tempalte object",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserSetAuthorityTemplateInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSetAuthorityTemplateInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSetAuthorityTemplateInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserSetAuthorityTemplateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "REGISTER_AUTHORITY_TEMPLATE_ANY_USER"
          ]
        ]
      }
    },
    "/v1/Users/preference/{loginName}/{applicationKey}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user preference",
        "operationId": "GetUserPreference",
        "parameters": [
          {
            "name": "loginName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "applicationKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "SHOW_OWN_USER"
          ]
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Set a user preference",
        "operationId": "SetUserPreference",
        "parameters": [
          {
            "name": "loginName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "applicationKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "string",
                "nullable": true
              }
            },
            "application/json": {
              "schema": {
                "type": "string",
                "nullable": true
              }
            },
            "text/json": {
              "schema": {
                "type": "string",
                "nullable": true
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string",
                "nullable": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EDIT_OWN_USER"
          ]
        ]
      }
    },
    "/v1/Users/setuserdisabledtimestamp": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Set user disabled timestamp",
        "operationId": "SetUserDisabledTimestamp",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SetUserDisabledTimestampInput"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetUserDisabledTimestampInput"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetUserDisabledTimestampInput"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetUserDisabledTimestampInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EDIT_ANY_USER"
          ]
        ]
      }
    },
    "/v1/Users/resetuserdisabledtimestamp/{loginName}": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Set user disabled timestamp",
        "operationId": "ResetUserDisabledTimestamp",
        "parameters": [
          {
            "name": "loginName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "EDIT_ANY_USER"
          ]
        ]
      }
    },
    "/v1/Users/userauthority": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all authorities belonging to the current user",
        "operationId": "GetUserAuthority",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserAuthoritiesDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAuthoritiesDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAuthoritiesDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidModelStateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          }
        },
        "authorityCodes": []
      }
    },
    "/v1/Values/GetSecretSuper": {
      "get": {
        "tags": [
          "Values"
        ],
        "operationId": "GetSecretSuper",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "authorityCodes": [
          [
            "NO_BODY_HAS_THIS_CODE_TESTING_PURPOES",
            "CHANGE_ANY_PASSWORD"
          ],
          [
            "NO_BODY_HAS_THIS_CODE_TESTING_PURPOES",
            "EDIT_ANY_USER"
          ]
        ]
      }
    },
    "/v1/Values/ExceptionTest": {
      "get": {
        "tags": [
          "Values"
        ],
        "operationId": "ExceptionTest",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "authorityCodes": []
      }
    },
    "/v1/Values/RemoteDteTest": {
      "get": {
        "tags": [
          "Values"
        ],
        "operationId": "RemoteDteTest",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "authorityCodes": []
      }
    },
    "/v1/Values/RemoteZirkETest": {
      "get": {
        "tags": [
          "Values"
        ],
        "operationId": "RemoteZirkETest",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "authorityCodes": []
      }
    }
  },
  "components": {
    "schemas": {
      "ProjectMetaDataSlim": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ActivationStatusSlim": {
        "type": "object",
        "properties": {
          "isActivated": {
            "type": "boolean"
          },
          "isBareboneVersion": {
            "type": "boolean"
          },
          "isClientSideCertificateValid": {
            "type": "boolean"
          },
          "projectMetaData": {
            "$ref": "#/components/schemas/ProjectMetaDataSlim"
          }
        },
        "additionalProperties": false
      },
      "ActivationInput": {
        "type": "object",
        "properties": {
          "activationCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ActivationResult": {
        "type": "object",
        "properties": {
          "isOk": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "InvalidModelStateResponse": {
        "type": "object",
        "properties": {
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "error": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UnauthorizedResponse": {
        "type": "object",
        "properties": {
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ForbiddenResponse": {
        "type": "object",
        "properties": {
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "requiredCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "hadCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ControllerCreateInput": {
        "required": [
          "lastMaintenanceTimestamp",
          "maintenanceInterval",
          "name",
          "remark",
          "serialNumber"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string",
            "description": "Controller name"
          },
          "serialNumber": {
            "maxLength": 50,
            "type": "string",
            "description": "SerialNumber of Controller"
          },
          "remark": {
            "maxLength": 50,
            "type": "string",
            "description": "remark of Controller"
          },
          "lastMaintenanceTimestamp": {
            "maxLength": 27,
            "type": "string",
            "description": "Last Maintenance Timestamp of Controller"
          },
          "maintenanceInterval": {
            "maxLength": 50,
            "type": "string",
            "description": "Last Maintenance Timestamp of Controller"
          }
        },
        "additionalProperties": false
      },
      "ControllerStatus": {
        "enum": [
          "FUSI_OK",
          "OFFLINE",
          "FATAL_PERSISTANT_SYSTEM_FAILURE"
        ],
        "type": "string"
      },
      "ControllerTypeEnum": {
        "enum": [
          "Master",
          "DTE",
          "Slave",
          "Unknown"
        ],
        "type": "string"
      },
      "ControllerOutputDto": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "UUID of the Controller",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the Controller",
            "nullable": true
          },
          "serialNumber": {
            "type": "string",
            "description": "Serial Number of the Controller",
            "nullable": true
          },
          "remark": {
            "type": "string",
            "description": "Remark of the Controller",
            "nullable": true
          },
          "lastMaintenanceTimestamp": {
            "type": "string",
            "description": "Last Maintenance Timestamp of the Controller",
            "format": "date-time",
            "nullable": true
          },
          "maintenanceInterval": {
            "type": "string",
            "description": "Maintenance Interval of the Controller",
            "nullable": true
          },
          "managedByUserUUID": {
            "type": "string",
            "description": "Managed By User UUID",
            "nullable": true
          },
          "controllerStatus": {
            "$ref": "#/components/schemas/ControllerStatus"
          },
          "controllerPoint_UUID": {
            "type": "string",
            "description": "Controller Point UUID",
            "nullable": true
          },
          "ipAddress": {
            "type": "string",
            "description": "IP Address of a Controller",
            "nullable": true
          },
          "macAddress": {
            "type": "string",
            "description": "MAC Address of a Controller",
            "nullable": true
          },
          "controllerType": {
            "$ref": "#/components/schemas/ControllerTypeEnum"
          },
          "softwareRevision": {
            "type": "string",
            "description": "Rauc software version of the controller",
            "nullable": true
          },
          "isRemoteController": {
            "type": "boolean",
            "description": "uuid != GlobalDataMgr.CurrentControllerUuid",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ControllerSetMetadataInput": {
        "required": [
          "newLastMaintenanceTimestamp",
          "newMaintenanceInterval",
          "newName",
          "newRemark",
          "newSerialNumber"
        ],
        "type": "object",
        "properties": {
          "newName": {
            "maxLength": 100,
            "type": "string",
            "description": "Controller name"
          },
          "newSerialNumber": {
            "maxLength": 50,
            "type": "string",
            "description": "SerialNumber of Controller"
          },
          "newRemark": {
            "maxLength": 50,
            "type": "string",
            "description": "Remark of Controller"
          },
          "newMaintenanceInterval": {
            "maxLength": 50,
            "type": "string",
            "description": "Maintenance Interval of Controller"
          },
          "newLastMaintenanceTimestamp": {
            "maxLength": 27,
            "type": "string",
            "description": "Last Maintenance Timestamp of Controller"
          }
        },
        "additionalProperties": false
      },
      "ControllerUpdateMaintenanceInput": {
        "required": [
          "maintenanceIntervalDays"
        ],
        "type": "object",
        "properties": {
          "maintenanceIntervalDays": {
            "maximum": 3650,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DiscoveryStatusEnum": {
        "enum": [
          "Unknown",
          "Running",
          "Succeeded",
          "NotAllReply",
          "Error",
          "Aborted"
        ],
        "type": "string"
      },
      "DiscoveryStatusOutputDto": {
        "type": "object",
        "properties": {
          "discoveryStatus": {
            "$ref": "#/components/schemas/DiscoveryStatusEnum"
          }
        },
        "additionalProperties": false
      },
      "MultiControllerPassword": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ControllerPointCreateInput": {
        "required": [
          "name",
          "pointAddressUUID"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string",
            "description": "Name of a Controller Point"
          },
          "remark": {
            "maxLength": 50,
            "type": "string",
            "description": "Remark of Device Point",
            "nullable": true
          },
          "pointAddressUUID": {
            "maxLength": 32,
            "type": "string",
            "description": "UUID of PointAddress"
          }
        },
        "additionalProperties": false,
        "description": "data transfer object for creating a new controller point in frontend representation"
      },
      "ControllerPointOutputDto": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "UUID of device point",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "device point name",
            "nullable": true
          },
          "controllerId": {
            "type": "integer",
            "description": "Controller ID of a device point",
            "format": "int32"
          },
          "remark": {
            "type": "string",
            "description": "remark of device point",
            "nullable": true
          },
          "enabledTimestamp": {
            "type": "string",
            "description": "Enabled timestamp of a device point",
            "format": "date-time",
            "nullable": true
          },
          "disabledTimestamp": {
            "type": "string",
            "description": "Disabled timestamp of a device point",
            "format": "date-time",
            "nullable": true
          },
          "cliqueName": {
            "type": "string",
            "description": "Clique Name",
            "nullable": true
          },
          "controller_UUID": {
            "type": "string",
            "description": "Controller UUID",
            "nullable": true
          },
          "pointAddress_UUID": {
            "type": "string",
            "description": "Point Address UUID",
            "nullable": true
          },
          "managedByUser_UUID": {
            "type": "string",
            "description": "Managed By User UUID",
            "nullable": true
          },
          "isRemoteController": {
            "type": "boolean",
            "description": "uuid != GlobalDataMgr.CurrentControllerPointUuid"
          }
        },
        "additionalProperties": false,
        "description": "Controller Point data transfer object for frontend representation"
      },
      "UpdateMainMetadataCompnentInput": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string",
            "description": "devicepoint name"
          },
          "remark": {
            "maxLength": 50,
            "type": "string",
            "description": "remark of devicepoint point",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PointAddressUpdateInput": {
        "required": [
          "area",
          "building",
          "room",
          "segment"
        ],
        "type": "object",
        "properties": {
          "building": {
            "maxLength": 50,
            "type": "string",
            "description": "Building"
          },
          "area": {
            "maxLength": 50,
            "type": "string",
            "description": "Area"
          },
          "room": {
            "maxLength": 50,
            "type": "string",
            "description": "Room"
          },
          "segment": {
            "maxLength": 50,
            "type": "string",
            "description": "Segment"
          }
        },
        "additionalProperties": false
      },
      "PointAddressUpdateByAddressUUIDInput": {
        "required": [
          "addressUUID"
        ],
        "type": "object",
        "properties": {
          "addressUUID": {
            "maxLength": 32,
            "type": "string",
            "description": "AddressUUID"
          }
        },
        "additionalProperties": false
      },
      "UpdateEnabledTimestampInput": {
        "type": "object",
        "properties": {
          "newEnabledTimestamp": {
            "maxLength": 27,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateDisabledTimestampInput": {
        "type": "object",
        "properties": {
          "newDisabledTimestamp": {
            "maxLength": 27,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InstallControllerToControllerPointInput": {
        "required": [
          "controllerPointUUID",
          "controllerUUID"
        ],
        "type": "object",
        "properties": {
          "controllerUUID": {
            "maxLength": 32,
            "type": "string"
          },
          "controllerPointUUID": {
            "maxLength": 32,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SetIPAddressInput": {
        "type": "object",
        "properties": {
          "controllerPointUUID": {
            "maxLength": 32,
            "type": "string",
            "description": "ControllerPoint UUID",
            "nullable": true
          },
          "ipAddress": {
            "type": "string",
            "description": "IPAddress",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeviceTypeName": {
        "enum": [
          "Wall-E",
          "Beat-E",
          "WireSens",
          "WirePort",
          "DTE",
          "Zirk-E",
          "Rulantica",
          "RulanticaT",
          "UfcFaultContact",
          "Hyplus",
          "Pump",
          "MagneticValve",
          "TemperatureSensor",
          "FlowSensor",
          "PressureSensor",
          "PulseSensor",
          "FlowAndTemperatureSensor",
          "GPIO",
          "LEDBar",
          "KeySwitch"
        ],
        "type": "string"
      },
      "DeviceUpdateGeneralStatus": {
        "enum": [
          "UpdateNotStartedYet",
          "UpdateRunning",
          "UpdateFailed",
          "UpdateSuccessful"
        ],
        "type": "string"
      },
      "DeviceUpdateRunningStatus": {
        "enum": [
          "FileCopy",
          "ExtractFile",
          "VerifySignature",
          "UpdateRunningOnDevice"
        ],
        "type": "string"
      },
      "DeviceUpdateFailedStatus": {
        "enum": [
          "EmicoIdentityObject",
          "EmicoSendToBootloader",
          "EmicoSendToApplication",
          "EmicoDeleteProgram",
          "EmicoScanAndMatchDeviceInBL",
          "EmicoScanAndMatchDeviceInApp",
          "EmicoConfigureNodeIDInBL",
          "EmicoConfigureNodeIDInApp",
          "EmicoDownload",
          "EmicoGeneralError",
          "FileCopy",
          "ExtractFile",
          "InvalidSignature",
          "Unknown",
          "NodeIdIsInvalidOrNull"
        ],
        "type": "string"
      },
      "DeviceUpdateStatusInternal": {
        "type": "object",
        "properties": {
          "deviceUpdateGeneralStatus": {
            "$ref": "#/components/schemas/DeviceUpdateGeneralStatus"
          },
          "deviceUpdateRunningStatus": {
            "$ref": "#/components/schemas/DeviceUpdateRunningStatus"
          },
          "deviceUpdateFailedStatus": {
            "$ref": "#/components/schemas/DeviceUpdateFailedStatus"
          },
          "lastEmicoDeviceUpdateFailedStatus": {
            "$ref": "#/components/schemas/DeviceUpdateFailedStatus"
          }
        },
        "additionalProperties": false
      },
      "DevicePointOutputDto": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "UUID of device point",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "device point name",
            "nullable": true
          },
          "controllerId": {
            "type": "integer",
            "description": "Controller ID of a device point",
            "format": "int32"
          },
          "nodeId": {
            "type": "integer",
            "description": "Controller ID of a device point",
            "format": "int32"
          },
          "remark": {
            "type": "string",
            "description": "remark of device point",
            "nullable": true
          },
          "enabledTimestamp": {
            "type": "string",
            "description": "Enabled timestamp of a device point",
            "format": "date-time",
            "nullable": true
          },
          "disabledTimestamp": {
            "type": "string",
            "description": "Disabled timestamp of a device point",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Indicates whether a device point is pseudo-deleted"
          },
          "building": {
            "type": "string",
            "description": "Point Address Building",
            "nullable": true
          },
          "area": {
            "type": "string",
            "description": "Point Address Area",
            "nullable": true
          },
          "room": {
            "type": "string",
            "description": "Point Address Room",
            "nullable": true
          },
          "segment": {
            "type": "string",
            "description": "Point Address Segment",
            "nullable": true
          },
          "device_UUID": {
            "type": "string",
            "description": "Device UUID",
            "nullable": true
          },
          "managedByUserUUID": {
            "type": "string",
            "description": "Managed By User UUID",
            "nullable": true
          },
          "cliqueName": {
            "type": "string",
            "description": "Clique Name",
            "nullable": true
          },
          "controllerPoint_UUID": {
            "type": "string",
            "description": "ControllerPoint UUID",
            "nullable": true
          },
          "deviceTypeName": {
            "$ref": "#/components/schemas/DeviceTypeName"
          },
          "assignedCirculationFunction": {
            "type": "string",
            "description": "Assigned circulation function",
            "nullable": true
          },
          "deviceUpdateStatus": {
            "$ref": "#/components/schemas/DeviceUpdateStatusInternal"
          },
          "ipAddress": {
            "type": "string",
            "description": "IP Address of Hyplus",
            "nullable": true
          },
          "isRemoteDevice": {
            "type": "boolean",
            "description": "Indicates whether a device is remote connected"
          }
        },
        "additionalProperties": false,
        "description": "Device Point data transfer object for frontend representation"
      },
      "DevicePointFullOutputDto": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "UUID of device point",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "device point name",
            "nullable": true
          },
          "controllerId": {
            "type": "integer",
            "description": "Controller ID of a device point",
            "format": "int32"
          },
          "nodeId": {
            "type": "integer",
            "description": "Controller ID of a device point",
            "format": "int32"
          },
          "remark": {
            "type": "string",
            "description": "remark of device point",
            "nullable": true
          },
          "enabledTimestamp": {
            "type": "string",
            "description": "Enabled timestamp of a device point",
            "format": "date-time",
            "nullable": true
          },
          "disabledTimestamp": {
            "type": "string",
            "description": "Disabled timestamp of a device point",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Indicates whether a device point is pseudo-deleted"
          },
          "building": {
            "type": "string",
            "description": "Point Address Building",
            "nullable": true
          },
          "area": {
            "type": "string",
            "description": "Point Address Area",
            "nullable": true
          },
          "room": {
            "type": "string",
            "description": "Point Address Room",
            "nullable": true
          },
          "segment": {
            "type": "string",
            "description": "Point Address Segment",
            "nullable": true
          },
          "device_UUID": {
            "type": "string",
            "description": "Device UUID",
            "nullable": true
          },
          "managedByUserUUID": {
            "type": "string",
            "description": "Managed By User UUID",
            "nullable": true
          },
          "cliqueName": {
            "type": "string",
            "description": "Clique Name",
            "nullable": true
          },
          "controllerPoint_UUID": {
            "type": "string",
            "description": "ControllerPoint UUID",
            "nullable": true
          },
          "deviceTypeName": {
            "$ref": "#/components/schemas/DeviceTypeName"
          },
          "assignedCirculationFunction": {
            "type": "string",
            "description": "Assigned circulation function",
            "nullable": true
          },
          "deviceUpdateStatus": {
            "$ref": "#/components/schemas/DeviceUpdateStatusInternal"
          },
          "ipAddress": {
            "type": "string",
            "description": "IP Address of Hyplus",
            "nullable": true
          },
          "isRemoteDevice": {
            "type": "boolean",
            "description": "Indicates whether a device is remote connected"
          },
          "softwareVersion": {
            "type": "string",
            "description": "Software Version",
            "nullable": true
          },
          "softwareRevision": {
            "type": "string",
            "description": "Software Revision",
            "nullable": true
          },
          "interfaceVersion": {
            "type": "string",
            "description": "Interface version of the device",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Device Point data transfer object for frontend representation"
      },
      "DevicePointCreateInput": {
        "required": [
          "deviceTypeName",
          "name",
          "pointAddressUUID"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string",
            "description": "Name of a Device Point"
          },
          "ipAddress": {
            "type": "string",
            "description": "IP-Address for a hyplus device point",
            "nullable": true
          },
          "serialNumber": {
            "type": "integer",
            "description": "SerialNumber for a hyplus device",
            "format": "int32",
            "nullable": true
          },
          "revisionNumber": {
            "type": "integer",
            "description": "RevisionNumber for a hyplus device",
            "format": "int32",
            "nullable": true
          },
          "remark": {
            "maxLength": 50,
            "type": "string",
            "description": "Remark of Device Point",
            "nullable": true
          },
          "pointAddressUUID": {
            "maxLength": 32,
            "type": "string",
            "description": "UUID of PointAddress"
          },
          "deviceTypeName": {
            "type": "string",
            "description": "Name of the device type"
          },
          "reloadConfig": {
            "type": "boolean",
            "description": "reload Config (defaut: true)"
          }
        },
        "additionalProperties": false,
        "description": "data transfer object for creating a new device point in frontend representation"
      },
      "DevicePointSetMetadataInput": {
        "required": [
          "newName",
          "uuid"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "maxLength": 32,
            "type": "string",
            "description": "device point UUID"
          },
          "newName": {
            "maxLength": 100,
            "type": "string",
            "description": "device point name"
          },
          "newNodeID": {
            "maximum": 999,
            "minimum": 1,
            "type": "integer",
            "description": "NodeID of a Device Point",
            "format": "int32",
            "nullable": true
          },
          "newControllerID": {
            "maximum": 999,
            "minimum": 1,
            "type": "integer",
            "description": "ControllerID of a Controller Point",
            "format": "int32",
            "nullable": true
          },
          "newRemark": {
            "maxLength": 50,
            "type": "string",
            "description": "Remark of Device Point",
            "nullable": true
          },
          "newEnabledTimestamp": {
            "maxLength": 27,
            "type": "string",
            "description": "Enabled Timestamp of Device Point",
            "nullable": true
          },
          "newDisabledTimestamp": {
            "maxLength": 27,
            "type": "string",
            "description": "Disabled Timestamp of Device Point",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "data transfer object for updating a device point in frontend representation"
      },
      "InstallDeviceToDevicePointInput": {
        "required": [
          "devicePointUUID",
          "deviceUUID"
        ],
        "type": "object",
        "properties": {
          "deviceUUID": {
            "maxLength": 32,
            "type": "string"
          },
          "devicePointUUID": {
            "maxLength": 32,
            "type": "string"
          },
          "reloadConfig": {
            "type": "boolean",
            "description": "reload Config (defaut: true)"
          }
        },
        "additionalProperties": false
      },
      "PortTypeName": {
        "enum": [
          "MultiIO",
          "GPIO_DigitalIn",
          "GPIO_DigitalOut",
          "TLC"
        ],
        "type": "string"
      },
      "CreatePortInput": {
        "required": [
          "ancestorDevice_PortIndex",
          "ancestorDevice_PortTypeName"
        ],
        "type": "object",
        "properties": {
          "ancestorDevice_PortTypeName": {
            "$ref": "#/components/schemas/PortTypeName"
          },
          "ancestorDevice_PortIndex": {
            "type": "integer",
            "description": "AncestorDevice_PortIndex",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LinkDevicePortToSensorInput": {
        "required": [
          "ancestorDevice_Ports",
          "deviceUUID",
          "sensorPointUUID"
        ],
        "type": "object",
        "properties": {
          "deviceUUID": {
            "maxLength": 100,
            "type": "string",
            "description": "UUID of Ancestor Device the sensor should be linked to"
          },
          "sensorPointUUID": {
            "maxLength": 100,
            "type": "string",
            "description": "UUID of th DevicePoint of the sensor"
          },
          "ancestorDevice_Ports": {
            "maxLength": 32,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreatePortInput"
            },
            "description": "AncestorDevice_Ports"
          },
          "reloadConfig": {
            "type": "boolean",
            "description": "reload Config (defaut: true)"
          }
        },
        "additionalProperties": false
      },
      "AssignCirculationFunctionToFlushableDeviceInput": {
        "required": [
          "circulationFunctionName",
          "flushableDevicePointUuid"
        ],
        "type": "object",
        "properties": {
          "circulationFunctionName": {
            "type": "string"
          },
          "flushableDevicePointUuid": {
            "maxLength": 32,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "DeviceUpdateStatus": {
        "type": "object",
        "properties": {
          "deviceUpdateGeneralStatus": {
            "$ref": "#/components/schemas/DeviceUpdateGeneralStatus"
          },
          "deviceUpdateRunningStatus": {
            "$ref": "#/components/schemas/DeviceUpdateRunningStatus"
          },
          "deviceUpdateFailedStatus": {
            "$ref": "#/components/schemas/DeviceUpdateFailedStatus"
          }
        },
        "additionalProperties": false
      },
      "PortType": {
        "type": "object",
        "properties": {
          "typeName": {
            "$ref": "#/components/schemas/PortTypeName"
          },
          "supportedDeviceTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeviceTypeName"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Port": {
        "type": "object",
        "properties": {
          "index": {
            "type": "integer",
            "format": "int32"
          },
          "portType": {
            "$ref": "#/components/schemas/PortType"
          }
        },
        "additionalProperties": false
      },
      "DeviceStatus": {
        "enum": [
          "Idle",
          "WaterRunning",
          "ThermalDisinfection",
          "HygieneCleansingCold",
          "HygieneCleansingWarm",
          "UseLock",
          "WarmUp",
          "DiagnoseRunning",
          "BasicMode",
          "DefaultMode",
          "ManualMode",
          "ThermalDisinfectionResultFail",
          "ThermalDisinfectionResultOk",
          "KeySwitchOn",
          "KeySwitchOff",
          "UFCOK",
          "UFCError",
          "UFCFault",
          "ErrorUnlinkedSensor",
          "Automatic",
          "Maintenance",
          "ThermalDisinfectionClosed",
          "ThermalDisinfectionOpen",
          "Remote",
          "Unlinked",
          "ErrorBackendRemote",
          "Unknown",
          "ErrorBackend",
          "ErrorDevice"
        ],
        "type": "string"
      },
      "DeviceStatusSimple": {
        "enum": [
          "Online",
          "Offline"
        ],
        "type": "string"
      },
      "DevicesOutputDto": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "UUID of the device",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the device",
            "nullable": true
          },
          "vendorId": {
            "type": "integer",
            "description": "Vendor ID  of the device",
            "format": "int32"
          },
          "productCode": {
            "type": "integer",
            "description": "Product Code of the device",
            "format": "int32"
          },
          "revisionNumber": {
            "type": "integer",
            "description": "Revision Number of the device",
            "format": "int32"
          },
          "serialNumber": {
            "type": "integer",
            "description": "Serial Number of the device",
            "format": "int32"
          },
          "identificationParameter": {
            "type": "string",
            "description": "Identification Parameter of the device",
            "nullable": true
          },
          "remark": {
            "type": "string",
            "description": "Remark of the device",
            "nullable": true
          },
          "cliqueName": {
            "type": "string",
            "description": "CliqueName of the device",
            "nullable": true
          },
          "lastMaintenanceTimestamp": {
            "type": "string",
            "description": "Last Maintenance Timestamp of the device",
            "format": "date-time",
            "nullable": true
          },
          "maintenanceInterval": {
            "type": "string",
            "description": "Maintenance Interval of the device",
            "nullable": true
          },
          "ancestorDeviceUUID": {
            "type": "string",
            "description": "Ancestor Device UUID of the device",
            "nullable": true
          },
          "ancestorDevicePorts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Port"
            },
            "description": "Ancestor Device Ports of the device",
            "nullable": true
          },
          "createdByUUID": {
            "type": "string",
            "description": "CreatedBy User UUID",
            "nullable": true
          },
          "devicePointUUID": {
            "type": "string",
            "description": "Device point of device",
            "nullable": true
          },
          "deviceTypeName": {
            "$ref": "#/components/schemas/DeviceTypeName"
          },
          "managedByUserUUID": {
            "type": "string",
            "description": "Managed By User UUID",
            "nullable": true
          },
          "deviceStatus": {
            "$ref": "#/components/schemas/DeviceStatus"
          },
          "deviceStatusSimple": {
            "$ref": "#/components/schemas/DeviceStatusSimple"
          },
          "preSelectedNodeId": {
            "type": "integer",
            "description": "Pre Selected NodeId",
            "format": "int32"
          },
          "availablePorts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Port"
            },
            "description": "List of unlinked Ports",
            "nullable": true
          },
          "availablePortCount": {
            "type": "integer",
            "description": "count of unlinked Ports",
            "format": "int32"
          },
          "controllerPointUUID": {
            "type": "string",
            "description": "Controller Point UUID of device",
            "nullable": true
          },
          "deviceUpdateStatus": {
            "$ref": "#/components/schemas/DeviceUpdateStatusInternal"
          }
        },
        "additionalProperties": false,
        "description": "Devices data transfer object for frontend representation"
      },
      "DeviceCreateInput": {
        "required": [
          "deviceTypeName",
          "lastMaintenanceTimestamp",
          "maintenanceInterval",
          "name",
          "remark",
          "revisionNumber",
          "serialNumber"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string",
            "description": "Device name"
          },
          "serialNumber": {
            "type": "integer",
            "description": "SerialNumber of Device",
            "format": "int32"
          },
          "revisionNumber": {
            "type": "integer",
            "description": "Revision Number of Device",
            "format": "int32"
          },
          "deviceTypeName": {
            "maxLength": 50,
            "type": "string",
            "description": "Device Type Name"
          },
          "remark": {
            "maxLength": 50,
            "type": "string",
            "description": "Remark of Device"
          },
          "maintenanceInterval": {
            "maximum": 3650,
            "minimum": 1,
            "type": "integer",
            "description": "Maintenance Interval of Device",
            "format": "int32"
          },
          "lastMaintenanceTimestamp": {
            "maxLength": 27,
            "type": "string",
            "description": "Last Maintenance Timestamp of Device"
          },
          "preSelectedNodeId": {
            "maximum": 999,
            "minimum": 10,
            "type": "integer",
            "description": "Pre selected node id of the device",
            "format": "int32",
            "nullable": true
          },
          "createdByUUID": {
            "type": "string",
            "description": "CreatedBy User UUID",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "data transfer object for creating a new device in frontend representation"
      },
      "DeviceCreateWithAncestorInput": {
        "required": [
          "ancestorDevice_Ports",
          "ancestorDevice_UUID",
          "deviceTypeName",
          "lastMaintenanceTimestamp",
          "maintenanceInterval",
          "name",
          "productCode",
          "remark",
          "revisionNumber",
          "serialNumber",
          "vendorID"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string",
            "description": "Device name"
          },
          "serialNumber": {
            "type": "integer",
            "description": "SerialNumber of Device",
            "format": "int32"
          },
          "vendorID": {
            "type": "integer",
            "description": "Vendor ID of Device",
            "format": "int32"
          },
          "productCode": {
            "type": "integer",
            "description": "Product Code of Device",
            "format": "int32"
          },
          "revisionNumber": {
            "type": "integer",
            "description": "Revision Number of Device",
            "format": "int32"
          },
          "deviceTypeName": {
            "maxLength": 50,
            "type": "string",
            "description": "Device Type Name"
          },
          "remark": {
            "maxLength": 50,
            "type": "string",
            "description": "Remark of Device"
          },
          "maintenanceInterval": {
            "maxLength": 50,
            "type": "string",
            "description": "Maintenance Interval of Device"
          },
          "ancestorDevice_UUID": {
            "maxLength": 32,
            "type": "string",
            "description": "AncestorDevice_UUID"
          },
          "ancestorDevice_Ports": {
            "maxLength": 32,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreatePortInput"
            },
            "description": "AncestorDevice_Ports"
          },
          "lastMaintenanceTimestamp": {
            "maxLength": 27,
            "type": "string",
            "description": "Last Maintenance Timestamp of Device"
          },
          "createdByUUID": {
            "type": "string",
            "description": "CreatedBy User UUID",
            "nullable": true
          },
          "deviceVariant": {
            "type": "string",
            "description": "Devices Variant stored to Preferences",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "data transfer object for creating a new device in frontend representation"
      },
      "DeviceCreateSensorFromAncestorInput": {
        "required": [
          "ancestorDevice_Ports",
          "ancestorDevice_UUID",
          "deviceTypeName",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string",
            "description": "Device name"
          },
          "deviceTypeName": {
            "maxLength": 50,
            "type": "string",
            "description": "Device Type Name"
          },
          "remark": {
            "maxLength": 50,
            "type": "string",
            "description": "Remark of Device",
            "nullable": true
          },
          "ancestorDevice_UUID": {
            "maxLength": 32,
            "type": "string",
            "description": "AncestorDevice_UUID"
          },
          "ancestorDevice_Ports": {
            "maxLength": 32,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreatePortInput"
            },
            "description": "AncestorDevice_Ports"
          },
          "reloadConfig": {
            "type": "boolean",
            "description": "reload Config (defaut: true)"
          }
        },
        "additionalProperties": false
      },
      "UnlinkDevicePortByUUIDInput": {
        "required": [
          "deviceUUID"
        ],
        "type": "object",
        "properties": {
          "deviceUUID": {
            "maxLength": 100,
            "type": "string",
            "description": "UUID of Ancestor Device the sensor should be linked to"
          },
          "reloadConfig": {
            "type": "boolean",
            "description": "reload Config (defaut: true)"
          }
        },
        "additionalProperties": false
      },
      "SetDeviceMainMetadataInput": {
        "required": [
          "newDeviceTypeName",
          "newName",
          "newRemark",
          "newRevisionNumber",
          "newSerialNumber",
          "uuid"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "maxLength": 32,
            "type": "string",
            "description": "Device UUID"
          },
          "newName": {
            "maxLength": 100,
            "type": "string",
            "description": "Device name"
          },
          "newSerialNumber": {
            "type": "integer",
            "description": "SerialNumber of Device",
            "format": "int32"
          },
          "newRevisionNumber": {
            "type": "integer",
            "description": "Revision Number of Device",
            "format": "int32"
          },
          "newDeviceTypeName": {
            "maxLength": 50,
            "type": "string",
            "description": "Device Type Name"
          },
          "newRemark": {
            "maxLength": 50,
            "type": "string",
            "description": "Remark of Device"
          }
        },
        "additionalProperties": false,
        "description": "data transfer object for updating a device in frontend representation"
      },
      "DeviceConfigTransferInput": {
        "required": [
          "sourceDeviceUUID",
          "targetDeviceUUID"
        ],
        "type": "object",
        "properties": {
          "sourceDeviceUUID": {
            "maxLength": 32,
            "type": "string"
          },
          "targetDeviceUUID": {
            "maxLength": 32,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ResetDeviceInput": {
        "required": [
          "devicePointUuid"
        ],
        "type": "object",
        "properties": {
          "devicePointUuid": {
            "maxLength": 32,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "LocateDeviceInput": {
        "type": "object",
        "properties": {
          "devicePointUuid": {
            "maxLength": 32,
            "type": "string",
            "nullable": true
          },
          "deviceUuid": {
            "maxLength": 32,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetDeviceMaintenanceIntervalInput": {
        "required": [
          "maintenanceIntervalDays"
        ],
        "type": "object",
        "properties": {
          "maintenanceIntervalDays": {
            "maximum": 3650,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TestStartInput": {
        "type": "object",
        "properties": {
          "deviceUuid": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Input for starting the test."
      },
      "EDteFunctionTestLanguageKeys": {
        "enum": [
          "None",
          "Description",
          "FinalizeError",
          "CommunicationError",
          "InternalError",
          "Input_Yes",
          "Input_No",
          "Input_Ok",
          "CanConnectionTest",
          "CanConnectionTest_ProductId",
          "CanConnectionTest_HWVersion",
          "CanConnectionTest_SWVersion",
          "CanConnectionTest_ItfVersion",
          "CanConnectionTest_SerialNumber",
          "CanConnectionTest_Success",
          "CanConnectionTest_Failed",
          "FlowSensorTest",
          "FlowSensorTest_Success",
          "FlowSensorTest_Failed",
          "FlowSensorTest_ValueWas",
          "FlowSensorTest_SensorError",
          "FlowSensorTest_PlausibilityQuestion",
          "FlowSensorTest_MeasuredValue",
          "FlowSensorTest_Hint",
          "LedBarTest",
          "LedBarTest_Question",
          "LedBarTest_Success",
          "LedBarTest_Failed",
          "LedBarTest_Step",
          "LedBarTest_None",
          "LedBarTest_Red",
          "LedBarTest_Blue",
          "LedBarTest_Both",
          "PumpTest",
          "PumpTest_Question",
          "PumpTest_Step",
          "PumpTest_Current",
          "PumpTest_PumpBottom",
          "PumpTest_PumpTop",
          "PumpTest_Success",
          "PumpTest_Failed",
          "SupplyVoltageTest",
          "SupplyVoltageTest_Success",
          "SupplyVoltageTest_Failed",
          "SupplyVoltageTest_SupplyVoltage",
          "TemperatureSensorTest",
          "TemperatureSensorTest_DteSubstitutionQuestion",
          "TemperatureSensorTest_DteSubstitutionTemperaturSensorHint",
          "TemperatureSensorTest_DteSubstitution",
          "TemperatureSensorTest_TemperatureSensorError",
          "TemperatureSensorTest_TemperatureSensorQuestion",
          "TemperatureSensorTest_TemperatureSensorSuccess",
          "TemperatureSensorTest_TemperatureSensorAutomaticFailure",
          "TemperatureSensorTest_TemperatureSensorManualFailure",
          "TemperatureSensorTest_TemperatureValuesString",
          "TemperatureSensorTest_TemperatureSensorPwh",
          "TemperatureSensorTest_TemperatureSensorPwcPwhc",
          "TemperatureSensorTest_TemperatureSensorPwhc",
          "TemperatureSensorTest_TemperatureSensorSupply",
          "WaterTest",
          "WaterTest_WaterFilledQuestion",
          "WaterTest_NoWater"
        ],
        "type": "string",
        "description": "Language keys for the translation"
      },
      "Localized": {
        "type": "object",
        "properties": {
          "i18N": {
            "$ref": "#/components/schemas/EDteFunctionTestLanguageKeys"
          },
          "default": {
            "type": "string",
            "description": "Default text",
            "nullable": true
          },
          "formats": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "String formats",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ETestCaseStatus": {
        "enum": [
          "Ready",
          "Processing",
          "WaitingForInput",
          "Success",
          "Failed",
          "Canceled",
          "Aborted"
        ],
        "type": "string",
        "description": "Status of the TwmsBackend.Services.DteFunctionTestService.DteTestCases"
      },
      "EDisplayElementType": {
        "enum": [
          "IButton",
          "INumeric",
          "IString",
          "OInfo",
          "OValue"
        ],
        "type": "string",
        "description": "Type of an TwmsBackend.Services.DteFunctionTestService.DisplayElement."
      },
      "DisplayElement": {
        "type": "object",
        "properties": {
          "displayType": {
            "$ref": "#/components/schemas/EDisplayElementType"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "text": {
            "$ref": "#/components/schemas/Localized"
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "hasError": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TestCase": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "$ref": "#/components/schemas/Localized"
          },
          "testId": {
            "type": "string",
            "nullable": true
          },
          "testerName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "deviceUuid": {
            "type": "string",
            "nullable": true
          },
          "testCaseIndex": {
            "type": "integer",
            "format": "int32"
          },
          "testCount": {
            "type": "integer",
            "format": "int32"
          },
          "canRestart": {
            "type": "boolean",
            "readOnly": true
          },
          "canSkip": {
            "type": "boolean",
            "readOnly": true
          },
          "canCancel": {
            "type": "boolean",
            "readOnly": true
          },
          "status": {
            "$ref": "#/components/schemas/ETestCaseStatus"
          },
          "displayElements": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DisplayElement"
              }
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Base class for the test cases."
      },
      "TestSetInput": {
        "required": [
          "name",
          "testId"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "testId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TestInput": {
        "required": [
          "testId"
        ],
        "type": "object",
        "properties": {
          "testId": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "Base input for the dte function test."
      },
      "TestSkipInput": {
        "required": [
          "reason",
          "testId"
        ],
        "type": "object",
        "properties": {
          "reason": {
            "minLength": 3,
            "type": "string"
          },
          "testId": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "description": "Input for skip a test case."
      },
      "AuthorityTemplateNames": {
        "enum": [
          "SUPERVISORS",
          "ADMINISTRATORS",
          "USERS",
          "GUESTS",
          "SYSTEM"
        ],
        "type": "string"
      },
      "User": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "loginName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "hashedPassword": {
            "type": "string",
            "nullable": true
          },
          "loginTry": {
            "type": "integer",
            "format": "int64"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "authorityTemplateName": {
            "$ref": "#/components/schemas/AuthorityTemplateNames"
          },
          "cliqueId": {
            "type": "integer",
            "format": "int32"
          },
          "cliqueName": {
            "type": "string",
            "nullable": true
          },
          "useBeforeTimestamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastLoginTimestamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestCaseResult": {
        "type": "object",
        "properties": {
          "testCaseName": {
            "type": "string",
            "nullable": true
          },
          "testCaseTitle": {
            "$ref": "#/components/schemas/Localized"
          },
          "testCaseResultStatus": {
            "$ref": "#/components/schemas/ETestCaseStatus"
          },
          "numTrials": {
            "type": "integer",
            "format": "int32"
          },
          "skipReason": {
            "type": "string",
            "nullable": true
          },
          "resultMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Localized"
            },
            "nullable": true
          },
          "isSkipped": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the result of a test case."
      },
      "TestSeriesResult": {
        "type": "object",
        "properties": {
          "testUser": {
            "$ref": "#/components/schemas/User"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "testId": {
            "type": "string",
            "nullable": true
          },
          "deviceUuid": {
            "type": "string",
            "nullable": true
          },
          "testCaseResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TestCaseResult"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Result of a TwmsBackend.Services.DteFunctionTestService.TestSeries."
      },
      "StartThermalDisinfectionOutputDto": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ThermalDisinfectionTaskStatusEnum": {
        "enum": [
          "Idle",
          "CheckingBlockedStatus",
          "CheckingForActivatedKeySwitch",
          "SettingCirculationValves",
          "WaitingForDteTemperatureClaimByUser",
          "SettingDteTemperatureFirstTry",
          "SettingDteTemperatureSecondTry",
          "WaitingForKeySwitchToTurnOn",
          "WaitingForKeySwitchToTurnOffTurnOn",
          "FlushingDevices",
          "Successful",
          "Failed"
        ],
        "type": "string"
      },
      "EventTypes": {
        "enum": [
          "ALARM",
          "EVENT",
          "DISRUPTION",
          "MAINTENANCE",
          "SYSTEM_EVENT",
          "SYSTEM_FAULT",
          "FUNCTION",
          "FATAL_PERSISTANT_SYSTEM_FAILURE"
        ],
        "type": "string"
      },
      "MessageOutputDto": {
        "type": "object",
        "properties": {
          "rowId": {
            "type": "integer",
            "description": "message id",
            "format": "int32"
          },
          "errorCode": {
            "type": "integer",
            "description": "unique error code",
            "format": "int32"
          },
          "eventType": {
            "$ref": "#/components/schemas/EventTypes"
          },
          "description": {
            "type": "string",
            "description": "description of message",
            "nullable": true
          },
          "summary": {
            "type": "string",
            "description": "summary of message",
            "nullable": true
          },
          "createdDeviceName": {
            "type": "string",
            "description": "device name",
            "nullable": true
          },
          "createdDeviceTypeName": {
            "type": "string",
            "description": "name of the device type",
            "nullable": true
          },
          "createdDevicePointName": {
            "type": "string",
            "description": "device point name",
            "nullable": true
          },
          "createdTime": {
            "type": "string",
            "description": "timestamp message occured",
            "nullable": true
          },
          "createdByUuid": {
            "type": "string",
            "description": "uuid of message initiator",
            "nullable": true
          },
          "viewedTime": {
            "type": "string",
            "description": "timestamp when the user accessed the message for the first time",
            "nullable": true
          },
          "viewedByUuid": {
            "type": "string",
            "description": "user uuid accessed the message for the first time",
            "nullable": true
          },
          "acknowledgedTime": {
            "type": "string",
            "description": "timestamp of user acknowledgement",
            "nullable": true
          },
          "acknowledgedByUuid": {
            "type": "string",
            "description": "uuid of the acknowledging user",
            "nullable": true
          },
          "fixedTime": {
            "type": "string",
            "description": "timestamp of user resolve fix",
            "nullable": true
          },
          "fixedByUuid": {
            "type": "string",
            "description": "uuid of the user who fixed the message",
            "nullable": true
          },
          "createdByName": {
            "type": "string",
            "description": "name of the uuid",
            "nullable": true
          },
          "createdByType": {
            "type": "string",
            "description": "name of the uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Message data transfer object for frontend representation"
      },
      "ThermalDisinfectionTaskStatusObjOutputDto": {
        "type": "object",
        "properties": {
          "taskStatus": {
            "$ref": "#/components/schemas/ThermalDisinfectionTaskStatusEnum"
          },
          "flushingDevicePointUuid": {
            "type": "string",
            "nullable": true
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageOutputDto"
            },
            "nullable": true
          },
          "dteTargetTemperatureReachedUserClaim": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DependOnStagnationFlushPlanDto": {
        "required": [
          "intervalHours"
        ],
        "type": "object",
        "properties": {
          "nextCheckTimes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Timestamps for the next flush (pwc and pwh)",
            "nullable": true
          },
          "intervalHours": {
            "type": "integer",
            "description": "Flush if this threshold is reached aka stagnation time max",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "DependOnStagnationFlushPlan with next flush times"
      },
      "FixIntervalFlushPlanDto": {
        "required": [
          "intervalHours",
          "startDateUtc"
        ],
        "type": "object",
        "properties": {
          "nextFlushTimes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Timestamps for the next flush (pwc and pwh)",
            "nullable": true
          },
          "startDateUtc": {
            "maxLength": 27,
            "minLength": 0,
            "type": "string",
            "description": "The flush is starting at this point in time, e.g. 05.06.19 08:32"
          },
          "intervalHours": {
            "type": "integer",
            "description": "Waiting time between two flushes",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "FixIntervalFlushPlan with next flush times"
      },
      "WeekDays": {
        "required": [
          "fri",
          "mon",
          "sat",
          "sun",
          "thu",
          "tue",
          "wed"
        ],
        "type": "object",
        "properties": {
          "mon": {
            "maxLength": 48,
            "pattern": "^(2[0-3]|[01][0-9]):([0-5][0-9])$",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tue": {
            "maxLength": 48,
            "pattern": "^(2[0-3]|[01][0-9]):([0-5][0-9])$",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "wed": {
            "maxLength": 48,
            "pattern": "^(2[0-3]|[01][0-9]):([0-5][0-9])$",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "thu": {
            "maxLength": 48,
            "pattern": "^(2[0-3]|[01][0-9]):([0-5][0-9])$",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fri": {
            "maxLength": 48,
            "pattern": "^(2[0-3]|[01][0-9]):([0-5][0-9])$",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sat": {
            "maxLength": 48,
            "pattern": "^(2[0-3]|[01][0-9]):([0-5][0-9])$",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sun": {
            "maxLength": 48,
            "pattern": "^(2[0-3]|[01][0-9]):([0-5][0-9])$",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false,
        "description": "list of starting points for each weekday"
      },
      "WeeklyFlushPlanDto": {
        "required": [
          "weekDays"
        ],
        "type": "object",
        "properties": {
          "nextFlushTimes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Timestamps for the next flush (pwc and pwh)",
            "nullable": true
          },
          "weekDays": {
            "$ref": "#/components/schemas/WeekDays"
          }
        },
        "additionalProperties": false,
        "description": "WeeklyFlushPlan with next flush times"
      },
      "DependOnTemperatureFlushPlan": {
        "type": "object",
        "properties": {
          "activated": {
            "type": "boolean"
          },
          "flushIfTemperatureHigherThan": {
            "type": "number",
            "format": "float"
          }
        },
        "additionalProperties": false,
        "description": "Optional for WeeklyFlushPlan and FixIntervalFlushPlan\r\nCannot be set in combination with DependOnStagnationFlushPlan"
      },
      "TimeRange": {
        "required": [
          "fromHourMinute",
          "toHourMinute"
        ],
        "type": "object",
        "properties": {
          "fromHourMinute": {
            "pattern": "^(2[0-3]|[01][0-9]):([0-5][0-9])$",
            "type": "string",
            "description": "Start of the range, only hours and minutes are used, e.g. 02:03"
          },
          "toHourMinute": {
            "pattern": "^(2[0-3]|[01][0-9]):([0-5][0-9])$",
            "type": "string",
            "description": "End of the range, only hours and minutes are used, e.g. 06:59"
          }
        },
        "additionalProperties": false,
        "description": "Defines a range of hours for a day, e.g. from 22:00 to 6:00"
      },
      "FlushScheduleDto": {
        "type": "object",
        "properties": {
          "lastExecutionPwhTimestamp": {
            "type": "string",
            "description": "Last execution of the flush for the pwh",
            "nullable": true
          },
          "lastExecutionPwcTimestamp": {
            "type": "string",
            "description": "Last execution of the flush for the pwc",
            "nullable": true
          },
          "cleaningShutdownEndTimestamp": {
            "type": "string",
            "description": "End timestamp of the cleaning shutdown",
            "nullable": true
          },
          "dependOnStagnationFlushPlan": {
            "$ref": "#/components/schemas/DependOnStagnationFlushPlanDto"
          },
          "fixIntervalFlushPlan": {
            "$ref": "#/components/schemas/FixIntervalFlushPlanDto"
          },
          "weeklyFlushPlan": {
            "$ref": "#/components/schemas/WeeklyFlushPlanDto"
          },
          "dependOnTemperatureFlushPlan": {
            "$ref": "#/components/schemas/DependOnTemperatureFlushPlan"
          },
          "noFlushFrame": {
            "$ref": "#/components/schemas/TimeRange"
          },
          "flushParallel": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "FunctionTypes": {
        "enum": [
          "hygieneFlush",
          "circulation",
          "thermalDisinfection"
        ],
        "type": "string"
      },
      "TemperatureLevelCirculation": {
        "enum": [
          "DefaultNoUfc",
          "UfcLower",
          "UfcLowest",
          "UfcManualConfig"
        ],
        "type": "string"
      },
      "TemperatureLevelObject": {
        "type": "object",
        "properties": {
          "temperatureLevel": {
            "$ref": "#/components/schemas/TemperatureLevelCirculation"
          },
          "pwhTemperatureCelsius": {
            "type": "number",
            "description": "only != null if TemperatureLevelCirculation = UfcManualConfig",
            "format": "float",
            "nullable": true
          },
          "pwhcTemperatureCelsius": {
            "type": "number",
            "description": "only != null if TemperatureLevelCirculation = UfcManualConfig",
            "format": "float",
            "nullable": true
          },
          "isSelectable": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CirculationInput": {
        "required": [
          "temperatureLevelObject"
        ],
        "type": "object",
        "properties": {
          "temperatureLevelObject": {
            "$ref": "#/components/schemas/TemperatureLevelObject"
          }
        },
        "additionalProperties": false
      },
      "CirculationValveConfiguration": {
        "type": "object",
        "properties": {
          "targetTemperatureMapping": {
            "type": "object",
            "properties": {
              "DefaultNoUfc": {
                "type": "number",
                "format": "float"
              },
              "UfcLower": {
                "type": "number",
                "format": "float"
              },
              "UfcLowest": {
                "type": "number",
                "format": "float"
              },
              "UfcManualConfig": {
                "type": "number",
                "format": "float"
              }
            },
            "additionalProperties": false,
            "description": "The user can select a target temperature for the circulation valve for each tempearture level in the enum TemperatureLevelCirculation.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FunctionDto": {
        "required": [
          "name",
          "remark",
          "type"
        ],
        "type": "object",
        "properties": {
          "disabledTimestamp": {
            "type": "string",
            "description": "Is the function disabled?",
            "nullable": true
          },
          "flushSchedule": {
            "$ref": "#/components/schemas/FlushScheduleDto"
          },
          "numberOfTotalDevicePoints": {
            "type": "integer",
            "description": "Number of all device points within the function",
            "format": "int32"
          },
          "numberOfFlushableDevicePoints": {
            "type": "integer",
            "description": "Number of flushable device points within the function",
            "format": "int32"
          },
          "legacy": {
            "type": "boolean",
            "description": "true = use legacy versions of flush and thermal disinfection"
          },
          "name": {
            "maxLength": 100,
            "type": "string",
            "description": "Name of the function.\r\nIs unique, could be used as id"
          },
          "remark": {
            "maxLength": 50,
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/FunctionTypes"
          },
          "circulationInput": {
            "$ref": "#/components/schemas/CirculationInput"
          },
          "keySwitchUuid": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "uuid of the key switch",
            "nullable": true
          },
          "dteUuid": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Uuid for the DTE (water heating element)",
            "nullable": true
          },
          "ufcFaultContactUuid": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Uuid for UFC fault contact, only allowed for a circulation function",
            "nullable": true
          },
          "useUFC": {
            "type": "boolean",
            "description": "Use UFC, only allowed for a circulation function"
          },
          "circulationValveConfigurationMapping": {
            "maxLength": 100,
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CirculationValveConfiguration"
            },
            "description": "List of circulation valves",
            "nullable": true
          },
          "flushableDevicePointUuids": {
            "maxLength": 32,
            "minLength": 0,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Device uuid's for the flush operation\r\nThe first element will be flushed first, the second element will be flushed second and so on.",
            "nullable": true
          },
          "temperatureSensorPwcDevicePointUuid": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Sensor for pwc",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FunctionNameStartTimeOutputDto": {
        "type": "object",
        "properties": {
          "function": {
            "$ref": "#/components/schemas/FunctionDto"
          },
          "taskCreationTime": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DependOnStagnationFlushPlan": {
        "required": [
          "intervalHours"
        ],
        "type": "object",
        "properties": {
          "intervalHours": {
            "type": "integer",
            "description": "Flush if this threshold is reached aka stagnation time max",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "FixIntervalFlushPlan": {
        "required": [
          "intervalHours",
          "startDateUtc"
        ],
        "type": "object",
        "properties": {
          "startDateUtc": {
            "maxLength": 27,
            "minLength": 0,
            "type": "string",
            "description": "The flush is starting at this point in time, e.g. 05.06.19 08:32"
          },
          "intervalHours": {
            "type": "integer",
            "description": "Waiting time between two flushes",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "WeeklyFlushPlan": {
        "required": [
          "weekDays"
        ],
        "type": "object",
        "properties": {
          "weekDays": {
            "$ref": "#/components/schemas/WeekDays"
          }
        },
        "additionalProperties": false
      },
      "FlushScheduleInput": {
        "required": [
          "flushParallel"
        ],
        "type": "object",
        "properties": {
          "flushParallel": {
            "type": "boolean",
            "description": "true = flush all devices from DevicePointArrangement in paralell\r\nfalse = flush the devices one after another (sequential order)"
          },
          "dependOnStagnationFlushPlan": {
            "$ref": "#/components/schemas/DependOnStagnationFlushPlan"
          },
          "fixIntervalFlushPlan": {
            "$ref": "#/components/schemas/FixIntervalFlushPlan"
          },
          "dependOnTemperatureFlushPlan": {
            "$ref": "#/components/schemas/DependOnTemperatureFlushPlan"
          },
          "weeklyFlushPlan": {
            "$ref": "#/components/schemas/WeeklyFlushPlan"
          },
          "noFlushFrame": {
            "$ref": "#/components/schemas/TimeRange"
          }
        },
        "additionalProperties": false
      },
      "SetCleaningShutdownInput": {
        "required": [
          "durationMin",
          "functionName"
        ],
        "type": "object",
        "properties": {
          "functionName": {
            "type": "string"
          },
          "durationMin": {
            "maximum": 180,
            "minimum": 20,
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "extensions": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": false
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "HandleNoValueType": {
        "type": "object",
        "properties": {
          "handleNo": {
            "type": "integer",
            "format": "int32"
          },
          "valueType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CanObjectValueType": {
        "required": [
          "mainIndex",
          "nodeId",
          "subIndex",
          "valueType"
        ],
        "type": "object",
        "properties": {
          "nodeId": {
            "type": "integer",
            "format": "int32"
          },
          "mainIndex": {
            "type": "string"
          },
          "subIndex": {
            "type": "integer",
            "format": "int32"
          },
          "valueType": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CanObjectValueTypeValue": {
        "required": [
          "handleNo",
          "mainIndex",
          "nodeId",
          "subIndex",
          "value",
          "valueType"
        ],
        "type": "object",
        "properties": {
          "handleNo": {
            "type": "integer",
            "format": "int32"
          },
          "value": {
            "type": "string"
          },
          "nodeId": {
            "type": "integer",
            "format": "int32"
          },
          "mainIndex": {
            "type": "string"
          },
          "subIndex": {
            "type": "integer",
            "format": "int32"
          },
          "valueType": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "HandleNoValueTypeValue": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "nullable": true
          },
          "handleNo": {
            "type": "integer",
            "format": "int32"
          },
          "valueType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GpioPin": {
        "enum": [
          "DIO0",
          "DIO1",
          "DIO2",
          "DIO3",
          "DIO4",
          "DIO5",
          "DIO6"
        ],
        "type": "string"
      },
      "SetGPOIPinInput": {
        "required": [
          "gpioPin",
          "value"
        ],
        "type": "object",
        "properties": {
          "gpioPin": {
            "$ref": "#/components/schemas/GpioPin"
          },
          "value": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "IActionResult": {
        "type": "object",
        "additionalProperties": false
      },
      "GetGPOIPinInput": {
        "required": [
          "gpioPin"
        ],
        "type": "object",
        "properties": {
          "gpioPin": {
            "$ref": "#/components/schemas/GpioPin"
          }
        },
        "additionalProperties": false
      },
      "GetGPOIPinOutput": {
        "required": [
          "gpioPin",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "boolean"
          },
          "gpioPin": {
            "$ref": "#/components/schemas/GpioPin"
          }
        },
        "additionalProperties": false
      },
      "DeleteImageInput": {
        "type": "object",
        "properties": {
          "filename": {
            "pattern": "^[a-zA-Z0-9_-]+\\.(?i)(gif|jpg|jpeg|png)$",
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReportFileParametersDto": {
        "type": "object",
        "properties": {
          "userUuid": {
            "type": "string",
            "description": "uuid of the user",
            "nullable": true
          },
          "fileName": {
            "type": "string",
            "description": "file name with extension",
            "nullable": true
          },
          "sizeInBytes": {
            "type": "integer",
            "description": "size of the file in bytes",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "file info object (for output purposes)"
      },
      "ReportLiveviewObject": {
        "type": "object",
        "properties": {
          "timestampUtc": {
            "type": "string",
            "description": "utc timestamp right after the emico call",
            "nullable": true
          },
          "channelUnit": {
            "type": "string",
            "description": "channel unit e.g. °C",
            "nullable": true
          },
          "channelValue": {
            "type": "string",
            "description": "channel value e.g. 35",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "data object for the liveview function (used for output and internally)."
      },
      "ReportOptionsQueryOutputDto": {
        "type": "object",
        "properties": {
          "devicePointName": {
            "type": "string",
            "description": "name of the device point",
            "nullable": true
          },
          "devicePointUuid": {
            "type": "string",
            "description": "uuid of the device point",
            "nullable": true
          },
          "deviceName": {
            "type": "string",
            "description": "name of the device",
            "nullable": true
          },
          "deviceUuid": {
            "type": "string",
            "description": "uuid of the device",
            "nullable": true
          },
          "deviceTypeName": {
            "type": "string",
            "description": "type of the device, e.g. \"Wall-E\"",
            "nullable": true
          },
          "dataPointId": {
            "type": "string",
            "description": "number of the channel, e.g. 6 (6 = Temperature_Get, see enum ChannelValueCodes or emico c api)",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "human-readable channel name\r\ndatapoint description",
            "nullable": true
          },
          "unit": {
            "type": "string",
            "description": "datapoint Unit",
            "nullable": true
          },
          "dataType": {
            "type": "string",
            "description": "datapoint DataType",
            "nullable": true
          },
          "deviceInstallTimestamp": {
            "type": "string",
            "description": "install timestamp of the device",
            "nullable": true
          },
          "deviceUninstallTimestamp": {
            "type": "string",
            "description": "uninstall timestamp of the device",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "ouput object for the report options query (filter for device properties)"
      },
      "ReportOptionsQueryResultDto": {
        "type": "object",
        "properties": {
          "dropdownOptions": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "options for the given query, e.g. \"DevicePointName\" = new List() {\"Beate 1\", \"Trinkwassererwärmer 7\"}",
            "nullable": true
          },
          "detailedDeviceInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportOptionsQueryOutputDto"
            },
            "description": "device info (for all devices returned by the report options query)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "extended ouput object for the report options query (filter for device properties)"
      },
      "OutputDataType": {
        "enum": [
          "JsonString",
          "CsvString",
          "CsvFile",
          "PdfFile"
        ],
        "type": "string"
      },
      "ReportDataQueryOutputDto": {
        "type": "object",
        "properties": {
          "rowId": {
            "type": "integer",
            "description": "row id of the entry",
            "format": "int64"
          },
          "dateUtc": {
            "type": "string",
            "description": "utc date of the datalog entry",
            "nullable": true
          },
          "devicePointName": {
            "type": "string",
            "description": "name of the device point",
            "nullable": true
          },
          "devicePointUuid": {
            "type": "string",
            "description": "uuid of the device point",
            "nullable": true
          },
          "deviceName": {
            "type": "string",
            "description": "name of the device",
            "nullable": true
          },
          "deviceUuid": {
            "type": "string",
            "description": "name of the device point, e.g. \"Beate 1\"",
            "nullable": true
          },
          "deviceTypeName": {
            "type": "string",
            "description": "type of the device, e.g. \"Wall-E\"",
            "nullable": true
          },
          "dataPointId": {
            "type": "string",
            "description": "number of the channel, e.g. 6 (6 = Temperature_Get, see enum ChannelValueCodes or emico c api)",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "value of the data log entry, e.g. 18°C",
            "nullable": true
          },
          "unit": {
            "type": "string",
            "description": "datapoint Unit",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "human-readable channel name\r\ndatapoint description",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "ouput object for the report data query (data log entries)"
      },
      "ODataOutput": {
        "type": "object",
        "properties": {
          "@odata.context": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "object",
            "additionalProperties": false,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SftpOptionsInput": {
        "required": [
          "destinationPath",
          "host",
          "password",
          "port",
          "username"
        ],
        "type": "object",
        "properties": {
          "host": {
            "type": "string",
            "description": "hostname of the sftp-server, e.g. 127.0.0.1"
          },
          "port": {
            "maximum": 65535,
            "minimum": 0,
            "type": "integer",
            "description": "port of the sftp-server, e.g. 22",
            "format": "int32"
          },
          "username": {
            "type": "string",
            "description": "user name for the sftp-server login"
          },
          "password": {
            "type": "string",
            "description": "password for the sftp-server login"
          },
          "destinationPath": {
            "type": "string",
            "description": "path on the sftp-server (store new files on this location)"
          },
          "fingerprint": {
            "type": "string",
            "description": "fingerprint of sftp-server",
            "nullable": true
          },
          "privateKeyPath": {
            "type": "string",
            "description": "path of public key",
            "nullable": true
          },
          "passphrase": {
            "type": "string",
            "description": "passphrase of key",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "sftp-server options"
      },
      "ReportDataQueryParameters": {
        "required": [
          "limit"
        ],
        "type": "object",
        "properties": {
          "devicePointName": {
            "type": "string",
            "description": "uuid of the device point which created this data point",
            "nullable": true
          },
          "devicePointUuid": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "uuid of the device point which created this data point",
            "nullable": true
          },
          "deviceUuid": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "name of the device, e.g. \"Wall-E 2\"",
            "nullable": true
          },
          "deviceTypeName": {
            "type": "string",
            "description": "type of the device, e.g. \"Wall-E\"",
            "nullable": true
          },
          "dataPointId": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "number of the channel, e.g. 6 (6 = Temperature_Get, see enum ChannelValueCodes or emico c api)",
            "format": "int32",
            "nullable": true
          },
          "dataPointDescription": {
            "type": "string",
            "description": "channel description, e.g. Get Temperature",
            "nullable": true
          },
          "dataPointUnit": {
            "type": "string",
            "description": "channel unit, e.g. DegC",
            "nullable": true
          },
          "dateUtcMin": {
            "type": "string",
            "nullable": true
          },
          "dateUtcMax": {
            "type": "string",
            "description": "Consider only datalog elements with date less or equal DateUTCMax",
            "nullable": true
          },
          "dateUtcOffsetBase": {
            "type": "string",
            "nullable": true
          },
          "dateOffsetSec": {
            "type": "integer",
            "description": "Alternative option to set DateUTCMin and DateUTCMax\r\nOnly in combination with DateUTC",
            "format": "int32",
            "nullable": true
          },
          "valueMin": {
            "minimum": 0,
            "type": "number",
            "description": "Value should be greater equal ValueMin\r\nif we want to allow negatives values, we have to change the generator constaint \"if (valueMin lower 0.0) then\"",
            "format": "double",
            "nullable": true
          },
          "valueMax": {
            "type": "number",
            "description": "Value should be lower equal ValueMax",
            "format": "double",
            "nullable": true
          },
          "dataType": {
            "$ref": "#/components/schemas/OutputDataType"
          },
          "virtualInitValue": {
            "type": "boolean",
            "description": "should include virtual initial value\r\nif no DataPoint matches filter criteria the last DataPoint befor selected timeframe is given"
          },
          "limit": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Limits the number of returned data log entries (obtained by the query)",
            "format": "int32"
          },
          "offset": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "Offset for the query result (useful for pagination)",
            "format": "int32",
            "nullable": true
          },
          "skipToken": {
            "minimum": 0,
            "type": "integer",
            "description": "Predicate for the seek pagination (row id)",
            "format": "int64",
            "nullable": true
          },
          "orderBy": {
            "type": "string",
            "description": "Order the returned data log entries (by now there is only the \"Date\" column supported)",
            "nullable": true
          },
          "order": {
            "type": "string",
            "description": "Order of the returned data log entries (dependent to OrderBy)\r\n\"asc\" or \"desc\" allowed, default OrderBy column is \"date\"",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Parameters for report options query\r\nThe data query uses uuid instead of DevicePointName and channelChannelNo instead of ChannelName.\r\nThese two are keep to allow a quick change (data query) if needed."
      },
      "ReportServiceParametersDto": {
        "type": "object",
        "properties": {
          "serviceId": {
            "type": "integer",
            "description": "id of the service (rowId)",
            "format": "int32"
          },
          "createdByUuid": {
            "type": "string",
            "description": "user uuid of the service creator",
            "nullable": true
          },
          "serviceName": {
            "type": "string",
            "description": "name of the service",
            "nullable": true
          },
          "fileNameWithoutExtension": {
            "type": "string",
            "description": "name of the files created by the service",
            "nullable": true
          },
          "action": {
            "type": "string",
            "description": "what should the service do, if it gets triggered?\r\npossible options: write usbfile, upload file to sftp-server, send email",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "description": "if Action = email, send the service output to this email address",
            "nullable": true
          },
          "sftpOptionsInput": {
            "$ref": "#/components/schemas/SftpOptionsInput"
          },
          "trigger": {
            "type": "string",
            "description": "how gets the service triggered?\r\npossible options: event (e.g. new ALARM), manual, cronjob, each x records (data log entries)",
            "nullable": true
          },
          "triggerMessageTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTypes"
            },
            "description": "if Trigger = event, defines the trigger events, e.g. TriggerMessageTypes = \"ALARM | DISRUPTION\"",
            "nullable": true
          },
          "triggerDataIntervalCount": {
            "type": "integer",
            "description": "if Trigger = data, we send a report after each TriggerDataIntervalCount new entries in data_dataLog",
            "format": "int32",
            "nullable": true
          },
          "cronJobTimeStr": {
            "type": "string",
            "description": "if Trigger = cronjob, defines the cronjob execution time",
            "nullable": true
          },
          "dataQueryParameters": {
            "$ref": "#/components/schemas/ReportDataQueryParameters"
          }
        },
        "additionalProperties": false
      },
      "ReportServiceExecutionResultDto": {
        "type": "object",
        "properties": {
          "userUuid": {
            "type": "string",
            "description": "user uuid of the service creator",
            "nullable": true
          },
          "uniqueFileName": {
            "type": "string",
            "description": "the service results are stored to this file",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "return object for the service execution"
      },
      "ReportServiceInput": {
        "required": [
          "action",
          "dataQueryParameters",
          "fileNameWithoutExtension",
          "serviceName",
          "trigger"
        ],
        "type": "object",
        "properties": {
          "serviceName": {
            "type": "string",
            "description": "name of the service"
          },
          "fileNameWithoutExtension": {
            "type": "string",
            "description": "name of the files created by the service"
          },
          "action": {
            "type": "string",
            "description": "what should the service do, if it gets triggered?\r\npossible options: write usbfile, upload file to sftp-server, send email"
          },
          "emailAddress": {
            "type": "string",
            "description": "if Action=email, send the service output to this email address",
            "format": "email",
            "nullable": true
          },
          "sftpOptionsInput": {
            "$ref": "#/components/schemas/SftpOptionsInput"
          },
          "trigger": {
            "type": "string",
            "description": "how gets the service triggered?\r\npossible options: new message arrives (e.g. new ALARM), manual, cronjob, each x records (data log entries)"
          },
          "triggerDataIntervalCount": {
            "maximum": 4294967295,
            "minimum": 1000,
            "type": "integer",
            "description": "if Trigger = data, we send a report after each TriggerDataIntervalCount new entries in data_dataLog",
            "format": "int32",
            "nullable": true
          },
          "triggerMessageTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventTypes"
            },
            "description": "if Trigger = event, defines the trigger events, e.g. TriggerMessageTypes = \"ALARM | DISRUPTION\"",
            "nullable": true
          },
          "cronJobTimeStr": {
            "type": "string",
            "description": "if Trigger = cronjob, defines the cronjob execution time",
            "nullable": true
          },
          "dataQueryParameters": {
            "$ref": "#/components/schemas/ReportDataQueryParameters"
          }
        },
        "additionalProperties": false,
        "description": "input service data object"
      },
      "FunctionsInput": {
        "required": [
          "name",
          "remark",
          "type"
        ],
        "type": "object",
        "properties": {
          "disabledTimestamp": {
            "maxLength": 27,
            "minLength": 0,
            "type": "string",
            "description": "Is the function disabled?",
            "nullable": true
          },
          "flushSchedule": {
            "$ref": "#/components/schemas/FlushScheduleInput"
          },
          "legacy": {
            "type": "boolean",
            "description": "true = use legacy versions of flush and thermal disinfection"
          },
          "name": {
            "maxLength": 100,
            "type": "string",
            "description": "Name of the function.\r\nIs unique, could be used as id"
          },
          "remark": {
            "maxLength": 50,
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/FunctionTypes"
          },
          "circulationInput": {
            "$ref": "#/components/schemas/CirculationInput"
          },
          "keySwitchUuid": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "uuid of the key switch",
            "nullable": true
          },
          "dteUuid": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Uuid for the DTE (water heating element)",
            "nullable": true
          },
          "ufcFaultContactUuid": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Uuid for UFC fault contact, only allowed for a circulation function",
            "nullable": true
          },
          "useUFC": {
            "type": "boolean",
            "description": "Use UFC, only allowed for a circulation function"
          },
          "circulationValveConfigurationMapping": {
            "maxLength": 100,
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CirculationValveConfiguration"
            },
            "description": "List of circulation valves",
            "nullable": true
          },
          "flushableDevicePointUuids": {
            "maxLength": 32,
            "minLength": 0,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Device uuid's for the flush operation\r\nThe first element will be flushed first, the second element will be flushed second and so on.",
            "nullable": true
          },
          "temperatureSensorPwcDevicePointUuid": {
            "maxLength": 32,
            "minLength": 0,
            "type": "string",
            "description": "Sensor for pwc",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetDisabledTimestampFunctionInput": {
        "required": [
          "devicePointGroupFunctionName"
        ],
        "type": "object",
        "properties": {
          "devicePointGroupFunctionName": {
            "type": "string",
            "description": "Name of the fucntion"
          },
          "disabledTimestamp": {
            "maxLength": 27,
            "type": "string",
            "description": "Device UUID",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "data transfer object for setting the disabled timestamp for a function"
      },
      "AssignDeviceToFunctionInput": {
        "required": [
          "devicePointGroupFunctionName",
          "devicePointUuid"
        ],
        "type": "object",
        "properties": {
          "hasHighPriority": {
            "type": "boolean",
            "description": "IsHighPriority == true => make the devicePointUuid the first element in the device list\r\nIsHighPriority == false => make the devicePointUuid the last element in the device list\r\nThis affects the order of the devices for the flushing"
          },
          "devicePointGroupFunctionName": {
            "maxLength": 100,
            "type": "string",
            "description": "Name of the function"
          },
          "devicePointUuid": {
            "maxLength": 32,
            "type": "string",
            "description": "Uuid of the device point"
          }
        },
        "additionalProperties": false
      },
      "RemoveDeviceFromFunctionInput": {
        "required": [
          "devicePointGroupFunctionName",
          "devicePointUuid"
        ],
        "type": "object",
        "properties": {
          "devicePointGroupFunctionName": {
            "maxLength": 100,
            "type": "string",
            "description": "Name of the function"
          },
          "devicePointUuid": {
            "maxLength": 32,
            "type": "string",
            "description": "Uuid of the device point"
          }
        },
        "additionalProperties": false
      },
      "Stream": {
        "type": "object",
        "properties": {
          "canRead": {
            "type": "boolean",
            "readOnly": true
          },
          "canSeek": {
            "type": "boolean",
            "readOnly": true
          },
          "canTimeout": {
            "type": "boolean",
            "readOnly": true
          },
          "canWrite": {
            "type": "boolean",
            "readOnly": true
          },
          "length": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "position": {
            "type": "integer",
            "format": "int64"
          },
          "readTimeout": {
            "type": "integer",
            "format": "int32"
          },
          "writeTimeout": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "FileStreamObject": {
        "type": "object",
        "properties": {
          "stream": {
            "$ref": "#/components/schemas/Stream"
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "fileName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MessageIdsInput": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MessageEditInput": {
        "required": [
          "description",
          "summary"
        ],
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 8192,
            "type": "string",
            "description": "new description of message"
          },
          "summary": {
            "maxLength": 50,
            "type": "string",
            "description": "new summary of message"
          }
        },
        "additionalProperties": false,
        "description": "data transfer object for editing a message in frontend representation"
      },
      "TwmsFeaturesDto": {
        "type": "object",
        "properties": {
          "display": {
            "type": "boolean"
          },
          "parameterize": {
            "type": "boolean"
          },
          "dashboard": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ReadWriteDto": {
        "type": "object",
        "properties": {
          "readable": {
            "type": "boolean"
          },
          "writable": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "AccessAuthorizationDto": {
        "type": "object",
        "properties": {
          "supervisor": {
            "type": "boolean"
          },
          "admin": {
            "type": "boolean"
          },
          "user": {
            "type": "boolean"
          },
          "guest": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ParameterDefinitionDto": {
        "type": "object",
        "properties": {
          "deviceType": {
            "type": "string",
            "nullable": true
          },
          "keyName": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "abbreviation": {
            "type": "string",
            "nullable": true
          },
          "remark": {
            "type": "string",
            "nullable": true
          },
          "twmsFeatures": {
            "$ref": "#/components/schemas/TwmsFeaturesDto"
          },
          "viptool": {
            "type": "string",
            "nullable": true
          },
          "readWrite": {
            "$ref": "#/components/schemas/ReadWriteDto"
          },
          "accessAuthorization": {
            "$ref": "#/components/schemas/AccessAuthorizationDto"
          },
          "object": {
            "type": "string",
            "nullable": true
          },
          "dataType": {
            "type": "string",
            "nullable": true
          },
          "enumOptions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "unit": {
            "type": "string",
            "nullable": true
          },
          "min": {
            "type": "number",
            "format": "double"
          },
          "max": {
            "type": "number",
            "format": "double"
          },
          "defaultValue": {
            "type": "string",
            "nullable": true
          },
          "selectableOptions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeviceParameter": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "valueType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeviceParameterFailed": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BeatE": {
        "required": [
          "uuid"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "maxLength": 32,
            "type": "string",
            "description": "Device UUID"
          },
          "autonomousHygieneCleansingIntervall": {
            "type": "integer",
            "format": "int32"
          },
          "waterFlowRate": {
            "type": "number",
            "format": "float"
          },
          "isCleaningMode": {
            "type": "integer",
            "format": "int32"
          },
          "cleaningModeDuration": {
            "type": "number",
            "format": "float"
          },
          "minimumHygieneCleansingDurationCold": {
            "type": "integer",
            "format": "int32"
          },
          "maximumHygieneCleansingDurationWarm": {
            "type": "integer",
            "format": "int32"
          },
          "hygieneCleansingTargetTemperatureWarm": {
            "type": "integer",
            "format": "int32"
          },
          "smallFlushVolume": {
            "type": "number",
            "format": "float"
          },
          "bigFlushVolume": {
            "type": "number",
            "format": "float"
          },
          "isComfortMode": {
            "type": "integer",
            "format": "int32"
          },
          "comfortFunctionTargetTemperature": {
            "type": "number",
            "format": "float"
          },
          "comfortFunctionTimeout": {
            "type": "number",
            "format": "float"
          }
        },
        "additionalProperties": false
      },
      "WallE": {
        "required": [
          "uuid"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "maxLength": 32,
            "type": "string",
            "description": "Device UUID"
          },
          "waterFlowRate": {
            "type": "number",
            "format": "float"
          },
          "isCleaningMode": {
            "type": "integer",
            "format": "int32"
          },
          "cleaningModeDuration": {
            "type": "number",
            "format": "float"
          },
          "minimumHygieneCleansingDurationCold": {
            "type": "integer",
            "format": "int32"
          },
          "maximumHygieneCleansingDurationWarm": {
            "type": "integer",
            "format": "int32"
          },
          "hygieneCleansingTargetTemperatureWarm": {
            "type": "integer",
            "format": "int32"
          },
          "maximumTemperature": {
            "type": "number",
            "format": "float"
          },
          "securityModeDuration": {
            "type": "number",
            "format": "float"
          },
          "isSecurityMode": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "WireSenstT": {
        "required": [
          "uuid"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "maxLength": 32,
            "type": "string",
            "description": "Device UUID"
          },
          "temperature": {
            "type": "number",
            "description": "Temperatur",
            "format": "float"
          },
          "temperatureLimitMin": {
            "type": "number",
            "description": "Temperatur Grenzwert min",
            "format": "float"
          },
          "temperatureLimitMax": {
            "type": "number",
            "description": "Temperatur Grenzwert max",
            "format": "float"
          },
          "timeLimitViolation": {
            "type": "integer",
            "description": "Zeit Grenzwertüberschreitung",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "WireSensP": {
        "required": [
          "uuid"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "maxLength": 32,
            "type": "string",
            "description": "Device UUID"
          },
          "timeLimitViolation": {
            "type": "integer",
            "description": "Zeit Grenzwertüberschreitung",
            "format": "int32"
          },
          "pressureValue": {
            "type": "number",
            "description": "Druckwert",
            "format": "float"
          },
          "pressureValueLimitMin": {
            "type": "number",
            "description": "Druck Grenzwert min",
            "format": "float"
          },
          "pressureValueLimitMax": {
            "type": "number",
            "description": "Druck Grenzwert max",
            "format": "float"
          }
        },
        "additionalProperties": false
      },
      "WireSensVT": {
        "required": [
          "uuid"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "maxLength": 32,
            "type": "string",
            "description": "Device UUID"
          },
          "temperature": {
            "type": "number",
            "description": "Temperatur",
            "format": "float"
          },
          "temperatureLimitMin": {
            "type": "number",
            "description": "Temperatur Grenzwert min",
            "format": "float"
          },
          "temperatureLimitMax": {
            "type": "number",
            "description": "Temperatur Grenzwert max",
            "format": "float"
          },
          "timeLimitViolation": {
            "type": "integer",
            "description": "Zeit Grenzwertüberschreitung",
            "format": "int32"
          },
          "flowRateValue": {
            "type": "number",
            "description": "Durchfluss",
            "format": "float"
          },
          "flowRateValueLimitMin": {
            "type": "number",
            "description": "Durchfluss Grenzwert min",
            "format": "float"
          },
          "flowRateValueLimitMax": {
            "type": "number",
            "description": "Durchfluss Grenzwert max",
            "format": "float"
          },
          "counter": {
            "type": "integer",
            "description": "Zähler",
            "format": "int32"
          },
          "timeIncrement": {
            "type": "integer",
            "description": "Zeitinkrement",
            "format": "int32"
          },
          "nominalRange": {
            "type": "integer",
            "description": "Nennweite",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DTE": {
        "required": [
          "uuid"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "maxLength": 32,
            "type": "string",
            "description": "Device UUID"
          },
          "secondaryActualPWH": {
            "type": "number",
            "description": "Sekundärseite PWH (Ist)",
            "format": "float"
          },
          "secondaryTargetPWH": {
            "type": "number",
            "description": "Sekundärseite PWH (Soll)",
            "format": "float"
          },
          "secondaryActualTemperaturePWHPWHC": {
            "type": "number",
            "description": "Sekundärseite Mischtemp. PWH + PWH-C (ist)",
            "format": "float"
          },
          "secondaryActualTemperaturePWHC": {
            "type": "number",
            "description": "Sekundärseite Temperatur PWH-C (ist)",
            "format": "float"
          },
          "secondaryActualVolumeRatePWHPWHC": {
            "type": "number",
            "description": "Sekundärseite Volumenstrom PWH + PWH-C (Ist)",
            "format": "float"
          },
          "primaryTemperatureVL": {
            "type": "number",
            "description": "Primärseite Temperatur VL (Ist)",
            "format": "float"
          },
          "primaryUpperPumpPower": {
            "type": "number",
            "description": "Primärseite Pumpe Oben (Leistung)",
            "format": "float"
          },
          "primaryLowerPumpPower": {
            "type": "number",
            "description": "Primärseite Pumpe Unten (Leistung)",
            "format": "float"
          },
          "isActiveCircPump": {
            "type": "integer",
            "description": "Zirkulationspumpe (An/Aus)",
            "format": "int32"
          },
          "isActiveRegulation": {
            "type": "integer",
            "description": "Zirkulationspumpe (An/Aus)",
            "format": "int32"
          },
          "actualPWHTemperature": {
            "type": "number",
            "description": "Soll Temperatur PWH",
            "format": "float"
          },
          "isCircPumpConnected": {
            "type": "number",
            "description": "Zirkulationspumpe angeschlossen",
            "format": "float"
          },
          "circPumpMode": {
            "type": "integer",
            "description": "Zirkulationspumpe An/Aus",
            "format": "int32"
          },
          "dteVariant": {
            "type": "integer",
            "description": "DTE Variante",
            "format": "int32"
          },
          "isUfcConnected": {
            "type": "integer",
            "description": "UFC angeschlossen",
            "format": "int32"
          },
          "factoryReset": {
            "type": "integer",
            "description": "Werkseinstellungen wieder herstellen",
            "format": "int32"
          },
          "switchNormalModeDisinfectionMode": {
            "type": "integer",
            "description": "Umschaltung Normabetrieb / Thermischer Desinfektionsmodus",
            "format": "int32"
          },
          "switchNormalModeBasicMode": {
            "type": "integer",
            "description": "Umschaltung Normalbetrieb / Grundbetrieb",
            "format": "int32"
          },
          "functionTestControlPWHOnOffOne": {
            "type": "integer",
            "description": "Funktionstest: Regelung PWH an/aus",
            "format": "int32"
          },
          "functionTestControlPWHOnOffTwo": {
            "type": "integer",
            "description": "Funktionstest: Regelung PWH an/aus",
            "format": "int32"
          },
          "functionTestUpperPumpTrigger": {
            "type": "number",
            "description": "Funktionstest: Pumpe oben ansteuern",
            "format": "float"
          },
          "functionTestLowerPumpTrigger": {
            "type": "number",
            "description": "Funktionstest: Pumpe unten ansteuern",
            "format": "float"
          }
        },
        "additionalProperties": false
      },
      "Rulantica": {
        "required": [
          "uuid"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "maxLength": 32,
            "type": "string",
            "description": "Device UUID"
          },
          "temperature": {
            "type": "number",
            "description": "Temperature an TLC Temperature",
            "format": "float",
            "nullable": true
          },
          "position": {
            "type": "number",
            "description": "Positionsbefehl an TLC Temperature",
            "format": "float",
            "nullable": true
          },
          "magnetValve": {
            "type": "number",
            "description": "Magnetventile setzen",
            "format": "float",
            "nullable": true
          },
          "warmup": {
            "type": "number",
            "description": "Warm-Up",
            "format": "float",
            "nullable": true
          },
          "targetFlowRate": {
            "type": "number",
            "description": "Soll-Durchfluss",
            "format": "float",
            "nullable": true
          },
          "watchdog": {
            "type": "number",
            "description": "Watchdog setzen",
            "format": "float",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ZirkE": {
        "required": [
          "uuid"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "maxLength": 32,
            "type": "string",
            "description": "Device UUID"
          },
          "functionTestExecutionStart": {
            "type": "integer",
            "description": "Funktionstest ausführen",
            "format": "int32"
          },
          "functionTestFinished": {
            "type": "integer",
            "description": "Funktionstest beendet",
            "format": "int32"
          },
          "thermalDisinfectionSwitchMode": {
            "type": "integer",
            "description": "Thermische Desinfektion \\\"Offen\\\" oder \\\"Geschlossen\\\" auslösen",
            "format": "int32"
          },
          "startSelfCleaning": {
            "type": "integer",
            "description": "Selbstreinigungsfunktion auslösen",
            "format": "int32"
          },
          "targetTemperaturePWHC": {
            "type": "number",
            "description": "Solltemperatur PWH-C",
            "format": "float"
          },
          "targetTemperaturePWCC": {
            "type": "number",
            "description": "Solltemperatur PWC-C",
            "format": "float"
          },
          "selectWarmWaterCirculationPWHC": {
            "type": "integer",
            "description": "Auswahl Warmwasserzirkulation PWH-C",
            "format": "int32"
          },
          "selectColdWaterCirculationPWCC": {
            "type": "integer",
            "description": "Auswahl Kaltwasserzirkulation PWC-C",
            "format": "int32"
          },
          "temperaturePWHC": {
            "type": "number",
            "description": "Temperatur PWH-C",
            "format": "float"
          },
          "temperaturePWCC": {
            "type": "number",
            "description": "Temperatur PWC-C",
            "format": "float"
          },
          "variablePWHC": {
            "type": "number",
            "description": "Stellgröße PWH-C",
            "format": "float"
          },
          "variablePWCC": {
            "type": "number",
            "description": "Stellgröße PWC-C",
            "format": "float"
          },
          "lowerLimitVariablePWHC": {
            "type": "number",
            "description": "Unteres Limit Stellgröße PWH-C",
            "format": "float"
          },
          "upperLimitVariablePWHC": {
            "type": "number",
            "description": "Oberes Limit Stellgröße PWH-C",
            "format": "float"
          },
          "lowerLimitVariablePWCC": {
            "type": "number",
            "description": "Unteres Limit Stellgröße PWC-C",
            "format": "float"
          },
          "upperLimitVariablePWCC": {
            "type": "number",
            "description": "Oberes Limit Stellgröße PWC-C",
            "format": "float"
          },
          "parameterNeutralZonePWHC": {
            "type": "number",
            "description": "Parameter Neutrale Zone PWH-C",
            "format": "float"
          },
          "parameterNeutralZonePWCC": {
            "type": "number",
            "description": "Parameter Neutrale Zone PWC-C",
            "format": "float"
          },
          "parameterProportionalPartPWHC": {
            "type": "number",
            "description": "Parameter Proportionalanteil PWH-C",
            "format": "float"
          },
          "parameterProportionalPartPWCC": {
            "type": "number",
            "description": "Parameter Proportionalanteil PWC-C",
            "format": "float"
          },
          "parameterPostTimePWHC": {
            "type": "number",
            "description": "Parameter Nachstellzeit PWH-C",
            "format": "float"
          },
          "parameterPostTimePWCC": {
            "type": "number",
            "description": "Parameter Nachstellzeit PWC-C",
            "format": "float"
          },
          "parameterPreTimePWHC": {
            "type": "number",
            "description": "Parameter Vorhaltezeit PWH-C",
            "format": "float"
          },
          "parameterPreTimePWCC": {
            "type": "number",
            "description": "Parameter Vorhaltezeit PWC-C",
            "format": "float"
          },
          "callingIntervallPWHCController": {
            "type": "number",
            "description": "Aufrufintervall PWH-C Regler",
            "format": "float"
          },
          "callingIntervallPWCCController": {
            "type": "number",
            "description": "Aufrufintervall PWC-C Regler",
            "format": "float"
          },
          "parameterAntiWindupPWHC": {
            "type": "number",
            "description": "Parameter Anti-Windup PWH-C",
            "format": "float"
          },
          "parameterAntiWindupPWCC": {
            "type": "number",
            "description": "Parameter Anti-Windup PWC-C",
            "format": "float"
          },
          "switchAutomaticManualModePWHC": {
            "type": "integer",
            "description": "Auswahl Automatischer/Manueller Betrieb PWH-C",
            "format": "int32"
          },
          "switchAutomaticManualModePWCC": {
            "type": "integer",
            "description": "Auswahl Automatischer/Manueller Betrieb PWC-C",
            "format": "int32"
          },
          "manualVariablePWHC": {
            "type": "number",
            "description": "Manuelle Stellgröße PWH-C",
            "format": "float"
          },
          "manualVariablePWCC": {
            "type": "number",
            "description": "Manuelle Stellgröße PWC-C",
            "format": "float"
          }
        },
        "additionalProperties": false
      },
      "DeviceParameterValuesOutputDto": {
        "type": "object",
        "properties": {
          "beateDTO": {
            "$ref": "#/components/schemas/BeatE"
          },
          "walleDTO": {
            "$ref": "#/components/schemas/WallE"
          },
          "wireSensTDTO": {
            "$ref": "#/components/schemas/WireSenstT"
          },
          "wireSensPDTO": {
            "$ref": "#/components/schemas/WireSensP"
          },
          "wireSensVTDTO": {
            "$ref": "#/components/schemas/WireSensVT"
          },
          "dteDTO": {
            "$ref": "#/components/schemas/DTE"
          },
          "rulanticaDTO": {
            "$ref": "#/components/schemas/Rulantica"
          },
          "zirkEDTO": {
            "$ref": "#/components/schemas/ZirkE"
          }
        },
        "additionalProperties": false
      },
      "PointAddressCreateInput": {
        "type": "object",
        "properties": {
          "building": {
            "maxLength": 50,
            "type": "string",
            "description": "Building of a point address",
            "nullable": true
          },
          "area": {
            "maxLength": 50,
            "type": "string",
            "description": "Area of a point address",
            "nullable": true
          },
          "room": {
            "maxLength": 50,
            "type": "string",
            "description": "Room of a point address",
            "nullable": true
          },
          "segment": {
            "maxLength": 50,
            "type": "string",
            "description": "Segment of a point address",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "data transfer object for creating a new device point address in frontend representation"
      },
      "PointAddressEditInput": {
        "type": "object",
        "properties": {
          "building": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "area": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "room": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "segment": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "newBuilding": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "newArea": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "newRoom": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "newSegment": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProjectPersonMetaData": {
        "required": [
          "company",
          "emailAddress",
          "firstName",
          "lastName",
          "place",
          "postalCode",
          "street",
          "telephone"
        ],
        "type": "object",
        "properties": {
          "company": {
            "maxLength": 100,
            "type": "string"
          },
          "place": {
            "maxLength": 100,
            "type": "string"
          },
          "postalCode": {
            "pattern": "^[0-9]+$",
            "type": "string"
          },
          "street": {
            "maxLength": 100,
            "type": "string"
          },
          "title": {
            "maxLength": 100,
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "maxLength": 100,
            "type": "string"
          },
          "lastName": {
            "maxLength": 100,
            "type": "string"
          },
          "telephone": {
            "pattern": "^[0-9-+() ]{5,}$",
            "type": "string"
          },
          "emailAddress": {
            "type": "string",
            "format": "email"
          }
        },
        "additionalProperties": false
      },
      "ProjectBaseData": {
        "required": [
          "name",
          "place",
          "postalCode",
          "projectInstalledBy",
          "projectResponsible",
          "street"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string"
          },
          "place": {
            "maxLength": 100,
            "type": "string"
          },
          "postalCode": {
            "pattern": "^[0-9]+$",
            "type": "string"
          },
          "street": {
            "maxLength": 100,
            "type": "string"
          },
          "imageUrl": {
            "maxLength": 1000,
            "type": "string",
            "nullable": true
          },
          "projectResponsible": {
            "$ref": "#/components/schemas/ProjectPersonMetaData"
          },
          "projectInstalledBy": {
            "$ref": "#/components/schemas/ProjectPersonMetaData"
          }
        },
        "additionalProperties": false
      },
      "ProjectBaseDataInput": {
        "required": [
          "name",
          "place",
          "postalCode",
          "projectInstalledBy",
          "projectResponsible",
          "street"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "type": "string"
          },
          "place": {
            "maxLength": 100,
            "type": "string"
          },
          "postalCode": {
            "pattern": "^[0-9]+$",
            "type": "string"
          },
          "street": {
            "maxLength": 100,
            "type": "string"
          },
          "projectResponsible": {
            "$ref": "#/components/schemas/ProjectPersonMetaData"
          },
          "projectInstalledBy": {
            "$ref": "#/components/schemas/ProjectPersonMetaData"
          }
        },
        "additionalProperties": false
      },
      "ItemPoint": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "isDisabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Segment": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemPoint"
            },
            "nullable": true
          },
          "name": {
            "maxLength": 100,
            "type": "string"
          },
          "pointAddressUuid": {
            "maxLength": 32,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Room": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "segments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Segment"
            },
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemPoint"
            },
            "nullable": true
          },
          "name": {
            "maxLength": 100,
            "type": "string"
          },
          "pointAddressUuid": {
            "maxLength": 32,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Area": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "rooms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Room"
            },
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemPoint"
            },
            "nullable": true
          },
          "name": {
            "maxLength": 100,
            "type": "string"
          },
          "pointAddressUuid": {
            "maxLength": 32,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Building": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "areas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Area"
            },
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemPoint"
            },
            "nullable": true
          },
          "name": {
            "maxLength": 100,
            "type": "string"
          },
          "pointAddressUuid": {
            "maxLength": 32,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProjectStructure": {
        "type": "object",
        "properties": {
          "buildings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Building"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SessionLoginInput": {
        "required": [
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "maxLength": 100,
            "type": "string",
            "description": "Gets or Sets Username"
          },
          "password": {
            "maxLength": 50,
            "type": "string",
            "description": "Gets or Sets Password"
          }
        },
        "additionalProperties": false,
        "description": "Credentials needed for new session"
      },
      "SessionProfile": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "nullable": true
          },
          "sid": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "nullable": true
          },
          "userUUID": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "authTime": {
            "type": "integer",
            "format": "int64"
          },
          "authorityTemplateName": {
            "$ref": "#/components/schemas/AuthorityTemplateNames"
          },
          "isRequiredToChangePassword": {
            "type": "boolean"
          },
          "isMoreThanOnePrivilegedSessionOpen": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserLockedresponse": {
        "type": "object",
        "properties": {
          "errorType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "NetworkInterfaceInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "isUp": {
            "type": "boolean"
          },
          "isLoopbak": {
            "type": "boolean"
          },
          "macAddress": {
            "type": "string",
            "nullable": true
          },
          "ipAddressV4": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "subnetmaskV4": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "ipAddressV6": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "prefixLengthV6": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "mtuIpV4": {
            "type": "integer",
            "format": "int32"
          },
          "mtuIpV6": {
            "type": "integer",
            "format": "int32"
          },
          "gatewayAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "dhcpAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "dnsSuffix": {
            "type": "string",
            "nullable": true
          },
          "dnsAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NetworkInfo": {
        "type": "object",
        "properties": {
          "networkInterfaceInformationList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NetworkInterfaceInfo"
            },
            "nullable": true
          },
          "hostname": {
            "type": "string",
            "nullable": true
          },
          "domainname": {
            "type": "string",
            "nullable": true
          },
          "ntpServerAddress": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SystemInfo": {
        "type": "object",
        "properties": {
          "orderNumber": {
            "type": "string",
            "description": "Is fixed number defined by Viega",
            "nullable": true
          },
          "networkInformation": {
            "$ref": "#/components/schemas/NetworkInfo"
          },
          "firmwareRevision": {
            "type": "string",
            "description": "Fireware revision of the image",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DriveInfoObject": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Drive e.g. C:\\ on windows",
            "nullable": true
          },
          "driveFormat": {
            "type": "string",
            "description": "File system like NTFS",
            "nullable": true
          },
          "availableFreeSpace": {
            "type": "integer",
            "description": "This property indicates the amount of free space available on the drive. Note that this number may be different from the TotalFreeSpace number because this property takes into account disk quotas.\r\nSize in bytes",
            "format": "int64"
          },
          "totalFreeSpace": {
            "type": "integer",
            "description": "This property indicates the total amount of free space available on the drive, not just what is available to the current user.\r\nSize in bytes",
            "format": "int64"
          },
          "totalSize": {
            "type": "integer",
            "description": "Size in bytes",
            "format": "int64"
          },
          "driveType": {
            "type": "string",
            "description": "/e.g. Fixed, Removable, Network",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EthernetConfigurationInput": {
        "type": "object",
        "properties": {
          "enableInterface": {
            "type": "boolean",
            "nullable": true
          },
          "enableAutonegotiation": {
            "type": "boolean",
            "nullable": true
          },
          "macAddressFilter": {
            "type": "string",
            "nullable": true
          },
          "fastAging": {
            "type": "string",
            "nullable": true
          },
          "ethernetMtu": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ipAddress": {
            "type": "string",
            "description": "Could be IP v4 or v6",
            "nullable": true
          },
          "prefixLength": {
            "type": "integer",
            "description": "Get set together with the IpAddress\r\nConversion",
            "format": "int32",
            "nullable": true
          },
          "gateway": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Configuration parameters for one ethernet interface"
      },
      "SntpConfiguration": {
        "type": "object",
        "properties": {
          "serverHostName": {
            "type": "string",
            "description": "(S)NTP-Server Host Name Or IP Address",
            "nullable": true
          },
          "enable": {
            "type": "boolean",
            "description": "„Simple Network Time Protocol“ aktivieren",
            "nullable": true
          },
          "updateTime": {
            "type": "string",
            "description": "(sec.max. 65535)",
            "nullable": true
          },
          "port123Enabled": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Configuration for sntp-client"
      },
      "ControllerConfiguration": {
        "type": "object",
        "properties": {
          "hostName": {
            "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$",
            "type": "string",
            "nullable": true
          },
          "domainName": {
            "pattern": "^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\\.[a-zA-Z]{2,}$",
            "type": "string",
            "nullable": true
          },
          "dnsServer": {
            "type": "string",
            "nullable": true
          },
          "alternativeDnsServer": {
            "type": "string",
            "description": "Get set together with FirstDnsServer\r\nConversion",
            "nullable": true
          },
          "ipFragmentTtl": {
            "type": "integer",
            "description": "(sec.max. 255)",
            "format": "int32",
            "nullable": true
          },
          "sntpConfiguration": {
            "$ref": "#/components/schemas/SntpConfiguration"
          },
          "sftpPathProjectFile": {
            "type": "string",
            "nullable": true
          },
          "sftpPathProtocol": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Controller configuration parameters, e.g. hostname, domainname etc."
      },
      "TimeConfiguration": {
        "type": "object",
        "properties": {
          "timezone": {
            "type": "number",
            "description": "Set the timezone of the controller clock\r\nhttps://en.wikipedia.org/wiki/List_of_UTC_time_offsets",
            "format": "double",
            "nullable": true
          },
          "currentTime": {
            "type": "string",
            "description": "The time of the controller is updated to this timestamp",
            "nullable": true
          },
          "activateDst": {
            "type": "boolean",
            "description": "Activate/deactivate the Daylight Saving Time (DST)",
            "nullable": true
          },
          "dateTimeFormat": {
            "type": "string",
            "description": "Set the DateTimeFormat, e.g. german layout \"dd.MM.yyyy HH:mm:ss.fff\"\r\nAt the moment their is only",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmailConfiguration": {
        "type": "object",
        "properties": {
          "host": {
            "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$",
            "type": "string",
            "nullable": true
          },
          "port": {
            "type": "integer",
            "format": "int32"
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "attchmentMaxBytes": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SftpConfiguration": {
        "type": "object",
        "properties": {
          "host": {
            "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$",
            "type": "string",
            "nullable": true
          },
          "port": {
            "type": "integer",
            "format": "int32"
          },
          "username": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "destinationPath": {
            "type": "string",
            "nullable": true
          },
          "fingerprint": {
            "type": "string",
            "nullable": true
          },
          "passphrase": {
            "type": "string",
            "nullable": true
          },
          "privateKeyPath": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SystemConfigInput": {
        "type": "object",
        "properties": {
          "ethernetConfigurationEth0": {
            "$ref": "#/components/schemas/EthernetConfigurationInput"
          },
          "ethernetConfigurationEth1": {
            "$ref": "#/components/schemas/EthernetConfigurationInput"
          },
          "controllerConfiguration": {
            "$ref": "#/components/schemas/ControllerConfiguration"
          },
          "timeConfiguration": {
            "$ref": "#/components/schemas/TimeConfiguration"
          },
          "emailConfiguration": {
            "$ref": "#/components/schemas/EmailConfiguration"
          },
          "sftpConfiguration": {
            "$ref": "#/components/schemas/SftpConfiguration"
          },
          "language": {
            "pattern": "^german|english$",
            "type": "string",
            "description": "german or english",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SystemConfigDto": {
        "type": "object",
        "properties": {
          "ethernetConfigurationEth0": {
            "$ref": "#/components/schemas/EthernetConfigurationInput"
          },
          "ethernetConfigurationEth1": {
            "$ref": "#/components/schemas/EthernetConfigurationInput"
          },
          "controllerConfiguration": {
            "$ref": "#/components/schemas/ControllerConfiguration"
          },
          "timeConfiguration": {
            "$ref": "#/components/schemas/TimeConfiguration"
          },
          "emailConfiguration": {
            "$ref": "#/components/schemas/EmailConfiguration"
          },
          "sftpConfiguration": {
            "$ref": "#/components/schemas/SftpConfiguration"
          },
          "language": {
            "pattern": "^german|english$",
            "type": "string",
            "description": "german or english",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmailSecurityError": {
        "enum": [
          "SmtpUnsafe",
          "ConnectionError"
        ],
        "type": "string"
      },
      "SftpSecurityError": {
        "enum": [
          "KeyExchangeAlgorithmUnsafe",
          "EncryptionAlgorithmUnsafe",
          "HmacAlgorithmUnsafe",
          "HostKeyAlgorithmUnsafe",
          "MissingFingerprint",
          "FingerprintDoesNotMatch",
          "MissingPrivateKey",
          "ConnectionError"
        ],
        "type": "string"
      },
      "ControllerUpdateError": {
        "enum": [
          "UpdateNotStartedYet",
          "UpdateRunning",
          "MockUpdateSuccessfulWindows",
          "UpdateSuccessfulRebooting",
          "UploadFileFailed",
          "UpdateFailedUnknownReason",
          "RaucInfoFailed",
          "UpdateFileProductIdWrongFormat",
          "CannotReadControllerSerialNumber",
          "ProductIdIsNotMatching",
          "UnableToGetLocalIssuerCertifcate",
          "UnableToGetIssuerCertificate",
          "InvalidCertificate",
          "UpdatedAlreadyInstalled",
          "UpdateIsOlderThanCurrentVersion",
          "DecryptingUpdateFileFailed"
        ],
        "type": "string"
      },
      "ControllerUpdateStatus": {
        "type": "object",
        "properties": {
          "controllerUpdateError": {
            "$ref": "#/components/schemas/ControllerUpdateError"
          },
          "additionalErrorInformation": {
            "type": "string",
            "description": "e.g. StandardErrorOutput",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserOutputDto": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "nullable": true
          },
          "loginName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "authorityTemplateName": {
            "$ref": "#/components/schemas/AuthorityTemplateNames"
          },
          "lastLoginTimestamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isLocked": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "UserCreateInput": {
        "required": [
          "authorityTemplateName",
          "email",
          "firstName",
          "lastName",
          "loginName",
          "password"
        ],
        "type": "object",
        "properties": {
          "loginName": {
            "maxLength": 100,
            "pattern": "^[^<>!@#%/]+$",
            "type": "string"
          },
          "password": {
            "pattern": "^(?=(.*[a-z]){1,})(?=(.*[\\d]){1,})(?=(.*[\\W]){1,})(?!.*\\s).{6,1000}$",
            "type": "string"
          },
          "passwordConfirmation": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "maxLength": 100,
            "type": "string"
          },
          "firstName": {
            "maxLength": 100,
            "type": "string"
          },
          "email": {
            "maxLength": 254,
            "type": "string",
            "format": "email"
          },
          "authorityTemplateName": {
            "$ref": "#/components/schemas/AuthorityTemplateNames"
          }
        },
        "additionalProperties": false
      },
      "UserUpdateOwnMetadataInput": {
        "required": [
          "email",
          "firstName",
          "lastName",
          "loginName"
        ],
        "type": "object",
        "properties": {
          "loginName": {
            "maxLength": 100,
            "pattern": "^[^<>!@#%/]+$",
            "type": "string"
          },
          "lastName": {
            "maxLength": 100,
            "type": "string"
          },
          "firstName": {
            "maxLength": 100,
            "type": "string"
          },
          "email": {
            "maxLength": 254,
            "type": "string",
            "format": "email"
          }
        },
        "additionalProperties": false
      },
      "UserUpdateAnyMetadataInput": {
        "required": [
          "email",
          "firstName",
          "lastName",
          "loginName"
        ],
        "type": "object",
        "properties": {
          "loginName": {
            "maxLength": 100,
            "type": "string"
          },
          "lastName": {
            "maxLength": 100,
            "type": "string"
          },
          "firstName": {
            "maxLength": 100,
            "type": "string"
          },
          "email": {
            "maxLength": 254,
            "type": "string",
            "format": "email"
          }
        },
        "additionalProperties": false
      },
      "UserUpdatePasswordInput": {
        "required": [
          "newPassword",
          "oldPassword"
        ],
        "type": "object",
        "properties": {
          "oldPassword": {
            "type": "string"
          },
          "newPassword": {
            "pattern": "^(?=(.*[a-z]){1,})(?=(.*[\\d]){1,})(?=(.*[\\W]){1,})(?!.*\\s).{6,1000}$",
            "type": "string"
          },
          "newPasswordConfirmation": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserResetPasswordInput": {
        "required": [
          "managerPassword",
          "password"
        ],
        "type": "object",
        "properties": {
          "managerPassword": {
            "type": "string"
          },
          "password": {
            "pattern": "^(?=(.*[a-z]){1,})(?=(.*[\\d]){1,})(?=(.*[\\W]){1,})(?!.*\\s).{6,1000}$",
            "type": "string"
          },
          "passwordConfirmation": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserSetAuthorityTemplateInput": {
        "required": [
          "authorityTemplateName",
          "managerPassword"
        ],
        "type": "object",
        "properties": {
          "managerPassword": {
            "type": "string"
          },
          "authorityTemplateName": {
            "$ref": "#/components/schemas/AuthorityTemplateNames"
          }
        },
        "additionalProperties": false
      },
      "SetUserDisabledTimestampInput": {
        "required": [
          "targetLoginName"
        ],
        "type": "object",
        "properties": {
          "disabledTimestamp": {
            "maxLength": 27,
            "type": "string",
            "nullable": true
          },
          "targetLoginName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AuthorityCodes": {
        "enum": [
          "CHANGE_ANY_PASSWORD",
          "CHANGE_OWN_PASSWORD",
          "CHANGE_TWMS_PASSWORD_POLICY",
          "CHECK_ANY_USER_EXISTS",
          "CREATE_ANY_USER",
          "DELETE_ANY_USER",
          "EDIT_ANY_USER",
          "EDIT_OWN_USER",
          "LOGIN_OWN_USER",
          "LOGOUT_ANY_USER",
          "LOGOUT_OWN_USER",
          "REGISTER_TWMS",
          "REGISTER_AUTHORITY_TEMPLATE_ANY_USER",
          "RESET_ANY_USER_LOCK",
          "SET_ANY_USER_LOCK",
          "SETUP_TWMS",
          "SHOW_ALL_USERS",
          "SHOW_OWN_USER",
          "UNREGISTER_AUTHORITY_TEMPLATE_ANY_USER",
          "CREATE_CLIQUE",
          "DELETE_CLIQUE",
          "READ_CLIQUES",
          "UPDATE_CLIQUE",
          "UPDATE_USER_ANY_CLIQUE",
          "HAS_USER_SAME_CLIQUE_NAME",
          "POST_IMAGE",
          "DELETE_IMAGE",
          "UPDATE_FIRMWARE_CONTROLLER",
          "GET_SESSION",
          "SHOW_ALL_ACTIVE_SESSIONS",
          "NO_BODY_HAS_THIS_CODE_TESTING_PURPOES",
          "CREATE_NEW_MESSAGE",
          "EDIT_MESSAGE_OWN",
          "EDIT_MESSAGE_ANY",
          "SHOW_MESSAGES",
          "VIEW_MESSAGE",
          "UNVIEW_MESSAGE",
          "ACKNOWLEDGE_MESSAGE",
          "UNACKNOWLEDGE_MESSAGE",
          "FIX_MESSAGE",
          "UNFIX_MESSAGE",
          "SET_ANY_MESSAGE_DELETE_MARK",
          "RESET_ANY_MESSAGE_DELETE_MARK",
          "SET_OWN_MESSAGE_DELETE_MARK",
          "RESET_OWN_MESSAGE_DELETE_MARK",
          "DELETE_MESSAGE",
          "EXECUTE_FUNCTION",
          "ASSIGN_FUNCTION",
          "REMOVE_FUNCTION",
          "COMBINE_CONDITIONS",
          "STOP_FUNCTION",
          "DEACTIVATE_CLEANING",
          "CREATE_DEVICE_POINT_GROUP_FUNCTION",
          "READ_DEVICE_POINT_GROUP_FUNCTION",
          "READ_DEVICE_POINT_GROUP_FUNCTIONS",
          "DELETE_DEVICE_POINT_GROUP_FUNCTION",
          "UPDATE_DEVICE_POINT_GROUP_FUNCTION",
          "SET_DEVICE_POINT_GROUP_FUNCTION_DISABLED",
          "RESET_DEVICE_POINT_GROUP_FUNCTION_DISABLED",
          "EXECUTE_FUNCTION_TEST",
          "GET_DATA_LOG",
          "GET_REPORT_SERVICES",
          "SET_REPORT_SERVICES",
          "DELETE_REPORT_SERVICES",
          "GET_ALL_REPORT_SERVICES",
          "DELETE_ALL_REPORT_SERVICES",
          "EXECUTE_REPORT_SERVICES",
          "EXECUTE_ALL_REPORT_SERVICES",
          "UPLOAD_LOCAL_REPORTS",
          "GET_LOCAL_REPORTS",
          "GET_ALL_LOCAL_REPORTS",
          "DELETE_ALL_LOCAL_REPORTS",
          "SEND_EMAIL_REPORTS",
          "RESET_ACTIVATION",
          "GET_DEVICE",
          "CREATE_DEVICE",
          "SET_DEVICE",
          "DELETE_DEVICE",
          "FIND_DEVICE",
          "AUTOMATIC_FIND_DEVICE",
          "CONNECT_DEVICE",
          "REPLACE_DEVICE",
          "UPDATE_DEVICE",
          "LOCATE_DEVICE",
          "UPGRADE_DEVICE",
          "ACTIVATE_DEACTIVATE_DEVICE",
          "TRANSFER_FUNCTION_DEVICE",
          "FACTORY_RESET_DEVICE",
          "GET_DEVICE_POINT_LIST",
          "GET_DEVICE_POINT",
          "CREATE_DEVICE_POINT",
          "SET_DEVICE_POINT",
          "CREATE_POINT_ADDRESS",
          "GET_POINT_ADDRESS_LIST",
          "EDIT_ANY_POINT_ADDRESS",
          "SET_POINT_ADDRESS",
          "DELETE_POINT_ADDRESS",
          "CREATE_CONTROLLER",
          "GET_CONTROLLER_LIST",
          "GET_CONTROLLER",
          "DELETE_CONTROLLER",
          "UPDATE_CONTROLLER",
          "CREATE_CONTROLLER_POINT",
          "GET_CONTROLLER_POINT_LIST",
          "GET_CONTROLLER_POINT",
          "DELETE_CONTROLLER_POINT",
          "SET_CONTROLLER_POINT",
          "CREATE_DEVICE_TYPE",
          "DELETE_DEVICE_FIRMWARE",
          "DELETE_DEVICE_TYPE",
          "CREATE_DEVICE_FIRMWARE",
          "IS_POINT_ADDRESS_EXISTS",
          "GET_POINT_ADDRESS",
          "SET_CONTROLLER",
          "GET_DEVICE_LIST",
          "SET_CONTROLLER_CLIQUE",
          "INSTALL_CONTROLLER_TO_CONTROLLER_POINT",
          "UNINSTALL_CONTROLLER_FROM_CONTROLLER_POINT",
          "IS_DEVICE_TYPE_EXISTS",
          "INSTALL_DEVICE_TO_DEVICE_POINT",
          "UNINSTALL_DEVICE_FROM_DEVICE_POINT",
          "SET_POINT_ADDRESS_CLIQUE",
          "ASSIGN_POINT_ADDRESS_TO_CONTROLLER_POINT",
          "ASSIGN_POINT_ADDRESS_TO_DEVICE_POINT",
          "UNASSIGN_POINT_ADDRESS_FROM_CONTROLLER_POINT",
          "UNASSIGN_POINT_ADDRESS_FROM_DEVICE_POINT",
          "IS_DEVICE_POINT_EXISTS",
          "UNASSIGN_FIRMWARE_FROM_DEVICE",
          "ASSIGN_FIRMWARE_TO_DEVICE",
          "GET_DEVICE_FIRMWARE_LIST",
          "GET_DEVICE_FIRMWARE",
          "ASSIGN_CONTROLLER_POINT_TO_DEVICE_POINT",
          "UNASSIGN_CONTROLLER_POINT_FROM_DEVICE_POINT",
          "GET_DEVICE_STATUS",
          "REBOOT_CONTROLLER",
          "SET_IP_ADDRESS",
          "GET_COMPATIBLE_DEVICES",
          "GET_COMPATIBLE_FUNCTIONS",
          "STATUS_LSS",
          "START_LSS",
          "SET_DEVICE_MAINTENANCE_INTERVAL",
          "EXECUTE_DEVICE_MAINTENANCE",
          "SHOW_SYSTEM_STATUS",
          "CONFIGURE_TWMS_SYSTEM",
          "SHOW_SYSTEM_CONFIG",
          "CREATE_PROJECT",
          "SHOW_PROJECT_INFORMATION",
          "EXPORT_PROJECT",
          "IMPORT_PROJECT",
          "GET_PARAMETER_DEFINITION",
          "GET_PARAMETER_VALUE",
          "SET_PARAMETER_VALUE",
          "VIEW_EVENT_TYPE_SYSTEM_FAULT",
          "VIEW_EVENT_TYPE_SYSTEM_EVENT",
          "VIEW_EVENT_TYPE_MAINTENANCE",
          "VIEW_EVENT_TYPE_FUNCTION",
          "VIEW_EVENT_TYPE_FATAL_PERSISTANT_SYSTEM_FAILURE",
          "VIEW_EVENT_TYPE_EVENT",
          "VIEW_EVENT_TYPE_DISRUPTION",
          "VIEW_EVENT_TYPE_ALARM",
          "EXECUTE_PRODUCTION_FUNCTION_TEST",
          "SHOW_CIRCULATION_UFC_AVAILABLE_FIELD",
          "ACTIVATE_FUNCTION",
          "ADD_DEVICE_POINT_TO_GROUP_FUNCTION",
          "ASSIGN_EVENT",
          "ASSIGN_FUNCTION_TEMPLATE_TO_GROUP_FUNCTION",
          "CONFIGURE_CONTROLLER",
          "DEACTIVATE_FUNCTION",
          "DEFINE_PARAMETER_ADMIN_USER",
          "DEFINE_PARAMETER_ALL",
          "DEFINE_PARAMETER_SUPERUSER",
          "DELETE_CLIQUE_REPORT_SERVICES",
          "DELETE_DEVICE_POINT",
          "DELETE_PREFERENCE",
          "DELETE_PREFERENCES",
          "DELETE_USER_PREFERENCE",
          "DELETE_USER_PREFERENCES",
          "EDIT_MESSAGE",
          "EDIT_OWN_POINT_ADDRESS",
          "GET_CLIQUE_REPORT_SERVICES",
          "GET_DEVICE_POINT_NODE_ID_BY_UUID",
          "GET_DEVICE_TYPE_LIST",
          "GET_HISTORICAL_DEVICES_OF_DEVICE_POINT",
          "GET_HISTORICAL_DEVICE_POINTS_OF_DEVICE",
          "GET_LIVEVIEW",
          "INFORM_ALL",
          "IS_CONTROLLER_EXISTS",
          "IS_CONTROLLER_POINT_EXISTS",
          "IS_DEVICE_EXISTS",
          "IS_DEVICE_FIRMWARE_EXISTS",
          "READ_ALL_CLIQUE_DEVICE_POINT_GROUP_FUNCTIONS",
          "READ_CLIQUE",
          "READ_FUNCTION_TEMPLATE",
          "READ_FUNCTION_TEMPLATES",
          "READ_PREFERENCE",
          "READ_PREFERENCES",
          "READ_USER_PREFERENCE",
          "READ_USER_PREFERENCES",
          "REGISTER_AUTHORITY_MAJOR_ACCESS_ANY_USER",
          "REMOVE_DEVICE_POINT_FROM_GROUP_FUNCTION",
          "RESET_ANY_USER_DELETE_MARK",
          "RESET_DEVICE_POINT_GROUP_FUNCTION_DELETE_MARK",
          "SET_ANY_USER_DELETE_MARK",
          "SET_CLIQUE_REPORT_SERVICES",
          "SET_CONTROLLER_POINT_CLIQUE",
          "SET_DEVICE_CLIQUE",
          "SET_DEVICE_FIRMWARE",
          "SET_DEVICE_POINT_CLIQUE",
          "SET_DEVICE_POINT_GROUP_FUNCTION_DELETE_MARK",
          "SET_DEVICE_POINT_GROUP_FUNCTION_LAST_EXECUTION",
          "SET_DEVICE_TYPE",
          "UNASSIGN_CONTROLLER_POINT_TO_DEVICE_POINT",
          "UNASSIGN_EVENT",
          "UNREGISTER_AUTHORITY_MAJOR_ACCESS_ANY_USER",
          "UPDATE_ANY_USER_CLIQUE",
          "UPDATE_FIRMWARE_DEVICE",
          "UPDATE_FUNCTION_TEMPLATE",
          "UPDATE_PREFERENCE",
          "UPDATE_USER_PREFERENCE",
          "UPGRADE_FIRMWARE_DEVICE",
          "LINK_DEVICEPORT_TO_SENSOR"
        ],
        "type": "string"
      },
      "UserAuthoritiesDto": {
        "type": "object",
        "properties": {
          "authorityCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthorityCodes"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BackendConstOnlyNumber": {
        "enum": [
          "^[0-9]+$"
        ],
        "type": "string"
      },
      "BackendConstStrongPassword": {
        "enum": [
          "^(?=(.*[a-z]){1,})(?=(.*[\\d]){1,})(?=(.*[\\W]){1,})(?!.*\\s).{6,1000}$"
        ],
        "type": "string"
      },
      "BackendConstMacAddress": {
        "enum": [
          "^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$"
        ],
        "type": "string"
      },
      "BackendConstIpAddress": {
        "enum": [
          "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
        ],
        "type": "string"
      },
      "BackendConstAllowedFileName": {
        "enum": [
          "^[a-zA-Z0-9_-]+\\.(?i)(csv|pdf)$"
        ],
        "type": "string"
      },
      "BackendConstAllowedKeyName": {
        "enum": [
          "^[a-zA-Z0-9_-]+\\.(?i)([a-z]{1,5})$"
        ],
        "type": "string"
      },
      "BackendConstAllowedProjectFileName": {
        "enum": [
          "^[ a-zA-Z0-9_-]+\\.(?i)([a-z]{1,5})$"
        ],
        "type": "string"
      },
      "BackendConstAllowedDeviceFirmwareUpdateFileName": {
        "enum": [
          "^[a-zA-Z0-9_\\.-]+\\.(?i)(tar|bin)$"
        ],
        "type": "string"
      },
      "BackendConstAllowedImageFileName": {
        "enum": [
          "^[a-zA-Z0-9_-]+\\.(?i)(gif|jpg|jpeg|png)$"
        ],
        "type": "string"
      },
      "BackendConstAllowedMaintenanceFileName": {
        "enum": [
          "^[a-zA-Z0-9_-]+\\.(?i)(odt|doc|docx|txt|pdf)$"
        ],
        "type": "string"
      },
      "BackendConstAllowedControllerUpdateFileName": {
        "enum": [
          "^twms-bundle-full-[a-zA-Z0-9.\\-_]*.raucb$"
        ],
        "type": "string"
      },
      "BackendConstHourMinute": {
        "enum": [
          "^(2[0-3]|[01][0-9]):([0-5][0-9])$"
        ],
        "type": "string"
      },
      "BackendConstHostname": {
        "enum": [
          "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$"
        ],
        "type": "string"
      },
      "BackendConstDomainname": {
        "enum": [
          "^[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9]\\.[a-zA-Z]{2,}$"
        ],
        "type": "string"
      },
      "BackendConstEmailAddress": {
        "enum": [
          "^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$"
        ],
        "type": "string"
      },
      "BackendConstTelephoneNumber": {
        "enum": [
          "^[0-9-+() ]{5,}$"
        ],
        "type": "string"
      },
      "BackendConstLanguage": {
        "enum": [
          "^german|english$"
        ],
        "type": "string"
      },
      "MessageTypes": {
        "enum": [
          "API.MESSAGE_TYPES.CreateHygieneCleansingFailedBlockedMessageTypes",
          "API.MESSAGE_TYPES.CreateHygieneCleansingFailedDeviceMessageTypes",
          "API.MESSAGE_TYPES.CreateHygieneCleansingFailedMessageTypes",
          "API.MESSAGE_TYPES.CreateHygieneCleansingSuccessfulMessageTypes",
          "API.MESSAGE_TYPES.CreateSensorLimitMaxViolationMessageTypes",
          "API.MESSAGE_TYPES.CreateSensorLimitMinViolationMessageTypes",
          "API.MESSAGE_TYPES.DteErrorMessage6600Types",
          "API.MESSAGE_TYPES.DteErrorMessage6601Types",
          "API.MESSAGE_TYPES.DteErrorMessage6602Types",
          "API.MESSAGE_TYPES.DteErrorMessage6603Types",
          "API.MESSAGE_TYPES.DteErrorMessage6604Types",
          "API.MESSAGE_TYPES.DteErrorMessage6605Types",
          "API.MESSAGE_TYPES.DteErrorMessage6606Types",
          "API.MESSAGE_TYPES.DteErrorMessage6607Types",
          "API.MESSAGE_TYPES.DteErrorMessage6608Types",
          "API.MESSAGE_TYPES.DteErrorMessage6609Types",
          "API.MESSAGE_TYPES.DteErrorMessage6610Types",
          "API.MESSAGE_TYPES.DteErrorMessage6611Types",
          "API.MESSAGE_TYPES.DteErrorMessage6612Types",
          "API.MESSAGE_TYPES.DteErrorMessage6613Types",
          "API.MESSAGE_TYPES.DteErrorMessage6614Types",
          "API.MESSAGE_TYPES.DteErrorMessage6615Types",
          "API.MESSAGE_TYPES.DteErrorMessage6616Types",
          "API.MESSAGE_TYPES.DteErrorMessage6617Types",
          "API.MESSAGE_TYPES.DteErrorMessage6618Types",
          "API.MESSAGE_TYPES.DteErrorMessage6619Types",
          "API.MESSAGE_TYPES.DteErrorMessage6620Types",
          "API.MESSAGE_TYPES.DteErrorMessage6621Types",
          "API.MESSAGE_TYPES.DteErrorMessage6622Types",
          "API.MESSAGE_TYPES.DteErrorMessage6623Types",
          "API.MESSAGE_TYPES.DteErrorMessage6624Types",
          "API.MESSAGE_TYPES.DteErrorMessage6625Types",
          "API.MESSAGE_TYPES.DteErrorMessage6626Types",
          "API.MESSAGE_TYPES.DteErrorMessage6627Types",
          "API.MESSAGE_TYPES.DteErrorMessage6628Types",
          "API.MESSAGE_TYPES.DteErrorMessage6629Types",
          "API.MESSAGE_TYPES.DteErrorMessage6630Types",
          "API.MESSAGE_TYPES.DteErrorMessage6631Types",
          "API.MESSAGE_TYPES.DteErrorMessage6632Types",
          "API.MESSAGE_TYPES.DteErrorMessage6633Types",
          "API.MESSAGE_TYPES.DteErrorMessage6634Types",
          "API.MESSAGE_TYPES.DteErrorMessage6635Types",
          "API.MESSAGE_TYPES.DteErrorMessage6636Types",
          "API.MESSAGE_TYPES.DteErrorMessage6637Types",
          "API.MESSAGE_TYPES.DteErrorMessage6638Types",
          "API.MESSAGE_TYPES.DteUfcNotOkMessageTypes",
          "API.MESSAGE_TYPES.ExecuteDeviceFunctionTestFailedMessageTypes",
          "API.MESSAGE_TYPES.FatalPersistantSystemFailureMessageTypes",
          "API.MESSAGE_TYPES.FusiDteStateMachnineFatalError",
          "API.MESSAGE_TYPES.FusiRestartMessageTypes",
          "API.MESSAGE_TYPES.ProductionFunctionTestPassedMessageTypes",
          "API.MESSAGE_TYPES.SetDeviceMaintenanceMessageType",
          "API.MESSAGE_TYPES.CANSlaveHardwarePersistentFailure",
          "API.MESSAGE_TYPES.CANSlaveAutomaticResetAfterHardwareFailure",
          "API.MESSAGE_TYPES.SystemRestartMessageTypes",
          "API.MESSAGE_TYPES.ThermalDisinfectionFailedDeviceMessageTypes",
          "API.MESSAGE_TYPES.ThermalDisinfectionFailedMessageTypes",
          "API.MESSAGE_TYPES.ThermalDisinfectionResetDeviceFailedMessageTypes",
          "API.MESSAGE_TYPES.ThermalDisinfectionStartedMessageTypes",
          "API.MESSAGE_TYPES.ThermalDisinfectionSuccessfulMessageTypes",
          "API.MESSAGE_TYPES.UpdateDeviceFailedMessageTypes",
          "API.MESSAGE_TYPES.UpdateDeviceStartMessageTypes",
          "API.MESSAGE_TYPES.UpdateDeviceSuccessfulMessageTypes",
          "API.MESSAGE_TYPES.UserTableSvc.CreateUser",
          "API.MESSAGE_TYPES.UserTableSvc.ChangePassword",
          "API.MESSAGE_TYPES.UserTableSvc.ResetPassword",
          "API.MESSAGE_TYPES.UserTableSvc.UpdateUserAnyMetadata",
          "API.MESSAGE_TYPES.UserTableSvc.UpdateUserOwnMetadata",
          "API.MESSAGE_TYPES.UserTableSvc.Login",
          "API.MESSAGE_TYPES.UserTableSvc.ChangeUserLockStatus",
          "API.MESSAGE_TYPES.UserTableSvc.SetUserAuthorityTemplate",
          "API.MESSAGE_TYPES.UserTableSvc.RemoveUserAuthorityTemplate",
          "API.MESSAGE_TYPES.UserTableSvc.DeleteUser",
          "API.MESSAGE_TYPES.UserTableSvc.CreateClique",
          "API.MESSAGE_TYPES.UserTableSvc.DeleteClique",
          "API.MESSAGE_TYPES.UserTableSvc.UpdateClique",
          "API.MESSAGE_TYPES.UserTableSvc.UpdateUserAnyClique",
          "API.MESSAGE_TYPES.UserTableSvc.SetUserDisabledTimestamp",
          "API.MESSAGE_TYPES.UserTableSvc.ResetUserDisabledTimestamp",
          "API.MESSAGE_TYPES.UserTableSvc.CreateUserWithCliqueId",
          "API.MESSAGE_TYPES.ReportFilterTableSvc.DeleteConfiguration",
          "API.MESSAGE_TYPES.ReportFilterTableSvc.AddConfiguration",
          "API.MESSAGE_TYPES.ReportTableSvc.AddService",
          "API.MESSAGE_TYPES.ReportTableSvc.DeleteService",
          "API.MESSAGE_TYPES.ReportTableSvc.DeleteDatalogsOlderThanBoundedAllCliquesInternal",
          "API.MESSAGE_TYPES.PreferenceTableSvc.SetPreference",
          "API.MESSAGE_TYPES.PreferenceTableSvc.SetPreferenceAsJson",
          "API.MESSAGE_TYPES.PreferenceTableSvc.SetSystemPreference",
          "API.MESSAGE_TYPES.PreferenceTableSvc.SetSystemPreferenceAsJson",
          "API.MESSAGE_TYPES.MessagesTableSvc.UpdateMessageOwn",
          "API.MESSAGE_TYPES.MessagesTableSvc.UpdateMessageAny",
          "API.MESSAGE_TYPES.MessagesTableSvc.SetMessageViewed",
          "API.MESSAGE_TYPES.MessagesTableSvc.SetMessageAcknowledged",
          "API.MESSAGE_TYPES.MessagesTableSvc.SetMessageFixed",
          "API.MESSAGE_TYPES.MessagesTableSvc.CreateEventType",
          "API.MESSAGE_TYPES.MessagesTableSvc.SetMessageAnyDeletedMark",
          "API.MESSAGE_TYPES.MessagesTableSvc.SetMessageOwnDeletedMark",
          "API.MESSAGE_TYPES.MessagesTableSvc.ResetMessageViewed",
          "API.MESSAGE_TYPES.MessagesTableSvc.ResetMessageAcknowledged",
          "API.MESSAGE_TYPES.MessagesTableSvc.ResetMessageFixed",
          "API.MESSAGE_TYPES.MessagesTableSvc.ResetMessageAnyDeletedMark",
          "API.MESSAGE_TYPES.MessagesTableSvc.ResetMessageOwnDeletedMark",
          "API.MESSAGE_TYPES.MessagesTableSvc.UpdateMessageAnyByIndex",
          "API.MESSAGE_TYPES.MessagesTableSvc.UpdateMessageOwnByIndex",
          "API.MESSAGE_TYPES.MessagesTableSvc.DeleteMessages",
          "API.MESSAGE_TYPES.MessagesTableSvc.DeleteMessagesOlderThan",
          "API.MESSAGE_TYPES.MessagesTableSvc.DeleteMessagesOlderThanBoundedAllCliquesInternal",
          "API.MESSAGE_TYPES.MessagesTableSvc.DeleteMessagesAnyDeletedMarkOlderThanBoundedAllCliquesInternal",
          "API.MESSAGE_TYPES.MessagesTableSvc.DeleteLastMessages",
          "API.MESSAGE_TYPES.FunctionManagementTableSvc.SetCleaningShutdownEndTimestamp",
          "API.MESSAGE_TYPES.FunctionManagementTableSvc.SetLastExecutionTimestamp",
          "API.MESSAGE_TYPES.FunctionManagementTableSvc.CreateFunction",
          "API.MESSAGE_TYPES.FunctionManagementTableSvc.UpdateDevicePointGroupFunction",
          "API.MESSAGE_TYPES.FunctionManagementTableSvc.DeleteDevicePointGroupFunction",
          "API.MESSAGE_TYPES.FunctionManagementTableSvc.SetDisabledTimestamp",
          "API.MESSAGE_TYPES.FunctionManagementTableSvc.AddFlushableDevicePointToGroupFunction",
          "API.MESSAGE_TYPES.FunctionManagementTableSvc.RemoveFlushableDevicePointToGroupFunction",
          "API.MESSAGE_TYPES.FunctionManagementTableSvc.ResetDisabledTimestamp",
          "API.MESSAGE_TYPES.FunctionManagementTableSvc.SetExcecutedAtLeastOnce",
          "API.MESSAGE_TYPES.ControllerPointTableSvc.DeleteControllerPoint",
          "API.MESSAGE_TYPES.ControllerPointTableSvc.SetControllerPointMainMetaData",
          "API.MESSAGE_TYPES.ControllerPointTableSvc.UpdateControllerPoint",
          "API.MESSAGE_TYPES.ControllerPointTableSvc.SetControllerPointControllerId",
          "API.MESSAGE_TYPES.ControllerPointTableSvc.SetControllerPointEnabledTimestamp",
          "API.MESSAGE_TYPES.ControllerPointTableSvc.SetControllerPointDisabledTimestamp",
          "API.MESSAGE_TYPES.ControllerPointTableSvc.InstallControllerToControllerPoint",
          "API.MESSAGE_TYPES.ControllerPointTableSvc.UninstallControllerFromControllerPoint",
          "API.MESSAGE_TYPES.ControllerPointTableSvc.AssignPointAddressToControllerPoint",
          "API.MESSAGE_TYPES.ControllerPointTableSvc.CreateControllerPointWithCliqueId",
          "API.MESSAGE_TYPES.ControllerPointTableSvc.CreateControllerPointWithUUIDAndCliqueId",
          "API.MESSAGE_TYPES.ControllerTableSvc.SetControllerMainMetadata",
          "API.MESSAGE_TYPES.ControllerTableSvc.SetControllerMetadata",
          "API.MESSAGE_TYPES.ControllerTableSvc.SetControllerMaintenance",
          "API.MESSAGE_TYPES.ControllerTableSvc.SetControllerCliqueID",
          "API.MESSAGE_TYPES.ControllerTableSvc.SetControllerCliqueIDByName",
          "API.MESSAGE_TYPES.ControllerTableSvc.DeleteController",
          "API.MESSAGE_TYPES.ControllerTableSvc.CreateControllerWithCliqueId",
          "API.MESSAGE_TYPES.ControllerTableSvc.CreateControllerWithUUIDAndCliqueId",
          "API.MESSAGE_TYPES.DevicePointTableSvc.DeleteDevicePoint",
          "API.MESSAGE_TYPES.DevicePointTableSvc.SetDevicePointMetadata",
          "API.MESSAGE_TYPES.DevicePointTableSvc.SetDevicePointMainMetaData",
          "API.MESSAGE_TYPES.DevicePointTableSvc.UpdateDevicePoint",
          "API.MESSAGE_TYPES.DevicePointTableSvc.SetDevicePointControllerIdAndNodeId",
          "API.MESSAGE_TYPES.DevicePointTableSvc.SetDevicePointEnabledTimestamp",
          "API.MESSAGE_TYPES.DevicePointTableSvc.SetDevicePointDisabledTimestamp",
          "API.MESSAGE_TYPES.DevicePointTableSvc.InstallDeviceToDevicePoint",
          "API.MESSAGE_TYPES.DevicePointTableSvc.UninstallDeviceFromDevicePoint",
          "API.MESSAGE_TYPES.DevicePointTableSvc.AssignPointAddressToDevicePoint",
          "API.MESSAGE_TYPES.DevicePointTableSvc.SetDevicePointNodeId",
          "API.MESSAGE_TYPES.DevicePointTableSvc.AssignControllerPointToDevicePoint",
          "API.MESSAGE_TYPES.DevicePointTableSvc.UnassignControllerPointFromDevicePoint",
          "API.MESSAGE_TYPES.DevicePointTableSvc.SetDevicePointCliqueId",
          "API.MESSAGE_TYPES.DevicePointTableSvc.SetDevicePointCliqueIdByName",
          "API.MESSAGE_TYPES.DevicePointTableSvc.AssignPointAddressUUIDToDevicePoint",
          "API.MESSAGE_TYPES.DevicePointTableSvc.ResetDevicePointDisabledTimestamp",
          "API.MESSAGE_TYPES.DevicePointTableSvc.CreateDevicePointWithCliqueId",
          "API.MESSAGE_TYPES.DevicePointTableSvc.CreateDevicePointWithUUIDAndCliqueId",
          "API.MESSAGE_TYPES.DevicePointTableSvc.CreateDevicePointWithCliqueIdLesser",
          "API.MESSAGE_TYPES.DevicesTableSvc.DeleteDevice",
          "API.MESSAGE_TYPES.DevicesTableSvc.SetDeviceMainMetadata",
          "API.MESSAGE_TYPES.DevicesTableSvc.TransferDeviceConfiguration",
          "API.MESSAGE_TYPES.DevicesTableSvc.CreateDeviceFirmware",
          "API.MESSAGE_TYPES.DevicesTableSvc.SetDeviceFirmware",
          "API.MESSAGE_TYPES.DevicesTableSvc.DeleteDeviceFirmware",
          "API.MESSAGE_TYPES.DevicesTableSvc.CreateDeviceType",
          "API.MESSAGE_TYPES.DevicesTableSvc.DeleteDeviceType",
          "API.MESSAGE_TYPES.DevicesTableSvc.SetDeviceType",
          "API.MESSAGE_TYPES.DevicesTableSvc.InstallDeviceFirmwareToDevice",
          "API.MESSAGE_TYPES.DevicesTableSvc.UninstallDeviceFirmwareFromDevice",
          "API.MESSAGE_TYPES.DevicesTableSvc.SetDeviceMetadata",
          "API.MESSAGE_TYPES.DevicesTableSvc.SetDeviceMaintenance",
          "API.MESSAGE_TYPES.DevicesTableSvc.SetDeviceIdentityObject",
          "API.MESSAGE_TYPES.DevicesTableSvc.SetDeviceAncestorByUUID",
          "API.MESSAGE_TYPES.DevicesTableSvc.SetDeviceAncestorByName",
          "API.MESSAGE_TYPES.DevicesTableSvc.SetDeviceAncestorAndPortByUUID",
          "API.MESSAGE_TYPES.DevicesTableSvc.SetDevicePreSelectedNodeId",
          "API.MESSAGE_TYPES.DevicesTableSvc.CreateDeviceWithCliqueIdEx",
          "API.MESSAGE_TYPES.DevicesTableSvc.CreateDeviceWithUUIDAndCliqueIdEx",
          "API.MESSAGE_TYPES.PointAddressTableSvc.DeletePointAddress",
          "API.MESSAGE_TYPES.PointAddressTableSvc.SetPointAddress",
          "API.MESSAGE_TYPES.PointAddressTableSvc.ChangePointAddressBuilding",
          "API.MESSAGE_TYPES.PointAddressTableSvc.ChangePointAddressArea",
          "API.MESSAGE_TYPES.PointAddressTableSvc.ChangePointAddressRoom",
          "API.MESSAGE_TYPES.PointAddressTableSvc.AssignPointAddressToControllerPoint",
          "API.MESSAGE_TYPES.PointAddressTableSvc.AssignPointAddressToControllerPointId",
          "API.MESSAGE_TYPES.PointAddressTableSvc.SetPointAddressCliqueId",
          "API.MESSAGE_TYPES.PointAddressTableSvc.AssignPointAddressToDevicePoint",
          "API.MESSAGE_TYPES.PointAddressTableSvc.SetPointAddressCliqueIdByName",
          "API.MESSAGE_TYPES.PointAddressTableSvc.UnassignPointAddressFromControllerPoint",
          "API.MESSAGE_TYPES.PointAddressTableSvc.UnassignPointAddressFromControllerPointId",
          "API.MESSAGE_TYPES.PointAddressTableSvc.UnassignPointAddressFromDevicePoint",
          "API.MESSAGE_TYPES.PointAddressTableSvc.SetPointAddressBuilding",
          "API.MESSAGE_TYPES.PointAddressTableSvc.SetPointAddressArea",
          "API.MESSAGE_TYPES.PointAddressTableSvc.SetPointAddressRoom",
          "API.MESSAGE_TYPES.PointAddressTableSvc.CreatePointAddressWithCliqueId"
        ],
        "type": "string",
        "enumDescription": [
          "Hygiene flush {functionName|string} failed on {flushPipeType|FlushPipeType} , because devices are blocked: {hygieneCleansingBlockedDeviceNames|list} , by the functions: {hygieneCleansingBlockingFunctionNames|list}",
          "Hygiene flush {functionName|string} failed on {flushPipeType|FlushPipeType} for device: {devicePointName|string} , because {hygieneCleansingFailedDeviceReason|HygieneCleansingFailedDeviceReason} Additional information: {hygieneCleansingFailedDeviceReasonParameter|string}",
          "Hygiene flush {functionName|string} failed on {flushPipeType|FlushPipeType} , because only: {successfulCount|string} devices were successful and {failedCount|string} devices failed. {failedTemperatureCount|string} devices do not reached the desired temperature and {timeoutCount|string} devices exceeded the timeout limit.",
          "Hygiene flush {functionName|string} was successful on {flushPipeType|FlushPipeType}",
          "Sensor {sensorName|string} exceeded LimitMin ({limitMax|number}) for {timeLimitViolationSeconds|number} sec!",
          "Sensor {sensorName|string} exceeded LimitMin ({limitMin|number}) for {timeLimitViolationSeconds|number} sec!",
          "Verbindungsverlust zwischen DTE & TWMS Controller: Verbindung zwischen AquaVip- und DTE-Controller konnte nicht aufgebaut werden. Wenn das Problem bestehen bleibt, wenden Sie sich an den Viega Service. (6600)",
          "CAN-Bus Fehler auf dem DTE-Controller: Verbindungsfehler zum DTE. Wenden Sie sich an den Viega Service. (6601)",
          "Temperatursensor PWH ist defekt (Verlassen des plausiblen Wertebereichs, Kurzschluss): Der DTE wurde aufgrund eines Fehlers abgeschaltet. Wenden Sie sich an den Viega Service. (6602)",
          "Temperatursensor PWH ist defekt (Verlassen des plausiblen Wertebereichs, Kabelbruch): Der DTE wurde aufgrund eines Fehlers abgeschaltet. Wenden Sie sich an den Viega Service. (6603)",
          "Temperatursensor PWH-C ist defekt (Verlassen des plausiblen Wertebereichs, Kurzschluss): De DTE wurde aufgrund eines Fehlers abgeschaltet. Wenden Sie sich an den Viega Service. (6604)",
          "Temperatursensor PWH-C ist defekt (Verlassen des plausiblen Wertebereichs, Kabelbruch): Der DTE wurde aufgrund eines Fehlers abgeschaltet. Wenden Sie sich an den Viega Service. (6605)",
          "Temperatursensor PWH + PWH-C ist defekt (Verlassen des plausiblen Wertebereichs, Kurzschluss): Der DTE wurde aufgrund eines Fehlers abgeschaltet. Wenden Sie sich an den Viega Service. (6606)",
          "Temperatursensor PWH + PWH-C ist defekt (Verlassen des plausiblen Wertebereichs, Kabelbruch): Der DTE wurde aufgrund eines Fehlers abgeschaltet. Wenden Sie sich an den Viega Service. (6607)",
          "Temperatursensor VL Primär ist defekt (Verlassen des plausiblen Wertebereichs, Kurzschluss): Der DTE wurde aufgrund eines Fehlers abgeschaltet. Wenden Sie sich an den Viega Service. (6608)",
          "Temperatursensor VL Primär ist defekt (Verlassen des plausiblen Wertebereichs, Kabelbruch): Der DTE wurde aufgrund eines Fehlers abgeschaltet. Wenden Sie sich an den Viega Service. (6609)",
          "Volumenstromsensor PWH + PWH-C defekt (Verlassen des plausiblen Wertebereichs): Der DTE wurde aufgrund eines Fehlers abgeschaltet. Wenden Sie sich an den Viega Service. (6610)",
          "Volumenstromsensor PWH + PWH-C defekt (Verlassen des plausiblen Wertebereichs, Kabelbruch): Der DTE wurde aufgrund eines Fehlers abgeschaltet. Wenden Sie sich an den Viega Service. (6611)",
          "Spannung am DTE-Controller zu hoch: Störung an der Spannungsversorgung. Wenden Sie sich an den Viega Service. (6612)",
          "Spannung am DTE-Controller zu niedrig: Der DTE wurde aufgrund eines Fehlers an der Spannungsversorgung abgeschaltet.  Wenden Sie sich an den Viega Service. (6613)",
          "Allgemeiner Softwarefehler: Softwarefehler. Wenden Sie sich an den Viega Service. (6614)",
          "Schwerwiegender Softwarefehler: Der DTE wurde aufgrund eines Softwarefehlers abgeschaltet.  Wenden Sie sich an den Viega Service. (6615)",
          "Temperatur PWH zu niedrig (Warnung): PWH-Temperatur zeitweise außerhalb des Sollbereichs. Ursache prüfen. (6616)",
          "Temperatur PWH zu hoch (Warnung): PWH-Temperatur zeitweise außerhalb des Sollbereichs. Ursache prüfen. (6617)",
          "Temperatur PWH zu niedrig (Notabschaltung): Hygienerisiko:\n\nPWH-Temperatur außerhalb des Sollbereichs. Der DTE wurde abgeschaltet. Wenden Sie sich umgehend an den Viega Service. (6618)",
          "Temperatur PWH zu hoch (Notabschaltung): Verbrühungsgefahr:\n\nPWH-Temperatur außerhalb des Sollbereichs. Der DTE wurde abgeschaltet.  Wenden Sie sich umgehend an den Viega Service. (6619)",
          "Vorlauftemperaturüberwachung: Temperatur zu gering (nach 72 Std.): Zu geringe Pufferspeicher-Temperatur. Der DTE wurde abgeschaltet. Pufferspeicher überprüfen. (6620)",
          "DTE Controller auf Werkseinstellungen zurückgesetzt: Der DTE wurde auf Werkseinstellungen zurückgesetzt. (6621)",
          "Funktionstest erfolgreich: Funktionstest erfolgreich. (6622)",
          "Funktionstest fehlgeschlagen: Funktionstest fehlgeschlagen. (6623)",
          "Werksfunktionstest erfolgreich: Werksfunktionstest erfolgreich. (6624)",
          "Werksfunktionstest fehlgeschlagen: Werksfunktionstest fehlgeschlagen. (6625)",
          "Thermische Desinfektion i.O.: Thermische Desinfektion erfolgreich abgeschlossen. (6626)",
          "Thermische Desinfektion n.i.O.: Thermische Desinfektion abgebrochen. (6627)",
          "Wartung bald fällig: Wartung in 30 Tagen fällig.(6628)",
          "Wartung fällig: Wartung fällig. (6629)",
          "Wartung durchgeführt: Wartung durchgeführt. (6630)",
          "Störmeldung von UFC: Störung UFC:\n\nDer DTE wurde in den Grundbetrieb gesetzt, die Temperatur im Pufferspeicher überprüfen und ggf. erhöhen. Wenden Sie sich umgehend an den Viega Service. (6631)",
          "Vorlauftemperaturüberwachung: Temperatur zu gering (nach 24 Std.): Zu geringe Pufferspeicher-Temperatur. Pufferspeicher überprüfen. (6632)",
          "Temperaturüberwachung PWH-C zu niedrig (Warnmeldung) (nach 24h): PWH-C-Temperatur zeitweise außerhalb des Sollbereichs. Ursache prüfen. (6633)",
          "Temperaturüberwachung PWH-C zu niedrig (Notabschaltung) (nach 72h): Hygienerisiko:\n\nPWH-C-Temperatur außerhalb des Sollbereichs. Der DTE wurde abgeschaltet. Wenden Sie sich umgehend an den Viega Service. (6634)",
          "Parameter-Datensatz beschädigt: Der DTE wurde in den Werkszustand versetzt, da die Einstellungen nicht geladen werden konnten. Tritt diese Störung häufiger auf, wenden Sie sich an den Viega Service. (6635)",
          "Plausibilitätscheck Temperatursensor PWH nicht erfolgreich: Der DTE wurde aufgrund eines möglichen Fehlers abgeschaltet. Wenden Sie sich an den Viega Service wenn dieser Fehler wiederholt auftritt. (6636)",
          "Kein Zirkulationsvolumenstrom: Es wurde keine Zirkulation erkannt. Dies kann die Wassertemperatur-Regelung negativ beeinflussen. Ursache prüfen. (6637)",
          "Zirkulationsvolumenstrom wieder vorhanden: Die Zirkulation konnte wieder erkannt werden (6638).",
          "The ultrafiltration contact (ufc) on Dte {dteName|string} is not ok!Therefore the system rises the PWH target temperature for this Dte from {dtePwhTargetTemperatureOld|number} to {dtePwhTargetTemperatureNew|number}. Moreover the system sets the target temperature from {zirkePwhcTargetTemperatureOld|number} to {zirkePwhcTargetTemperatureNew|number} for the following criculation valves: {circulationValveNames|list}",
          "Function test failed, because {reason|string}",
          "System is in failure mode, because {reason|string}",
          "Dte controller is in fatal failure mode, because {reason|string}",
          "System is going to reboot, because the Fusi restart service is executed",
          "Werksfunktionstest erfolgreich",
          "Maintenance has been done at {newLastMaintenanceTimestamp|string} +Maintenance Interval is set to {newMaintenanceIntervalDays|number}",
          "CAN Slave has a persistant hardware failure Reason}",
          "CAN Slave has a resetted after hardware failure Reason}",
          "System was restarted",
          "Thermal disinfection failed for function {functionName|string} with device {devicePointName|string} , because {thermalDisinfectionFailedDeviceReason|ThermalDisinfectionFailedDeviceReason} Additional information: {thermalDisinfectionFailedDeviceReasonParameter|string}",
          "Thermal disinfection failed for function {functionName|string} with devices {devicePointArrangementNames|list} and valves {circulationValvesNames|list} and DTE {dteName|string} , because {thermalDisinfectionFailedReason|ThermalDisinfectionFailedReason} Additional information: {thermalDisinfectionFailedReasonParameters|list}",
          "Thermal disinfection function {functionName|string}. Reset device {devicePointName|string} failed , because {thermalDisinfectionResetDeviceFailedReason|ThermalDisinfectionResetDeviceFailedReason} Additional information: {thermalDisinfectionResetDeviceFailedReasonParameter|string}",
          "Thermal disinfection started for function {functionName|string} with devices {devicePointArrangementNames|list} and valves {circulationValvesNames|list} and DTE {dteName|string}",
          "Thermal disinfection successful for function {functionName|string} with devices {devicePointArrangementNames|list} and valves {circulationValvesNames|list} and DTE {dteName|string}",
          "Device update failed for {deviceName|string} of type {deviceType|string} with serial number {serialNumber|string}. This update failed, because {deviceUpdateFailedStatus|DeviceUpdateFailedStatus}.",
          "Device update started for {deviceName|string} of type {deviceType|string} with serial number {serialNumber|string}. This update has the software version {deviceUpdateInfo.softwareVersion|string} and patch version {deviceUpdateInfo.patchVersion|string}. The current revision number {revisionNumberOld|string} will be upgraded to {deviceUpdateInfo.canOpenInfo.revisionNumber|string}.",
          "Device update was successful for {deviceName|string} of type {deviceType|string} with serial number {serialNumber|string}.Upgraded the revision number from {revisionNumberOld|string} to {revisionNumberNew|string}.",
          "request user id:{param.requesterUserId|number}, param.loginName:{param.loginName|string}, param.password:{param.password|string}, param.authorityTemplateName:{param.authorityTemplateName|string}, param.firstName:{param.firstName|string}, param.lastName:{param.lastName|string}, param.email:{param.email|string}, param.cliqueId:{param.cliqueId|number}, param.majorId:{param.majorId|number}",
          "current user id:{userId|number}, new password:{newPassword|string}",
          "param.reqeustUserId:{param.reqeustUserId|number}, param.userLoginName:{param.userLoginName|string}, param.newUserPassword:{param.newUserPassword|string}, param.useBeforeTimestamp:{param.useBeforeTimestamp|string}",
          "param.requesterUserId:{param.requesterUserId|number}, param.userLoginName:{param.userLoginName|string}, param.newUserLoginName:{param.newUserLoginName|string}, param.firstName:{param.firstName|string}, param.lastName:{param.lastName|string}, param.email:{param.email|string}",
          "requesterUserId:{requesterUserId|number}, newLoginName:{newLoginName|string}, firstName:{firstName|string}, lastName:{lastName|string}, email:{email|string}",
          "user login name:{loginName|string}, user password:{password|string}",
          "requesterUserId:{requesterUserId|number}, userLoginName:{userLoginName|string}, lockFlag:{lockFlag|bool}",
          "requesterUserId:{requesterUserId|number}, userLoginName:{userLoginName|string}, authorityTemplateName:{authorityTemplateName|string}",
          "requesterUserId:{requesterUserId|number}, userLoginName:{userLoginName|string}",
          "requesterUserId:{requesterUserId|number}, userLoginName:{userLoginName|string}",
          "requesterUserId:{requesterUserId|number}, cliqueName:{cliqueName|string}, cliqueDescription:{cliqueDescription|string}",
          "requesterUserId:{requesterUserId|number}, cliqueName:{cliqueName|string}",
          "requesterUserId:{requesterUserId|number}, cliqueNameOld:{cliqueNameOld|string}, cliqueNameNew:{cliqueNameNew|string}, description:{description|string}",
          "requesterUserId:{requesterUserId|number}, loginName:{loginName|string}, cliqueNameNew:{cliqueNameNew|string}",
          "Requester User ID:{requesterUserId|number}, input.disabledTimestamp:{input.disabledTimestamp|string}, input.targetLoginName:{input.targetLoginName|string}",
          "Requester User ID:{requesterUserId|number}, Target Login Name:{targetLoginName|string}",
          "request user id:{param.requesterUserId|number}, param.loginName:{param.loginName|string}, param.password:{param.password|string}, param.authorityTemplateName:{param.authorityTemplateName|string}, param.firstName:{param.firstName|string}, param.lastName:{param.lastName|string}, param.email:{param.email|string}, param.cliqueId:{param.cliqueId|number}, param.majorId:{param.majorId|number}",
          "uuid:{uuid|string}",
          "configuration:{configuration|string}",
          "user identifier:{requesterUserId|number}, clique of the service creator:{serviceParameters.cliqueId|number}, id of the service (rowId):{serviceParameters.serviceId|number}, user uuid of the service creator:{serviceParameters.createdByUuid|string}, name of the service:{serviceParameters.serviceName|string}, name of the files created by the service:{serviceParameters.fileNameWithoutExtension|string}, what should the service do, if it gets triggered?\n            possible options: write usbfile, upload file to sftp-server, send email:{serviceParameters.action|string}, if Action = email, send the service output to this email address:{serviceParameters.emailAddress|string}, hostname of the sftp-server, e.g. 127.0.0.1:{serviceParameters.sftpOptionsInput.host|string}, port of the sftp-server, e.g. 22:{serviceParameters.sftpOptionsInput.host.port|number}, user name for the sftp-server login:{serviceParameters.sftpOptionsInput.host.port.username|string}, password for the sftp-server login:{serviceParameters.sftpOptionsInput.host.port.username.password|string}, path on the sftp-server (store new files on this location):{serviceParameters.sftpOptionsInput.host.port.username.password.destinationPath|string}, fingerprint of sftp-server:{serviceParameters.sftpOptionsInput.host.port.username.password.destinationPath.fingerprint|string}, path of public key:{serviceParameters.sftpOptionsInput.host.port.username.password.destinationPath.fingerprint.privateKeyPath|string}, passphrase of key:{serviceParameters.sftpOptionsInput.host.port.username.password.destinationPath.fingerprint.privateKeyPath.passphrase|string}, how gets the service triggered?\n            possible options: event (e.g. new ALARM), manual, cronjob, each x records (data log entries):{serviceParameters.trigger|string}, if Trigger = event, defines the trigger events, e.g. TriggerMessageTypes = \"ALARM | DISRUPTION\":{serviceParameters.triggerMessageTypes|list}, if Trigger = data, we send a report after each TriggerDataIntervalCount new entries in data_dataLog:{serviceParameters.triggerDataIntervalCount|number}, if Trigger = cronjob, defines the cronjob execution time:{serviceParameters.cronJobTimeStr|string}, uuid of the device point which created this data point:{serviceParameters.dataQueryParameters.devicePointName|string}, uuid of the device point which created this data point:{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid|string}, name of the device, e.g. \"Wall-E 2\":{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid|string}, type of the device, e.g. \"Wall-E\":{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName|string}, number of the channel, e.g. 6 (6 = Temperature_Get, see enum ChannelValueCodes or emico c api):{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId|number}, channel description, e.g. Get Temperature:{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription|string}, channel unit, e.g. DegC:{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit|string}, serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin:{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin|string}, Consider only datalog elements with date less or equal DateUTCMax:{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax|string}, serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase:{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase|string}, Alternative option to set DateUTCMin and DateUTCMax\n            Only in combination with DateUTC:{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase.dateOffsetSec|number}, Value should be greater equal ValueMin\n            if we want to allow negatives values, we have to change the generator constaint \"if (valueMin lower 0.0) then\":{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase.dateOffsetSec.valueMin|number}, Value should be lower equal ValueMax:{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase.dateOffsetSec.valueMin.valueMax|number}, Desired Datatype:{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase.dateOffsetSec.valueMin.valueMax.dataType|OutputDataType}, should include virtual initial value\n            if no DataPoint matches filter criteria the last DataPoint befor selected timeframe is given:{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase.dateOffsetSec.valueMin.valueMax.dataType.virtualInitValue|bool}, Limits the number of returned data log entries (obtained by the query):{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase.dateOffsetSec.valueMin.valueMax.dataType.virtualInitValue.limit|number}, Offset for the query result (useful for pagination):{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase.dateOffsetSec.valueMin.valueMax.dataType.virtualInitValue.limit.offset|number}, Predicate for the seek pagination (row id):{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase.dateOffsetSec.valueMin.valueMax.dataType.virtualInitValue.limit.offset.skipToken|number}, Order the returned data log entries (by now there is only the \"Date\" column supported):{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase.dateOffsetSec.valueMin.valueMax.dataType.virtualInitValue.limit.offset.skipToken.orderBy|string}, Order of the returned data log entries (dependent to OrderBy)\n            \"asc\" or \"desc\" allowed, default OrderBy column is \"date\":{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase.dateOffsetSec.valueMin.valueMax.dataType.virtualInitValue.limit.offset.skipToken.orderBy.order|string}",
          "user identifier:{requesterUserId|number}, id of the service:{serviceId|number}",
          "user identifier of the requester:{requesterUserId|number}, Delete only messages with CreatedTimestamp lower equal deleteOlderThan:{deleteOlderThan|string}, Limit the number of deleted messages:{maxNumberOfDeletedMessages|number}, true = delete only messages with DeletedBy != NULL:{needsDeletedMark|bool}",
          "requestUserId:{requestUserId|number}, uuid:{uuid|string}, applicationKey:{applicationKey|string}, content:{content|string}",
          "requestUserId:{requestUserId|number}, uuid:{uuid|string}, applicationKey:{applicationKey|string}, content:{content|generic}",
          "applicationKey:{applicationKey|string}, content:{content|string}",
          "applicationKey:{applicationKey|string}, content:{content|generic}",
          "user identifier of the requester:{requesterUserId|number}, the index of the message entry:{messageId|number}, name of existing event type (ALARM, EVENT, DISRUPTION, MAINTENANCE, ...):{eventType|EventTypes}, an error code:{errorCode|number}, summary of the message:{summary|string}, description of the message:{description|string}",
          "user identifier of the requester:{requesterUserId|number}, the index of the message entry:{messageId|number}, name of existing event type (ALARM, EVENT, DISRUPTION, MAINTENANCE, ...):{eventType|EventTypes}, an error code:{errorCode|number}, summary of the message:{summary|string}, description of the message:{description|string}",
          "requesterUserId:{requesterUserId|number}, message id's:{messageIds|list}",
          "requesterUserId:{requesterUserId|number}, message id's:{messageIds|list}",
          "requesterUserId:{requesterUserId|number}, message id's:{messageIds|list}",
          "key:{key|number}, value:{value|string}",
          "user identifier of the requester:{requesterUserId|number}, a comma-separated list of indices of the entries of the messages (Integer-List, e.g.: 1,2,3):{messageIds|list}",
          "user identifier of the requester:{requesterUserId|number}, a comma-separated list of indices of the entries of the messages (Integer-List, e.g.: 1,2,3):{messageIds|list}",
          "user identifier of the requester:{requesterUserId|number}, a comma-separated list of indices of the entries of the messages (Integer-List, e.g.: 1,2,3):{messageIds|list}",
          "user identifier of the requester:{requesterUserId|number}, a comma-separated list of indices of the entries of the messages (Integer-List, e.g.: 1,2,3):{messageIds|list}",
          "user identifier of the requester:{requesterUserId|number}, a comma-separated list of indices of the entries of the messages (Integer-List, e.g.: 1,2,3):{messageIds|list}",
          "user identifier of the requester:{requesterUserId|number}, a comma-separated list of indices of the entries of the messages (Integer-List, e.g.: 1,2,3):{messageIds|list}",
          "user identifier of the requester:{requesterUserId|number}, a comma-separated list of indices of the entries of the messages (Integer-List, e.g.: 1,2,3):{messageIds|list}",
          "user identifier of the requester:{requesterUserId|number}, the index of the message entry:{messageIndex|string}, name of existing event type (ALARM, EVENT, DISRUPTION, MAINTENANCE, ...):{eventType|string}, an error code:{errorCode|number}, summary of the message:{summary|string}, description of the message:{description|string}",
          "user identifier of the requester:{requesterUserId|number}, the index of the message entry:{messageIndex|string}, name of existing event type (ALARM, EVENT, DISRUPTION, MAINTENANCE, ...):{eventType|string}, an error code:{errorCode|number}, summary of the message:{summary|string}, description of the message:{description|string}",
          "user identifier of the requester:{requesterUserId|number}, a comma-separated list of indices of the entries of the messages (Integer-List, e.g.: 1,2,3):{messageIds|list}",
          "user identifier of the requester:{requesterUserId|number}, All messages older than this time will be deleted (examples: '2019-06-18T06:14:48', '2019-06-18 06:15', '2019-06-19'):{timestampValue|string}",
          "user identifier of the requester:{requesterUserId|number}, All messages older than this time will be deleted (examples: '2019-06-18T06:14:48', '2019-06-18 06:15', '2019-06-19'):{timestampValue|string}, Count of messages to be deleted:{count|number}",
          "user identifier of the requester:{requesterUserId|number}, All messages older than this time will be deleted (examples: '2019-06-18T06:14:48', '2019-06-18 06:15', '2019-06-19'):{timestampValue|string}, Count of messages to be deleted:{count|number}",
          "user identifier of the requester:{requesterUserId|number}, Count of messages to be deleted:{count|number}",
          "requesterUserId:{requesterUserId|number}, Name of the function:{devicePointGroupFunctionName|string}, Timestamp of the end of the cleaning shutdown:{cleaningShutdownEnd|string}",
          "requesterUserId:{requesterUserId|number}, Name of the flush schedule:{devicePointGroupFunctionName|string}, Exectuion time of the flush:{executionTime|string}, Type of the flush pipe:{flushPipeType|FlushPipeType}",
          "requesterUserId:{requesterUserId|number}, Is the function disabled?:{functionInput.disabledTimestamp|string}, true = flush all devices from DevicePointArrangement in paralell\n            false = flush the devices one after another (sequential order):{functionInput.flushSchedule.flushParallel|bool}, Flush if this threshold is reached aka stagnation time max:{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours|number}, The flush is starting at this point in time, e.g. 05.06.19 08:32:{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc|string}, Waiting time between two flushes:{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours|number}, functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated:{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated|bool}, functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan:{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan|number}, functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon:{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon|list}, functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue:{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue|list}, functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed:{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed|list}, functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu:{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu|list}, functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri:{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri|list}, functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat:{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat|list}, functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun:{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun|list}, Start of the range, only hours and minutes are used, e.g. 02:03:{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun.noFlushFrame.fromHourMinute|string}, End of the range, only hours and minutes are used, e.g. 06:59:{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun.noFlushFrame.fromHourMinute.toHourMinute|string}, true = use legacy versions of flush and thermal disinfection:{functionInput.legacy|bool}, Name of the function.\n            Is unique, could be used as id:{functionInput.name|string}, functionInput.remark:{functionInput.remark|string}, Type of the function e.g. circulation:{functionInput.type|FunctionTypes}, functionInput.circulationInput.temperatureLevelObject.temperatureLevel:{functionInput.circulationInput.temperatureLevelObject.temperatureLevel|TemperatureLevelCirculation}, only != null if TemperatureLevelCirculation = UfcManualConfig:{functionInput.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius|number}, only != null if TemperatureLevelCirculation = UfcManualConfig:{functionInput.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius.pwhcTemperatureCelsius|number}, functionInput.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius.pwhcTemperatureCelsius.isSelectable:{functionInput.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius.pwhcTemperatureCelsius.isSelectable|generic}, uuid of the key switch:{functionInput.keySwitchUuid|string}, Uuid for the DTE (water heating element):{functionInput.dteUuid|string}, Uuid for UFC fault contact, only allowed for a circulation function:{functionInput.ufcFaultContactUuid|string}, Use UFC, only allowed for a circulation function:{functionInput.useUFC|bool}, List of circulation valves:{functionInput.circulationValveConfigurationMapping|generic}, Device uuid's for the flush operation\n            The first element will be flushed first, the second element will be flushed second and so on.:{functionInput.flushableDevicePointUuids|list}, Sensor for pwc:{functionInput.temperatureSensorPwcDevicePointUuid|string}, Clique id of the function:{cliqueId|number}",
          "requesterUserId:{requesterUserId|number}, Name of the function>:{devicePointGroupFunctionName|string}, Is the function disabled?:{updatedFunctionInput.disabledTimestamp|string}, true = flush all devices from DevicePointArrangement in paralell\n            false = flush the devices one after another (sequential order):{updatedFunctionInput.flushSchedule.flushParallel|bool}, Flush if this threshold is reached aka stagnation time max:{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours|number}, The flush is starting at this point in time, e.g. 05.06.19 08:32:{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc|string}, Waiting time between two flushes:{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours|number}, updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated:{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated|bool}, updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan:{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan|number}, updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon:{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon|list}, updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue:{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue|list}, updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed:{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed|list}, updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu:{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu|list}, updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri:{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri|list}, updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat:{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat|list}, updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun:{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun|list}, Start of the range, only hours and minutes are used, e.g. 02:03:{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun.noFlushFrame.fromHourMinute|string}, End of the range, only hours and minutes are used, e.g. 06:59:{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun.noFlushFrame.fromHourMinute.toHourMinute|string}, true = use legacy versions of flush and thermal disinfection:{updatedFunctionInput.legacy|bool}, Name of the function.\n            Is unique, could be used as id:{updatedFunctionInput.name|string}, updatedFunctionInput.remark:{updatedFunctionInput.remark|string}, Type of the function e.g. circulation:{updatedFunctionInput.type|FunctionTypes}, updatedFunctionInput.circulationInput.temperatureLevelObject.temperatureLevel:{updatedFunctionInput.circulationInput.temperatureLevelObject.temperatureLevel|TemperatureLevelCirculation}, only != null if TemperatureLevelCirculation = UfcManualConfig:{updatedFunctionInput.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius|number}, only != null if TemperatureLevelCirculation = UfcManualConfig:{updatedFunctionInput.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius.pwhcTemperatureCelsius|number}, updatedFunctionInput.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius.pwhcTemperatureCelsius.isSelectable:{updatedFunctionInput.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius.pwhcTemperatureCelsius.isSelectable|generic}, uuid of the key switch:{updatedFunctionInput.keySwitchUuid|string}, Uuid for the DTE (water heating element):{updatedFunctionInput.dteUuid|string}, Uuid for UFC fault contact, only allowed for a circulation function:{updatedFunctionInput.ufcFaultContactUuid|string}, Use UFC, only allowed for a circulation function:{updatedFunctionInput.useUFC|bool}, List of circulation valves:{updatedFunctionInput.circulationValveConfigurationMapping|generic}, Device uuid's for the flush operation\n            The first element will be flushed first, the second element will be flushed second and so on.:{updatedFunctionInput.flushableDevicePointUuids|list}, Sensor for pwc:{updatedFunctionInput.temperatureSensorPwcDevicePointUuid|string}",
          "requesterUserId:{requesterUserId|number}, Name of the function:{devicePointGroupFunctionName|string}",
          "requesterUserId:{requesterUserId|number}, Name of the function:{devicePointGroupFunctionName|string}, function is disabled if disabledTimestamp >= DateTime.UtcNow:{disabledTimestamp|string}",
          "requesterUserId:{requesterUserId|number}, functionName:{functionName|string}, devicePointUuid:{devicePointUuid|string}, true => add at the beginning of the device list, false => add at the end of the device list:{hasHighPriority|bool}",
          "requesterUserId:{requesterUserId|number}, functionName:{functionName|string}, devicePointUuid:{devicePointUuid|string}",
          "requesterUserId:{requesterUserId|number}, devicePointGroupFunctionName:{devicePointGroupFunctionName|string}",
          "requesterUserId:{requesterUserId|number}, true = if this function is at least executed once\n            Used to calculate the next flush after a power loss:{functionInternal.executedAtLeastOnce|bool}, Clique of the function:{functionInternal.cliqueId|number}, Is the function disabled?:{functionInternal.disabledTimestamp|generic}, Last execution of the flush for the pwh:{functionInternal.flushSchedule.lastExecutionPwhTimestamp|generic}, Last execution of the flush for the pwc:{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp|generic}, End timestamp of the cleaning shutdown:{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp|generic}, true = flush all devices from DevicePointArrangement in paralell\n            false = flush the devices one after another (sequential order):{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel|bool}, Flush if this threshold is reached aka stagnation time max:{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours|number}, The flush is starting at this point in time, e.g. 05.06.19 08:32:{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc|string}, Waiting time between two flushes:{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours|number}, functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated:{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated|bool}, functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan:{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan|number}, functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon:{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon|list}, functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue:{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue|list}, functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed:{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed|list}, functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu:{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu|list}, functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri:{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri|list}, functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat:{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat|list}, functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun:{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun|list}, Start of the range, only hours and minutes are used, e.g. 02:03:{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun.noFlushFrame.fromHourMinute|string}, End of the range, only hours and minutes are used, e.g. 06:59:{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun.noFlushFrame.fromHourMinute.toHourMinute|string}, functionInternal.circulationValveUuids:{functionInternal.circulationValveUuids|list}, true = use legacy versions of flush and thermal disinfection:{functionInternal.legacy|bool}, Name of the function.\n            Is unique, could be used as id:{functionInternal.name|string}, functionInternal.remark:{functionInternal.remark|string}, Type of the function e.g. circulation:{functionInternal.type|FunctionTypes}, functionInternal.circulationInput.temperatureLevelObject.temperatureLevel:{functionInternal.circulationInput.temperatureLevelObject.temperatureLevel|TemperatureLevelCirculation}, only != null if TemperatureLevelCirculation = UfcManualConfig:{functionInternal.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius|number}, only != null if TemperatureLevelCirculation = UfcManualConfig:{functionInternal.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius.pwhcTemperatureCelsius|number}, functionInternal.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius.pwhcTemperatureCelsius.isSelectable:{functionInternal.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius.pwhcTemperatureCelsius.isSelectable|generic}, uuid of the key switch:{functionInternal.keySwitchUuid|string}, Uuid for the DTE (water heating element):{functionInternal.dteUuid|string}, Uuid for UFC fault contact, only allowed for a circulation function:{functionInternal.ufcFaultContactUuid|string}, Use UFC, only allowed for a circulation function:{functionInternal.useUFC|bool}, List of circulation valves:{functionInternal.circulationValveConfigurationMapping|generic}, Device uuid's for the flush operation\n            The first element will be flushed first, the second element will be flushed second and so on.:{functionInternal.flushableDevicePointUuids|list}, Sensor for pwc:{functionInternal.temperatureSensorPwcDevicePointUuid|string}",
          "Requester User ID:{requesterUserId|number}, UUID of Device Controller:{uuid|string}",
          "Requester User ID:{requesterUserId|number}, controllerPointEdit.uuid:{controllerPointEdit.uuid|string}, controllerPointEdit.name:{controllerPointEdit.name|string}, controllerPointEdit.controllerId:{controllerPointEdit.controllerId|number}, controllerPointEdit.remark:{controllerPointEdit.remark|string}, controllerPointEdit.building:{controllerPointEdit.building|string}, controllerPointEdit.area:{controllerPointEdit.area|string}, controllerPointEdit.room:{controllerPointEdit.room|string}, controllerPointEdit.segment:{controllerPointEdit.segment|string}, controllerPointEdit.newEnabledTimestamp:{controllerPointEdit.newEnabledTimestamp|generic}, controllerPointEdit.newDisabledTimestamp:{controllerPointEdit.newDisabledTimestamp|generic}",
          "Requester User ID:{requesterUserId|number}, controllerPointEdit.uuid:{controllerPointEdit.uuid|string}, controllerPointEdit.name:{controllerPointEdit.name|string}, controllerPointEdit.controllerId:{controllerPointEdit.controllerId|number}, controllerPointEdit.remark:{controllerPointEdit.remark|string}, controllerPointEdit.building:{controllerPointEdit.building|string}, controllerPointEdit.area:{controllerPointEdit.area|string}, controllerPointEdit.room:{controllerPointEdit.room|string}, controllerPointEdit.segment:{controllerPointEdit.segment|string}, controllerPointEdit.newEnabledTimestamp:{controllerPointEdit.newEnabledTimestamp|generic}, controllerPointEdit.newDisabledTimestamp:{controllerPointEdit.newDisabledTimestamp|generic}",
          "Requester User ID:{requesterUserId|number}, controllerPointEdit.uuid:{controllerPointEdit.uuid|string}, controllerPointEdit.name:{controllerPointEdit.name|string}, controllerPointEdit.controllerId:{controllerPointEdit.controllerId|number}, controllerPointEdit.remark:{controllerPointEdit.remark|string}, controllerPointEdit.building:{controllerPointEdit.building|string}, controllerPointEdit.area:{controllerPointEdit.area|string}, controllerPointEdit.room:{controllerPointEdit.room|string}, controllerPointEdit.segment:{controllerPointEdit.segment|string}, controllerPointEdit.newEnabledTimestamp:{controllerPointEdit.newEnabledTimestamp|generic}, controllerPointEdit.newDisabledTimestamp:{controllerPointEdit.newDisabledTimestamp|generic}",
          "Requester User ID:{requesterUserId|number}, controllerPointEdit.uuid:{controllerPointEdit.uuid|string}, controllerPointEdit.name:{controllerPointEdit.name|string}, controllerPointEdit.controllerId:{controllerPointEdit.controllerId|number}, controllerPointEdit.remark:{controllerPointEdit.remark|string}, controllerPointEdit.building:{controllerPointEdit.building|string}, controllerPointEdit.area:{controllerPointEdit.area|string}, controllerPointEdit.room:{controllerPointEdit.room|string}, controllerPointEdit.segment:{controllerPointEdit.segment|string}, controllerPointEdit.newEnabledTimestamp:{controllerPointEdit.newEnabledTimestamp|generic}, controllerPointEdit.newDisabledTimestamp:{controllerPointEdit.newDisabledTimestamp|generic}",
          "Requester User ID:{requesterUserId|number}, controllerPointEdit.uuid:{controllerPointEdit.uuid|string}, controllerPointEdit.name:{controllerPointEdit.name|string}, controllerPointEdit.controllerId:{controllerPointEdit.controllerId|number}, controllerPointEdit.remark:{controllerPointEdit.remark|string}, controllerPointEdit.building:{controllerPointEdit.building|string}, controllerPointEdit.area:{controllerPointEdit.area|string}, controllerPointEdit.room:{controllerPointEdit.room|string}, controllerPointEdit.segment:{controllerPointEdit.segment|string}, controllerPointEdit.newEnabledTimestamp:{controllerPointEdit.newEnabledTimestamp|generic}, controllerPointEdit.newDisabledTimestamp:{controllerPointEdit.newDisabledTimestamp|generic}",
          "Requester User ID:{requesterUserId|number}, input.controllerUUID:{input.controllerUUID|string}, input.controllerPointUUID:{input.controllerPointUUID|string}",
          "Requester User ID:{requesterUserId|number}, target controller uuid:{uuid|string}",
          "Requester User ID:{requesterUserId|number}, input.building:{input.building|string}, input.area:{input.area|string}, input.room:{input.room|string}, input.segment:{input.segment|string}, input.controllerPointUUID:{input.controllerPointUUID|string}",
          "user identifier:{requesterUserId|number}, id of the clique:{cliqueId|number}, name of a controller point:{name|string}, id of the controller:{controllerId|number}, remark of the controller point:{remark|string}",
          "user identifier:{requesterUserId|number}, id of the clique:{cliqueId|number}, name of a controller point:{name|string}, id of the controller:{controllerId|number}, remark of the controller point:{remark|string}, UUID of the device:{targetUUID|string}",
          "Requester User ID:{requesterUserId|number}, UUID of Controller:{controllerParams.uuid|string}, Controller name:{controllerParams.newName|string}, SerialNumber of Controller:{controllerParams.newSerialNumber|string}, Remark of Controller:{controllerParams.newRemark|string}, Maintenance Interval of Controller:{controllerParams.newMaintenanceIntervalDays|number}, Last Maintenance Timestamp of Controller:{controllerParams.newLastMaintenanceTimestamp|generic}",
          "Requester User ID:{requesterUserId|number}, UUID:{controllerParams.uuid|string}, Controller name:{controllerParams.newName|string}, SerialNumber of Controller:{controllerParams.newSerialNumber|string}, Remark of Controller:{controllerParams.newRemark|string}, Maintenance Interval of Controller:{controllerParams.newMaintenanceInterval|string}, Last Maintenance Timestamp of Controller:{controllerParams.newLastMaintenanceTimestamp|generic}",
          "Requester User ID:{requesterUserId|number}, UUID of Controller:{controllerParams.uuid|string}, Controller name:{controllerParams.newName|string}, SerialNumber of Controller:{controllerParams.newSerialNumber|string}, Remark of Controller:{controllerParams.newRemark|string}, Maintenance Interval of Controller:{controllerParams.newMaintenanceIntervalDays|number}, Last Maintenance Timestamp of Controller:{controllerParams.newLastMaintenanceTimestamp|generic}",
          "Requester User ID:{requesterUserId|number}, controllerParams.uuid:{controllerParams.uuid|string}, controllerParams.newCliqueID:{controllerParams.newCliqueID|number}",
          "Requester User ID:{requesterUserId|number}, controllerParams.targetName:{controllerParams.targetName|string}, controllerParams.newCliqueID:{controllerParams.newCliqueID|number}",
          "Requester User ID:{requesterUserId|number}, UUID of Controller:{uuid|string}",
          "user identifier:{requesterUserId|number}, id of the clique:{cliqueId|number}, name of the controller:{name|string}, serial number of the controller:{serialNumber|string}, remark of the controller:{remark|string}, timestamp of last maintenance:{lastMaintenanceTimestamp|string}, interval of maintenance:{maintenanceInterval|string}",
          "user identifier:{requesterUserId|number}, id of the clique:{cliqueId|number}, name of the controller:{name|string}, serial number of the controller:{serialNumber|string}, remark of the controller:{remark|string}, timestamp of last maintenance:{lastMaintenanceTimestamp|string}, interval of maintenance:{maintenanceInterval|string}, UUID of the device:{targetUUID|string}",
          "Requester User ID:{requesterUserId|number}, UUID of the DevicePoint:{uuid|string}",
          "Requester User ID:{requesterUserId|number}, devicePoint.uuid:{devicePoint.uuid|string}, devicePoint.newName:{devicePoint.newName|string}, devicePoint.newNodeID:{devicePoint.newNodeID|number}, devicePoint.newControllerID:{devicePoint.newControllerID|number}, devicePoint.newRemark:{devicePoint.newRemark|string}, devicePoint.newEnabledTimestamp:{devicePoint.newEnabledTimestamp|string}, devicePoint.newDisabledTimestamp:{devicePoint.newDisabledTimestamp|string}",
          "Requester User ID:{requesterUserId|number}, devicePointEdit.uuid:{devicePointEdit.uuid|string}, devicePointEdit.name:{devicePointEdit.name|string}, devicePointEdit.controllerId:{devicePointEdit.controllerId|number}, devicePointEdit.nodeId:{devicePointEdit.nodeId|number}, devicePointEdit.remark:{devicePointEdit.remark|string}, devicePointEdit.building:{devicePointEdit.building|string}, devicePointEdit.area:{devicePointEdit.area|string}, devicePointEdit.room:{devicePointEdit.room|string}, devicePointEdit.segment:{devicePointEdit.segment|string}, devicePointEdit.newEnabledTimestamp:{devicePointEdit.newEnabledTimestamp|generic}, devicePointEdit.newDisabledTimestamp:{devicePointEdit.newDisabledTimestamp|generic}",
          "Requester User ID:{requesterUserId|number}, devicePointEdit.uuid:{devicePointEdit.uuid|string}, devicePointEdit.name:{devicePointEdit.name|string}, devicePointEdit.controllerId:{devicePointEdit.controllerId|number}, devicePointEdit.nodeId:{devicePointEdit.nodeId|number}, devicePointEdit.remark:{devicePointEdit.remark|string}, devicePointEdit.building:{devicePointEdit.building|string}, devicePointEdit.area:{devicePointEdit.area|string}, devicePointEdit.room:{devicePointEdit.room|string}, devicePointEdit.segment:{devicePointEdit.segment|string}, devicePointEdit.newEnabledTimestamp:{devicePointEdit.newEnabledTimestamp|generic}, devicePointEdit.newDisabledTimestamp:{devicePointEdit.newDisabledTimestamp|generic}",
          "Requester User ID:{requesterUserId|number}, devicePointEdit.uuid:{devicePointEdit.uuid|string}, devicePointEdit.name:{devicePointEdit.name|string}, devicePointEdit.controllerId:{devicePointEdit.controllerId|number}, devicePointEdit.nodeId:{devicePointEdit.nodeId|number}, devicePointEdit.remark:{devicePointEdit.remark|string}, devicePointEdit.building:{devicePointEdit.building|string}, devicePointEdit.area:{devicePointEdit.area|string}, devicePointEdit.room:{devicePointEdit.room|string}, devicePointEdit.segment:{devicePointEdit.segment|string}, devicePointEdit.newEnabledTimestamp:{devicePointEdit.newEnabledTimestamp|generic}, devicePointEdit.newDisabledTimestamp:{devicePointEdit.newDisabledTimestamp|generic}",
          "Requester User ID:{requesterUserId|number}, devicePointEdit.uuid:{devicePointEdit.uuid|string}, devicePointEdit.name:{devicePointEdit.name|string}, devicePointEdit.controllerId:{devicePointEdit.controllerId|number}, devicePointEdit.nodeId:{devicePointEdit.nodeId|number}, devicePointEdit.remark:{devicePointEdit.remark|string}, devicePointEdit.building:{devicePointEdit.building|string}, devicePointEdit.area:{devicePointEdit.area|string}, devicePointEdit.room:{devicePointEdit.room|string}, devicePointEdit.segment:{devicePointEdit.segment|string}, devicePointEdit.newEnabledTimestamp:{devicePointEdit.newEnabledTimestamp|generic}, devicePointEdit.newDisabledTimestamp:{devicePointEdit.newDisabledTimestamp|generic}",
          "Requester User ID:{requesterUserId|number}, devicePointEdit.uuid:{devicePointEdit.uuid|string}, devicePointEdit.name:{devicePointEdit.name|string}, devicePointEdit.controllerId:{devicePointEdit.controllerId|number}, devicePointEdit.nodeId:{devicePointEdit.nodeId|number}, devicePointEdit.remark:{devicePointEdit.remark|string}, devicePointEdit.building:{devicePointEdit.building|string}, devicePointEdit.area:{devicePointEdit.area|string}, devicePointEdit.room:{devicePointEdit.room|string}, devicePointEdit.segment:{devicePointEdit.segment|string}, devicePointEdit.newEnabledTimestamp:{devicePointEdit.newEnabledTimestamp|generic}, devicePointEdit.newDisabledTimestamp:{devicePointEdit.newDisabledTimestamp|generic}",
          "Requester User Id:{requesterUserId|number}, UUID of the target device:{deviceUUID|string}, UUID of the target device point:{devicePointUUID|string}",
          "Requester User Id:{requesterUserId|number}, UUID of the target device:{deviceUUID|string}, UUID of the target device point:{devicePointUUID|string}",
          "Requester User ID:{requesterUserId|number}, input.pointAddressUUID:{input.pointAddressUUID|string}, input.devicePointUUID:{input.devicePointUUID|string}, input.building:{input.building|string}, input.area:{input.area|string}, input.room:{input.room|string}, input.segment:{input.segment|string}",
          "requesterUserId:{requesterUserId|number}, devicePointUUID:{devicePointUUID|string}, nodeId:{nodeId|number}",
          "Requester User ID:{requesterUserId|number}, input.targetUUID:{input.targetUUID|string}, input.controllerID:{input.controllerID|number}",
          "Requester User ID:{requesterUserId|number}, Target UUID of Device Point:{targetUUID|string}",
          "Requester User ID:{requesterUserId|number}, devicePointParams.targetUUID:{devicePointParams.targetUUID|string}, devicePointParams.cliqueID:{devicePointParams.cliqueID|number}",
          "Requester User ID:{requesterUserId|number}, devicePointParams.targetName:{devicePointParams.targetName|string}, devicePointParams.cliqueID:{devicePointParams.cliqueID|number}",
          "Requester User ID:{requesterUserId|number}, Target UUID:{targetUUID|string}, Point Address UUID:{pointAddressUUID|string}",
          "requesterUserId:{requesterUserId|number}, uuid:{uuid|string}",
          "user identifier:{requesterUserId|number}, id of the clique:{cliqueId|number}, name of this device point:{name|string}, node id for use in opcsa:{nodeId|number}, comment on this device point:{remark|string}, name of the device type:{deviceTypeName|string}",
          "user identifier:{requesterUserId|number}, id of the clique:{cliqueId|number}, name of this device point:{name|string}, node id for use in opcsa:{nodeId|number}, comment on this device point:{remark|string}, name of the device type:{deviceTypeName|string}, UUID of the device:{targetUUID|string}",
          "user identifier:{requesterUserId|number}, id of the clique:{cliqueId|number}, name of this device point:{name|string}, comment on this device point:{remark|string}, name of the device type:{deviceTypeName|string}",
          "Requester User Id:{requesterUserId|number}, uuid:{uuid|string}",
          "Requester User Id:{requesterUserId|number}, UUID of Device:{param.uuid|string}, Device name:{param.newName|string}, SerialNumber of Device:{param.newSerialNumber|number}, Revision Number of Device:{param.newRevisionNumber|number}, Device Type Name:{param.newDeviceTypeName|string}, Remark of Device:{param.newRemark|string}",
          "UUID of source device:{sourceUUID|string}, UUID of target device:{targetUUID|string}",
          "Requester User Id:{requesterUserId|number}, Version of the Device Firmware:{createDeviceFirmwareParameters.version|string}, Remark of the Device Firmware:{createDeviceFirmwareParameters.remark|string}, Firmware File of the Device Firmware:{createDeviceFirmwareParameters.filePath|string}",
          "Requester User Id:{requesterUserId|number}, param.version:{param.version|string}, param.newVersion:{param.newVersion|string}, param.remark:{param.remark|string}, param.filePath:{param.filePath|string}",
          "Requester User Id:{requesterUserId|number}, Firmware Version:{version|string}",
          "Requester User ID:{requesterUserId|number}, createDeviceTypeParameters.name:{createDeviceTypeParameters.name|string}, createDeviceTypeParameters.templateFile:{createDeviceTypeParameters.templateFile|string}",
          "Requester User Id:{requesterUserId|number}, Name of type:{name|string}",
          "Requester User Id:{requesterUserId|number}, param.name:{param.name|string}, param.newName:{param.newName|string}, param.templateFile:{param.templateFile|string}",
          "Requester User Id:{requesterUserId|number}, deviceUuid:{deviceUuid|string}, firmwareVersion:{firmwareVersion|string}",
          "Requester User Id:{requesterUserId|number}, parameters.deviceFirmwareVersion:{parameters.deviceFirmwareVersion|string}, parameters.deviceUUID:{parameters.deviceUUID|string}",
          "Requester User ID:{requesterUserId|number}, input.targetUUID:{input.targetUUID|string}, input.newName:{input.newName|string}, input.newRevisionNumber:{input.newRevisionNumber|number}, input.newSerialNumber:{input.newSerialNumber|number}, input.newRemark:{input.newRemark|string}, input.newLastMaintenanceTimestamp:{input.newLastMaintenanceTimestamp|string}, input.newMaintenanceInterval:{input.newMaintenanceInterval|string}, input.newDeviceTypeName:{input.newDeviceTypeName|string}",
          "Requester User ID:{requesterUserId|number}, input.targetUUID:{input.targetUUID|string}, input.newLastMaintenanceTimestamp:{input.newLastMaintenanceTimestamp|string}, input.newMaintenanceIntervalDays:{input.newMaintenanceIntervalDays|number}",
          "Requester User ID:{requesterUserId|number}, input.targetUUID:{input.targetUUID|string}, input.newVendorID:{input.newVendorID|number}, input.newProductCode:{input.newProductCode|number}, input.newRevisionNumber:{input.newRevisionNumber|number}, input.newSerialNumber:{input.newSerialNumber|number}",
          "Requester User ID:{requesterUserId|number}, Target UUID:{input.targetUUID|string}, UUID Ancestor:{input.ancestorUUID|string}",
          "Requester User ID:{requesterUserId|number}, Target Name:{input.targetName|string}, UUID Ancestor:{input.ancestorName|string}",
          "Requester Uer ID:{requesterUserId|number}, Target UUID:{input.targetUUID|string}, UUID Ancestor:{input.ancestorUUID|string}, Port:{input.ancestorPort|number}",
          "requesterUserId:{requesterUserId|number}, targetUUID:{targetUUID|string}, newPreSelectedNodeId:{newPreSelectedNodeId|number}",
          "user identifier:{requesterUserId|number}, id of the clique:{cliqueId|number}, name of the device:{name|string}, identity object: revision number:{revisionNumber|number}, identity object: serial number:{serialNumber|number}, remark:{remark|string}, timestamp of last maintenance:{lastMaintenanceTimestamp|string}, interval of maintenance:{maintenanceInterval|string}, Name of the device type:{deviceTypeName|string}, UUID of the device ancestor:{ancestorDeviceUUID|string}, Port of this device on the ancestor device:{ancestorDevice_Port|number}, UUID of the creator (e.g. Controller, ControllerPoint, User, ..., Actor):{createdByUUID|string}",
          "user identifier:{requesterUserId|number}, id of the clique:{cliqueId|number}, name of the device:{name|string}, identity object: revision number:{revisionNumber|number}, identity object: serial number:{serialNumber|number}, remark:{remark|string}, timestamp of last maintenance:{lastMaintenanceTimestamp|string}, interval of maintenance:{maintenanceInterval|string}, Name of the device type:{deviceTypeName|string}, UUID of the device ancestor:{ancestorDeviceUUID|string}, Port of this device on the ancestor device:{ancestorDevice_Port|number}, UUID of the creator (e.g. Controller, ControllerPoint, User, ..., Actor):{createdByUUID|string}, UUID of the device:{targetUUID|string}",
          "Requester User ID:{requesterUserId|number}, Building of point address:{param.building|string}, Area of point address:{param.area|string}, Room of point address:{param.room|string}, Segment of point address:{param.segment|string}",
          "Requester User ID:{requesterUserId|number}, pointAddress.building:{pointAddress.building|string}, pointAddress.area:{pointAddress.area|string}, pointAddress.room:{pointAddress.room|string}, pointAddress.segment:{pointAddress.segment|string}, pointAddress.newBuilding:{pointAddress.newBuilding|string}, pointAddress.newArea:{pointAddress.newArea|string}, pointAddress.newRoom:{pointAddress.newRoom|string}, pointAddress.newSegment:{pointAddress.newSegment|string}",
          "Requester User ID:{requesterUserId|number}, pointAddress.building:{pointAddress.building|string}, pointAddress.area:{pointAddress.area|string}, pointAddress.room:{pointAddress.room|string}, pointAddress.segment:{pointAddress.segment|string}, pointAddress.newBuilding:{pointAddress.newBuilding|string}, pointAddress.newArea:{pointAddress.newArea|string}, pointAddress.newRoom:{pointAddress.newRoom|string}, pointAddress.newSegment:{pointAddress.newSegment|string}",
          "Requester User ID:{requesterUserId|number}, pointAddress.building:{pointAddress.building|string}, pointAddress.area:{pointAddress.area|string}, pointAddress.room:{pointAddress.room|string}, pointAddress.segment:{pointAddress.segment|string}, pointAddress.newBuilding:{pointAddress.newBuilding|string}, pointAddress.newArea:{pointAddress.newArea|string}, pointAddress.newRoom:{pointAddress.newRoom|string}, pointAddress.newSegment:{pointAddress.newSegment|string}",
          "Requester User ID:{requesterUserId|number}, pointAddress.building:{pointAddress.building|string}, pointAddress.area:{pointAddress.area|string}, pointAddress.room:{pointAddress.room|string}, pointAddress.segment:{pointAddress.segment|string}, pointAddress.newBuilding:{pointAddress.newBuilding|string}, pointAddress.newArea:{pointAddress.newArea|string}, pointAddress.newRoom:{pointAddress.newRoom|string}, pointAddress.newSegment:{pointAddress.newSegment|string}",
          "Requester User ID:{requesterUserId|number}, input.building:{input.building|string}, input.area:{input.area|string}, input.room:{input.room|string}, input.segment:{input.segment|string}, input.controllerPointUUID:{input.controllerPointUUID|string}",
          "Requester User ID:{requesterUserId|number}, input.building:{input.building|string}, input.area:{input.area|string}, input.room:{input.room|string}, input.segment:{input.segment|string}, input.controllerID:{input.controllerID|number}",
          "Requester User ID:{requesterUserId|number}, pointAddressParam.targetUUID:{pointAddressParam.targetUUID|string}, pointAddressParam.newCliqueID:{pointAddressParam.newCliqueID|number}",
          "Requester User ID:{requesterUserId|number}, input.devicePointUUID:{input.devicePointUUID|string}, input.building:{input.building|string}, input.area:{input.area|string}, input.room:{input.room|string}, input.segment:{input.segment|string}",
          "Requester User ID:{requesterUserId|number}, pointAddressParam.building:{pointAddressParam.building|string}, pointAddressParam.area:{pointAddressParam.area|string}, pointAddressParam.room:{pointAddressParam.room|string}, pointAddressParam.segment:{pointAddressParam.segment|string}, pointAddressParam.newCliqueID:{pointAddressParam.newCliqueID|number}",
          "RequesterUserID:{requesterUserId|number}, Target UUID:{targetUUID|string}",
          "RequesterUserID:{requesterUserId|number}, Controller ID:{controllerID|number}",
          "Requester User ID:{requesterUserId|number}, Target UUID:{targetUUID|string}",
          "Requester User ID:{requesterUserId|number}, input.building:{input.building|string}, input.newArea:{input.newArea|string}, input.newRoom:{input.newRoom|string}, input.newSegment:{input.newSegment|string}",
          "Requester User ID:{requesterUserId|number}, input.building:{input.building|string}, input.area:{input.area|string}, input.newRoom:{input.newRoom|string}, input.newSegment:{input.newSegment|string}",
          "Requester User ID:{requesterUserId|number}, input.building:{input.building|string}, input.area:{input.area|string}, input.room:{input.room|string}, input.newSegment:{input.newSegment|string}",
          "user identifier:{requesterUserId|number}, id of the clique:{cliqueId|number}, building of a point address:{building|string}, area of a point address:{area|string}, room of point address:{room|string}, segment of a point address:{segment|string}"
        ]
      },
      "HygieneCleansingFailedDeviceReason": {
        "enum": [
          "API.MESSAGE_TYPES.HygieneCleansingFailedDeviceReason.FailedTemperature",
          "API.MESSAGE_TYPES.HygieneCleansingFailedDeviceReason.Timeout",
          "API.MESSAGE_TYPES.HygieneCleansingFailedDeviceReason.FailedStart",
          "API.MESSAGE_TYPES.HygieneCleansingFailedDeviceReason.InitialDeviceStateIsNotOk",
          "API.MESSAGE_TYPES.HygieneCleansingFailedDeviceReason.DeviceStateAfterStartIsNotOk",
          "API.MESSAGE_TYPES.HygieneCleansingFailedDeviceReason.UnkownError"
        ],
        "type": "string"
      },
      "ThermalDisinfectionFailedDeviceReason": {
        "enum": [
          "API.MESSAGE_TYPES.ThermalDisinfectionFailedDeviceReason.DeviceStateIsNotOk",
          "API.MESSAGE_TYPES.ThermalDisinfectionFailedDeviceReason.DeviceFailed",
          "API.MESSAGE_TYPES.ThermalDisinfectionFailedDeviceReason.AbortedByUser",
          "API.MESSAGE_TYPES.ThermalDisinfectionFailedDeviceReason.UnkownDeviceStatus",
          "API.MESSAGE_TYPES.ThermalDisinfectionFailedDeviceReason.Exception"
        ],
        "type": "string"
      },
      "ThermalDisinfectionFailedReason": {
        "enum": [
          "API.MESSAGE_TYPES.ThermalDisinfectionFailedReason.SomeDevicesFailed",
          "API.MESSAGE_TYPES.ThermalDisinfectionFailedReason.Exception"
        ],
        "type": "string"
      },
      "ThermalDisinfectionResetDeviceFailedReason": {
        "enum": [
          "API.MESSAGE_TYPES.ThermalDisinfectionResetDeviceFailedReason.Exception"
        ],
        "type": "string"
      },
      "FlushPipeType": {
        "enum": [
          "API.MESSAGE_TYPES.FlushPipeType.PWC",
          "API.MESSAGE_TYPES.FlushPipeType.PWH"
        ],
        "type": "string"
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. \r\n\r\n Enter 'Bearer' [space] and then your token in the text input below.\r\n\r\nExample: \"Bearer 12345abcdef\"",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ]
}