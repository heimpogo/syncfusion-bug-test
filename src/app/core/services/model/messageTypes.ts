import { marker as _ } from '@biesbjerg/ngx-translate-extract-marker';

/**
 * TWMS REST API
 * TWMS REST API
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

export type MessageTypes = 'API.MESSAGE_TYPES.CreateHygieneCleansingFailedBlockedMessageTypes' | 'API.MESSAGE_TYPES.CreateHygieneCleansingFailedDeviceMessageTypes' | 'API.MESSAGE_TYPES.CreateHygieneCleansingFailedMessageTypes' | 'API.MESSAGE_TYPES.CreateHygieneCleansingSuccessfulMessageTypes' | 'API.MESSAGE_TYPES.CreateSensorLimitMaxViolationMessageTypes' | 'API.MESSAGE_TYPES.CreateSensorLimitMinViolationMessageTypes' | 'API.MESSAGE_TYPES.DteErrorMessage6600Types' | 'API.MESSAGE_TYPES.DteErrorMessage6601Types' | 'API.MESSAGE_TYPES.DteErrorMessage6602Types' | 'API.MESSAGE_TYPES.DteErrorMessage6603Types' | 'API.MESSAGE_TYPES.DteErrorMessage6604Types' | 'API.MESSAGE_TYPES.DteErrorMessage6605Types' | 'API.MESSAGE_TYPES.DteErrorMessage6606Types' | 'API.MESSAGE_TYPES.DteErrorMessage6607Types' | 'API.MESSAGE_TYPES.DteErrorMessage6608Types' | 'API.MESSAGE_TYPES.DteErrorMessage6609Types' | 'API.MESSAGE_TYPES.DteErrorMessage6610Types' | 'API.MESSAGE_TYPES.DteErrorMessage6611Types' | 'API.MESSAGE_TYPES.DteErrorMessage6612Types' | 'API.MESSAGE_TYPES.DteErrorMessage6613Types' | 'API.MESSAGE_TYPES.DteErrorMessage6614Types' | 'API.MESSAGE_TYPES.DteErrorMessage6615Types' | 'API.MESSAGE_TYPES.DteErrorMessage6616Types' | 'API.MESSAGE_TYPES.DteErrorMessage6617Types' | 'API.MESSAGE_TYPES.DteErrorMessage6618Types' | 'API.MESSAGE_TYPES.DteErrorMessage6619Types' | 'API.MESSAGE_TYPES.DteErrorMessage6620Types' | 'API.MESSAGE_TYPES.DteErrorMessage6621Types' | 'API.MESSAGE_TYPES.DteErrorMessage6622Types' | 'API.MESSAGE_TYPES.DteErrorMessage6623Types' | 'API.MESSAGE_TYPES.DteErrorMessage6624Types' | 'API.MESSAGE_TYPES.DteErrorMessage6625Types' | 'API.MESSAGE_TYPES.DteErrorMessage6626Types' | 'API.MESSAGE_TYPES.DteErrorMessage6627Types' | 'API.MESSAGE_TYPES.DteErrorMessage6628Types' | 'API.MESSAGE_TYPES.DteErrorMessage6629Types' | 'API.MESSAGE_TYPES.DteErrorMessage6630Types' | 'API.MESSAGE_TYPES.DteErrorMessage6631Types' | 'API.MESSAGE_TYPES.DteErrorMessage6632Types' | 'API.MESSAGE_TYPES.DteErrorMessage6633Types' | 'API.MESSAGE_TYPES.DteErrorMessage6634Types' | 'API.MESSAGE_TYPES.DteErrorMessage6635Types' | 'API.MESSAGE_TYPES.DteErrorMessage6636Types' | 'API.MESSAGE_TYPES.DteErrorMessage6637Types' | 'API.MESSAGE_TYPES.DteErrorMessage6638Types' | 'API.MESSAGE_TYPES.DteUfcNotOkMessageTypes' | 'API.MESSAGE_TYPES.ExecuteDeviceFunctionTestFailedMessageTypes' | 'API.MESSAGE_TYPES.FatalPersistantSystemFailureMessageTypes' | 'API.MESSAGE_TYPES.FusiDteStateMachnineFatalError' | 'API.MESSAGE_TYPES.FusiRestartMessageTypes' | 'API.MESSAGE_TYPES.ProductionFunctionTestPassedMessageTypes' | 'API.MESSAGE_TYPES.SetDeviceMaintenanceMessageType' | 'API.MESSAGE_TYPES.CANSlaveHardwarePersistentFailure' | 'API.MESSAGE_TYPES.CANSlaveAutomaticResetAfterHardwareFailure' | 'API.MESSAGE_TYPES.SystemRestartMessageTypes' | 'API.MESSAGE_TYPES.ThermalDisinfectionFailedDeviceMessageTypes' | 'API.MESSAGE_TYPES.ThermalDisinfectionFailedMessageTypes' | 'API.MESSAGE_TYPES.ThermalDisinfectionResetDeviceFailedMessageTypes' | 'API.MESSAGE_TYPES.ThermalDisinfectionStartedMessageTypes' | 'API.MESSAGE_TYPES.ThermalDisinfectionSuccessfulMessageTypes' | 'API.MESSAGE_TYPES.UpdateDeviceFailedMessageTypes' | 'API.MESSAGE_TYPES.UpdateDeviceStartMessageTypes' | 'API.MESSAGE_TYPES.UpdateDeviceSuccessfulMessageTypes' | 'API.MESSAGE_TYPES.UserTableSvc.CreateUser' | 'API.MESSAGE_TYPES.UserTableSvc.ChangePassword' | 'API.MESSAGE_TYPES.UserTableSvc.ResetPassword' | 'API.MESSAGE_TYPES.UserTableSvc.UpdateUserAnyMetadata' | 'API.MESSAGE_TYPES.UserTableSvc.UpdateUserOwnMetadata' | 'API.MESSAGE_TYPES.UserTableSvc.Login' | 'API.MESSAGE_TYPES.UserTableSvc.ChangeUserLockStatus' | 'API.MESSAGE_TYPES.UserTableSvc.SetUserAuthorityTemplate' | 'API.MESSAGE_TYPES.UserTableSvc.RemoveUserAuthorityTemplate' | 'API.MESSAGE_TYPES.UserTableSvc.DeleteUser' | 'API.MESSAGE_TYPES.UserTableSvc.CreateClique' | 'API.MESSAGE_TYPES.UserTableSvc.DeleteClique' | 'API.MESSAGE_TYPES.UserTableSvc.UpdateClique' | 'API.MESSAGE_TYPES.UserTableSvc.UpdateUserAnyClique' | 'API.MESSAGE_TYPES.UserTableSvc.SetUserDisabledTimestamp' | 'API.MESSAGE_TYPES.UserTableSvc.ResetUserDisabledTimestamp' | 'API.MESSAGE_TYPES.UserTableSvc.CreateUserWithCliqueId' | 'API.MESSAGE_TYPES.ReportFilterTableSvc.DeleteConfiguration' | 'API.MESSAGE_TYPES.ReportFilterTableSvc.AddConfiguration' | 'API.MESSAGE_TYPES.ReportTableSvc.AddService' | 'API.MESSAGE_TYPES.ReportTableSvc.DeleteService' | 'API.MESSAGE_TYPES.ReportTableSvc.DeleteDatalogsOlderThanBoundedAllCliquesInternal' | 'API.MESSAGE_TYPES.PreferenceTableSvc.SetPreference' | 'API.MESSAGE_TYPES.PreferenceTableSvc.SetPreferenceAsJson' | 'API.MESSAGE_TYPES.PreferenceTableSvc.SetSystemPreference' | 'API.MESSAGE_TYPES.PreferenceTableSvc.SetSystemPreferenceAsJson' | 'API.MESSAGE_TYPES.MessagesTableSvc.UpdateMessageOwn' | 'API.MESSAGE_TYPES.MessagesTableSvc.UpdateMessageAny' | 'API.MESSAGE_TYPES.MessagesTableSvc.SetMessageViewed' | 'API.MESSAGE_TYPES.MessagesTableSvc.SetMessageAcknowledged' | 'API.MESSAGE_TYPES.MessagesTableSvc.SetMessageFixed' | 'API.MESSAGE_TYPES.MessagesTableSvc.CreateEventType' | 'API.MESSAGE_TYPES.MessagesTableSvc.SetMessageAnyDeletedMark' | 'API.MESSAGE_TYPES.MessagesTableSvc.SetMessageOwnDeletedMark' | 'API.MESSAGE_TYPES.MessagesTableSvc.ResetMessageViewed' | 'API.MESSAGE_TYPES.MessagesTableSvc.ResetMessageAcknowledged' | 'API.MESSAGE_TYPES.MessagesTableSvc.ResetMessageFixed' | 'API.MESSAGE_TYPES.MessagesTableSvc.ResetMessageAnyDeletedMark' | 'API.MESSAGE_TYPES.MessagesTableSvc.ResetMessageOwnDeletedMark' | 'API.MESSAGE_TYPES.MessagesTableSvc.UpdateMessageAnyByIndex' | 'API.MESSAGE_TYPES.MessagesTableSvc.UpdateMessageOwnByIndex' | 'API.MESSAGE_TYPES.MessagesTableSvc.DeleteMessages' | 'API.MESSAGE_TYPES.MessagesTableSvc.DeleteMessagesOlderThan' | 'API.MESSAGE_TYPES.MessagesTableSvc.DeleteMessagesOlderThanBoundedAllCliquesInternal' | 'API.MESSAGE_TYPES.MessagesTableSvc.DeleteMessagesAnyDeletedMarkOlderThanBoundedAllCliquesInternal' | 'API.MESSAGE_TYPES.MessagesTableSvc.DeleteLastMessages' | 'API.MESSAGE_TYPES.FunctionManagementTableSvc.SetCleaningShutdownEndTimestamp' | 'API.MESSAGE_TYPES.FunctionManagementTableSvc.SetLastExecutionTimestamp' | 'API.MESSAGE_TYPES.FunctionManagementTableSvc.CreateFunction' | 'API.MESSAGE_TYPES.FunctionManagementTableSvc.UpdateDevicePointGroupFunction' | 'API.MESSAGE_TYPES.FunctionManagementTableSvc.DeleteDevicePointGroupFunction' | 'API.MESSAGE_TYPES.FunctionManagementTableSvc.SetDisabledTimestamp' | 'API.MESSAGE_TYPES.FunctionManagementTableSvc.AddFlushableDevicePointToGroupFunction' | 'API.MESSAGE_TYPES.FunctionManagementTableSvc.RemoveFlushableDevicePointToGroupFunction' | 'API.MESSAGE_TYPES.FunctionManagementTableSvc.ResetDisabledTimestamp' | 'API.MESSAGE_TYPES.FunctionManagementTableSvc.SetExcecutedAtLeastOnce' | 'API.MESSAGE_TYPES.ControllerPointTableSvc.DeleteControllerPoint' | 'API.MESSAGE_TYPES.ControllerPointTableSvc.SetControllerPointMainMetaData' | 'API.MESSAGE_TYPES.ControllerPointTableSvc.UpdateControllerPoint' | 'API.MESSAGE_TYPES.ControllerPointTableSvc.SetControllerPointControllerId' | 'API.MESSAGE_TYPES.ControllerPointTableSvc.SetControllerPointEnabledTimestamp' | 'API.MESSAGE_TYPES.ControllerPointTableSvc.SetControllerPointDisabledTimestamp' | 'API.MESSAGE_TYPES.ControllerPointTableSvc.InstallControllerToControllerPoint' | 'API.MESSAGE_TYPES.ControllerPointTableSvc.UninstallControllerFromControllerPoint' | 'API.MESSAGE_TYPES.ControllerPointTableSvc.AssignPointAddressToControllerPoint' | 'API.MESSAGE_TYPES.ControllerPointTableSvc.CreateControllerPointWithCliqueId' | 'API.MESSAGE_TYPES.ControllerPointTableSvc.CreateControllerPointWithUUIDAndCliqueId' | 'API.MESSAGE_TYPES.ControllerTableSvc.SetControllerMainMetadata' | 'API.MESSAGE_TYPES.ControllerTableSvc.SetControllerMetadata' | 'API.MESSAGE_TYPES.ControllerTableSvc.SetControllerMaintenance' | 'API.MESSAGE_TYPES.ControllerTableSvc.SetControllerCliqueID' | 'API.MESSAGE_TYPES.ControllerTableSvc.SetControllerCliqueIDByName' | 'API.MESSAGE_TYPES.ControllerTableSvc.DeleteController' | 'API.MESSAGE_TYPES.ControllerTableSvc.CreateControllerWithCliqueId' | 'API.MESSAGE_TYPES.ControllerTableSvc.CreateControllerWithUUIDAndCliqueId' | 'API.MESSAGE_TYPES.DevicePointTableSvc.DeleteDevicePoint' | 'API.MESSAGE_TYPES.DevicePointTableSvc.SetDevicePointMetadata' | 'API.MESSAGE_TYPES.DevicePointTableSvc.SetDevicePointMainMetaData' | 'API.MESSAGE_TYPES.DevicePointTableSvc.UpdateDevicePoint' | 'API.MESSAGE_TYPES.DevicePointTableSvc.SetDevicePointControllerIdAndNodeId' | 'API.MESSAGE_TYPES.DevicePointTableSvc.SetDevicePointEnabledTimestamp' | 'API.MESSAGE_TYPES.DevicePointTableSvc.SetDevicePointDisabledTimestamp' | 'API.MESSAGE_TYPES.DevicePointTableSvc.InstallDeviceToDevicePoint' | 'API.MESSAGE_TYPES.DevicePointTableSvc.UninstallDeviceFromDevicePoint' | 'API.MESSAGE_TYPES.DevicePointTableSvc.AssignPointAddressToDevicePoint' | 'API.MESSAGE_TYPES.DevicePointTableSvc.SetDevicePointNodeId' | 'API.MESSAGE_TYPES.DevicePointTableSvc.AssignControllerPointToDevicePoint' | 'API.MESSAGE_TYPES.DevicePointTableSvc.UnassignControllerPointFromDevicePoint' | 'API.MESSAGE_TYPES.DevicePointTableSvc.SetDevicePointCliqueId' | 'API.MESSAGE_TYPES.DevicePointTableSvc.SetDevicePointCliqueIdByName' | 'API.MESSAGE_TYPES.DevicePointTableSvc.AssignPointAddressUUIDToDevicePoint' | 'API.MESSAGE_TYPES.DevicePointTableSvc.ResetDevicePointDisabledTimestamp' | 'API.MESSAGE_TYPES.DevicePointTableSvc.CreateDevicePointWithCliqueId' | 'API.MESSAGE_TYPES.DevicePointTableSvc.CreateDevicePointWithUUIDAndCliqueId' | 'API.MESSAGE_TYPES.DevicePointTableSvc.CreateDevicePointWithCliqueIdLesser' | 'API.MESSAGE_TYPES.DevicesTableSvc.DeleteDevice' | 'API.MESSAGE_TYPES.DevicesTableSvc.SetDeviceMainMetadata' | 'API.MESSAGE_TYPES.DevicesTableSvc.TransferDeviceConfiguration' | 'API.MESSAGE_TYPES.DevicesTableSvc.CreateDeviceFirmware' | 'API.MESSAGE_TYPES.DevicesTableSvc.SetDeviceFirmware' | 'API.MESSAGE_TYPES.DevicesTableSvc.DeleteDeviceFirmware' | 'API.MESSAGE_TYPES.DevicesTableSvc.CreateDeviceType' | 'API.MESSAGE_TYPES.DevicesTableSvc.DeleteDeviceType' | 'API.MESSAGE_TYPES.DevicesTableSvc.SetDeviceType' | 'API.MESSAGE_TYPES.DevicesTableSvc.InstallDeviceFirmwareToDevice' | 'API.MESSAGE_TYPES.DevicesTableSvc.UninstallDeviceFirmwareFromDevice' | 'API.MESSAGE_TYPES.DevicesTableSvc.SetDeviceMetadata' | 'API.MESSAGE_TYPES.DevicesTableSvc.SetDeviceMaintenance' | 'API.MESSAGE_TYPES.DevicesTableSvc.SetDeviceIdentityObject' | 'API.MESSAGE_TYPES.DevicesTableSvc.SetDeviceAncestorByUUID' | 'API.MESSAGE_TYPES.DevicesTableSvc.SetDeviceAncestorByName' | 'API.MESSAGE_TYPES.DevicesTableSvc.SetDeviceAncestorAndPortByUUID' | 'API.MESSAGE_TYPES.DevicesTableSvc.SetDevicePreSelectedNodeId' | 'API.MESSAGE_TYPES.DevicesTableSvc.CreateDeviceWithCliqueIdEx' | 'API.MESSAGE_TYPES.DevicesTableSvc.CreateDeviceWithUUIDAndCliqueIdEx' | 'API.MESSAGE_TYPES.PointAddressTableSvc.DeletePointAddress' | 'API.MESSAGE_TYPES.PointAddressTableSvc.SetPointAddress' | 'API.MESSAGE_TYPES.PointAddressTableSvc.ChangePointAddressBuilding' | 'API.MESSAGE_TYPES.PointAddressTableSvc.ChangePointAddressArea' | 'API.MESSAGE_TYPES.PointAddressTableSvc.ChangePointAddressRoom' | 'API.MESSAGE_TYPES.PointAddressTableSvc.AssignPointAddressToControllerPoint' | 'API.MESSAGE_TYPES.PointAddressTableSvc.AssignPointAddressToControllerPointId' | 'API.MESSAGE_TYPES.PointAddressTableSvc.SetPointAddressCliqueId' | 'API.MESSAGE_TYPES.PointAddressTableSvc.AssignPointAddressToDevicePoint' | 'API.MESSAGE_TYPES.PointAddressTableSvc.SetPointAddressCliqueIdByName' | 'API.MESSAGE_TYPES.PointAddressTableSvc.UnassignPointAddressFromControllerPoint' | 'API.MESSAGE_TYPES.PointAddressTableSvc.UnassignPointAddressFromControllerPointId' | 'API.MESSAGE_TYPES.PointAddressTableSvc.UnassignPointAddressFromDevicePoint' | 'API.MESSAGE_TYPES.PointAddressTableSvc.SetPointAddressBuilding' | 'API.MESSAGE_TYPES.PointAddressTableSvc.SetPointAddressArea' | 'API.MESSAGE_TYPES.PointAddressTableSvc.SetPointAddressRoom' | 'API.MESSAGE_TYPES.PointAddressTableSvc.CreatePointAddressWithCliqueId';

export const MessageTypes = {
    CreateHygieneCleansingFailedBlockedMessageTypes: _('API.MESSAGE_TYPES.CreateHygieneCleansingFailedBlockedMessageTypes') as MessageTypes,  // Hygiene flush {functionName|string} failed on {flushPipeType|FlushPipeType} , because devices are blocked: {hygieneCleansingBlockedDeviceNames|list} , by the functions: {hygieneCleansingBlockingFunctionNames|list}
    CreateHygieneCleansingFailedDeviceMessageTypes: _('API.MESSAGE_TYPES.CreateHygieneCleansingFailedDeviceMessageTypes') as MessageTypes,  // Hygiene flush {functionName|string} failed on {flushPipeType|FlushPipeType} for device: {devicePointName|string} , because {hygieneCleansingFailedDeviceReason|HygieneCleansingFailedDeviceReason} Additional information: {hygieneCleansingFailedDeviceReasonParameter|string}
    CreateHygieneCleansingFailedMessageTypes: _('API.MESSAGE_TYPES.CreateHygieneCleansingFailedMessageTypes') as MessageTypes,  // Hygiene flush {functionName|string} failed on {flushPipeType|FlushPipeType} , because only: {successfulCount|string} devices were successful and {failedCount|string} devices failed. {failedTemperatureCount|string} devices do not reached the desired temperature and {timeoutCount|string} devices exceeded the timeout limit.
    CreateHygieneCleansingSuccessfulMessageTypes: _('API.MESSAGE_TYPES.CreateHygieneCleansingSuccessfulMessageTypes') as MessageTypes,  // Hygiene flush {functionName|string} was successful on {flushPipeType|FlushPipeType}
    CreateSensorLimitMaxViolationMessageTypes: _('API.MESSAGE_TYPES.CreateSensorLimitMaxViolationMessageTypes') as MessageTypes,  // Sensor {sensorName|string} exceeded LimitMin ({limitMax|number}) for {timeLimitViolationSeconds|number} sec!
    CreateSensorLimitMinViolationMessageTypes: _('API.MESSAGE_TYPES.CreateSensorLimitMinViolationMessageTypes') as MessageTypes,  // Sensor {sensorName|string} exceeded LimitMin ({limitMin|number}) for {timeLimitViolationSeconds|number} sec!
    DteErrorMessage6600Types: _('API.MESSAGE_TYPES.DteErrorMessage6600Types') as MessageTypes,  // Verbindungsverlust zwischen DTE & TWMS Controller: Verbindung zwischen AquaVip- und DTE-Controller konnte nicht aufgebaut werden. Wenn das Problem bestehen bleibt, wenden Sie sich an den Viega Service. (6600)
    DteErrorMessage6601Types: _('API.MESSAGE_TYPES.DteErrorMessage6601Types') as MessageTypes,  // CAN-Bus Fehler auf dem DTE-Controller: Verbindungsfehler zum DTE. Wenden Sie sich an den Viega Service. (6601)
    DteErrorMessage6602Types: _('API.MESSAGE_TYPES.DteErrorMessage6602Types') as MessageTypes,  // Temperatursensor PWH ist defekt (Verlassen des plausiblen Wertebereichs, Kurzschluss): Der DTE wurde aufgrund eines Fehlers abgeschaltet. Wenden Sie sich an den Viega Service. (6602)
    DteErrorMessage6603Types: _('API.MESSAGE_TYPES.DteErrorMessage6603Types') as MessageTypes,  // Temperatursensor PWH ist defekt (Verlassen des plausiblen Wertebereichs, Kabelbruch): Der DTE wurde aufgrund eines Fehlers abgeschaltet. Wenden Sie sich an den Viega Service. (6603)
    DteErrorMessage6604Types: _('API.MESSAGE_TYPES.DteErrorMessage6604Types') as MessageTypes,  // Temperatursensor PWH-C ist defekt (Verlassen des plausiblen Wertebereichs, Kurzschluss): De DTE wurde aufgrund eines Fehlers abgeschaltet. Wenden Sie sich an den Viega Service. (6604)
    DteErrorMessage6605Types: _('API.MESSAGE_TYPES.DteErrorMessage6605Types') as MessageTypes,  // Temperatursensor PWH-C ist defekt (Verlassen des plausiblen Wertebereichs, Kabelbruch): Der DTE wurde aufgrund eines Fehlers abgeschaltet. Wenden Sie sich an den Viega Service. (6605)
    DteErrorMessage6606Types: _('API.MESSAGE_TYPES.DteErrorMessage6606Types') as MessageTypes,  // Temperatursensor PWH + PWH-C ist defekt (Verlassen des plausiblen Wertebereichs, Kurzschluss): Der DTE wurde aufgrund eines Fehlers abgeschaltet. Wenden Sie sich an den Viega Service. (6606)
    DteErrorMessage6607Types: _('API.MESSAGE_TYPES.DteErrorMessage6607Types') as MessageTypes,  // Temperatursensor PWH + PWH-C ist defekt (Verlassen des plausiblen Wertebereichs, Kabelbruch): Der DTE wurde aufgrund eines Fehlers abgeschaltet. Wenden Sie sich an den Viega Service. (6607)
    DteErrorMessage6608Types: _('API.MESSAGE_TYPES.DteErrorMessage6608Types') as MessageTypes,  // Temperatursensor VL Primär ist defekt (Verlassen des plausiblen Wertebereichs, Kurzschluss): Der DTE wurde aufgrund eines Fehlers abgeschaltet. Wenden Sie sich an den Viega Service. (6608)
    DteErrorMessage6609Types: _('API.MESSAGE_TYPES.DteErrorMessage6609Types') as MessageTypes,  // Temperatursensor VL Primär ist defekt (Verlassen des plausiblen Wertebereichs, Kabelbruch): Der DTE wurde aufgrund eines Fehlers abgeschaltet. Wenden Sie sich an den Viega Service. (6609)
    DteErrorMessage6610Types: _('API.MESSAGE_TYPES.DteErrorMessage6610Types') as MessageTypes,  // Volumenstromsensor PWH + PWH-C defekt (Verlassen des plausiblen Wertebereichs): Der DTE wurde aufgrund eines Fehlers abgeschaltet. Wenden Sie sich an den Viega Service. (6610)
    DteErrorMessage6611Types: _('API.MESSAGE_TYPES.DteErrorMessage6611Types') as MessageTypes,  // Volumenstromsensor PWH + PWH-C defekt (Verlassen des plausiblen Wertebereichs, Kabelbruch): Der DTE wurde aufgrund eines Fehlers abgeschaltet. Wenden Sie sich an den Viega Service. (6611)
    DteErrorMessage6612Types: _('API.MESSAGE_TYPES.DteErrorMessage6612Types') as MessageTypes,  // Spannung am DTE-Controller zu hoch: Störung an der Spannungsversorgung. Wenden Sie sich an den Viega Service. (6612)
    DteErrorMessage6613Types: _('API.MESSAGE_TYPES.DteErrorMessage6613Types') as MessageTypes,  // Spannung am DTE-Controller zu niedrig: Der DTE wurde aufgrund eines Fehlers an der Spannungsversorgung abgeschaltet.  Wenden Sie sich an den Viega Service. (6613)
    DteErrorMessage6614Types: _('API.MESSAGE_TYPES.DteErrorMessage6614Types') as MessageTypes,  // Allgemeiner Softwarefehler: Softwarefehler. Wenden Sie sich an den Viega Service. (6614)
    DteErrorMessage6615Types: _('API.MESSAGE_TYPES.DteErrorMessage6615Types') as MessageTypes,  // Schwerwiegender Softwarefehler: Der DTE wurde aufgrund eines Softwarefehlers abgeschaltet.  Wenden Sie sich an den Viega Service. (6615)
    DteErrorMessage6616Types: _('API.MESSAGE_TYPES.DteErrorMessage6616Types') as MessageTypes,  // Temperatur PWH zu niedrig (Warnung): PWH-Temperatur zeitweise außerhalb des Sollbereichs. Ursache prüfen. (6616)
    DteErrorMessage6617Types: _('API.MESSAGE_TYPES.DteErrorMessage6617Types') as MessageTypes,  // Temperatur PWH zu hoch (Warnung): PWH-Temperatur zeitweise außerhalb des Sollbereichs. Ursache prüfen. (6617)
    DteErrorMessage6618Types: _('API.MESSAGE_TYPES.DteErrorMessage6618Types') as MessageTypes,  // Temperatur PWH zu niedrig (Notabschaltung): Hygienerisiko:\n\nPWH-Temperatur außerhalb des Sollbereichs. Der DTE wurde abgeschaltet. Wenden Sie sich umgehend an den Viega Service. (6618)
    DteErrorMessage6619Types: _('API.MESSAGE_TYPES.DteErrorMessage6619Types') as MessageTypes,  // Temperatur PWH zu hoch (Notabschaltung): Verbrühungsgefahr:\n\nPWH-Temperatur außerhalb des Sollbereichs. Der DTE wurde abgeschaltet.  Wenden Sie sich umgehend an den Viega Service. (6619)
    DteErrorMessage6620Types: _('API.MESSAGE_TYPES.DteErrorMessage6620Types') as MessageTypes,  // Vorlauftemperaturüberwachung: Temperatur zu gering (nach 72 Std.): Zu geringe Pufferspeicher-Temperatur. Der DTE wurde abgeschaltet. Pufferspeicher überprüfen. (6620)
    DteErrorMessage6621Types: _('API.MESSAGE_TYPES.DteErrorMessage6621Types') as MessageTypes,  // DTE Controller auf Werkseinstellungen zurückgesetzt: Der DTE wurde auf Werkseinstellungen zurückgesetzt. (6621)
    DteErrorMessage6622Types: _('API.MESSAGE_TYPES.DteErrorMessage6622Types') as MessageTypes,  // Funktionstest erfolgreich: Funktionstest erfolgreich. (6622)
    DteErrorMessage6623Types: _('API.MESSAGE_TYPES.DteErrorMessage6623Types') as MessageTypes,  // Funktionstest fehlgeschlagen: Funktionstest fehlgeschlagen. (6623)
    DteErrorMessage6624Types: _('API.MESSAGE_TYPES.DteErrorMessage6624Types') as MessageTypes,  // Werksfunktionstest erfolgreich: Werksfunktionstest erfolgreich. (6624)
    DteErrorMessage6625Types: _('API.MESSAGE_TYPES.DteErrorMessage6625Types') as MessageTypes,  // Werksfunktionstest fehlgeschlagen: Werksfunktionstest fehlgeschlagen. (6625)
    DteErrorMessage6626Types: _('API.MESSAGE_TYPES.DteErrorMessage6626Types') as MessageTypes,  // Thermische Desinfektion i.O.: Thermische Desinfektion erfolgreich abgeschlossen. (6626)
    DteErrorMessage6627Types: _('API.MESSAGE_TYPES.DteErrorMessage6627Types') as MessageTypes,  // Thermische Desinfektion n.i.O.: Thermische Desinfektion abgebrochen. (6627)
    DteErrorMessage6628Types: _('API.MESSAGE_TYPES.DteErrorMessage6628Types') as MessageTypes,  // Wartung bald fällig: Wartung in 30 Tagen fällig.(6628)
    DteErrorMessage6629Types: _('API.MESSAGE_TYPES.DteErrorMessage6629Types') as MessageTypes,  // Wartung fällig: Wartung fällig. (6629)
    DteErrorMessage6630Types: _('API.MESSAGE_TYPES.DteErrorMessage6630Types') as MessageTypes,  // Wartung durchgeführt: Wartung durchgeführt. (6630)
    DteErrorMessage6631Types: _('API.MESSAGE_TYPES.DteErrorMessage6631Types') as MessageTypes,  // Störmeldung von UFC: Störung UFC:\n\nDer DTE wurde in den Grundbetrieb gesetzt, die Temperatur im Pufferspeicher überprüfen und ggf. erhöhen. Wenden Sie sich umgehend an den Viega Service. (6631)
    DteErrorMessage6632Types: _('API.MESSAGE_TYPES.DteErrorMessage6632Types') as MessageTypes,  // Vorlauftemperaturüberwachung: Temperatur zu gering (nach 24 Std.): Zu geringe Pufferspeicher-Temperatur. Pufferspeicher überprüfen. (6632)
    DteErrorMessage6633Types: _('API.MESSAGE_TYPES.DteErrorMessage6633Types') as MessageTypes,  // Temperaturüberwachung PWH-C zu niedrig (Warnmeldung) (nach 24h): PWH-C-Temperatur zeitweise außerhalb des Sollbereichs. Ursache prüfen. (6633)
    DteErrorMessage6634Types: _('API.MESSAGE_TYPES.DteErrorMessage6634Types') as MessageTypes,  // Temperaturüberwachung PWH-C zu niedrig (Notabschaltung) (nach 72h): Hygienerisiko:\n\nPWH-C-Temperatur außerhalb des Sollbereichs. Der DTE wurde abgeschaltet. Wenden Sie sich umgehend an den Viega Service. (6634)
    DteErrorMessage6635Types: _('API.MESSAGE_TYPES.DteErrorMessage6635Types') as MessageTypes,  // Parameter-Datensatz beschädigt: Der DTE wurde in den Werkszustand versetzt, da die Einstellungen nicht geladen werden konnten. Tritt diese Störung häufiger auf, wenden Sie sich an den Viega Service. (6635)
    DteErrorMessage6636Types: _('API.MESSAGE_TYPES.DteErrorMessage6636Types') as MessageTypes,  // Plausibilitätscheck Temperatursensor PWH nicht erfolgreich: Der DTE wurde aufgrund eines möglichen Fehlers abgeschaltet. Wenden Sie sich an den Viega Service wenn dieser Fehler wiederholt auftritt. (6636)
    DteErrorMessage6637Types: _('API.MESSAGE_TYPES.DteErrorMessage6637Types') as MessageTypes,  // Kein Zirkulationsvolumenstrom: Es wurde keine Zirkulation erkannt. Dies kann die Wassertemperatur-Regelung negativ beeinflussen. Ursache prüfen. (6637)
    DteErrorMessage6638Types: _('API.MESSAGE_TYPES.DteErrorMessage6638Types') as MessageTypes,  // Zirkulationsvolumenstrom wieder vorhanden: Die Zirkulation konnte wieder erkannt werden (6638).
    DteUfcNotOkMessageTypes: _('API.MESSAGE_TYPES.DteUfcNotOkMessageTypes') as MessageTypes,  // The ultrafiltration contact (ufc) on Dte {dteName|string} is not ok!Therefore the system rises the PWH target temperature for this Dte from {dtePwhTargetTemperatureOld|number} to {dtePwhTargetTemperatureNew|number}. Moreover the system sets the target temperature from {zirkePwhcTargetTemperatureOld|number} to {zirkePwhcTargetTemperatureNew|number} for the following criculation valves: {circulationValveNames|list}
    ExecuteDeviceFunctionTestFailedMessageTypes: _('API.MESSAGE_TYPES.ExecuteDeviceFunctionTestFailedMessageTypes') as MessageTypes,  // Function test failed, because {reason|string}
    FatalPersistantSystemFailureMessageTypes: _('API.MESSAGE_TYPES.FatalPersistantSystemFailureMessageTypes') as MessageTypes,  // System is in failure mode, because {reason|string}
    FusiDteStateMachnineFatalError: _('API.MESSAGE_TYPES.FusiDteStateMachnineFatalError') as MessageTypes,  // Dte controller is in fatal failure mode, because {reason|string}
    FusiRestartMessageTypes: _('API.MESSAGE_TYPES.FusiRestartMessageTypes') as MessageTypes,  // System is going to reboot, because the Fusi restart service is executed
    ProductionFunctionTestPassedMessageTypes: _('API.MESSAGE_TYPES.ProductionFunctionTestPassedMessageTypes') as MessageTypes,  // Werksfunktionstest erfolgreich
    SetDeviceMaintenanceMessageType: _('API.MESSAGE_TYPES.SetDeviceMaintenanceMessageType') as MessageTypes,  // Maintenance has been done at {newLastMaintenanceTimestamp|string} +Maintenance Interval is set to {newMaintenanceIntervalDays|number}
    CANSlaveHardwarePersistentFailure: _('API.MESSAGE_TYPES.CANSlaveHardwarePersistentFailure') as MessageTypes,  // CAN Slave has a persistant hardware failure Reason}
    CANSlaveAutomaticResetAfterHardwareFailure: _('API.MESSAGE_TYPES.CANSlaveAutomaticResetAfterHardwareFailure') as MessageTypes,  // CAN Slave has a resetted after hardware failure Reason}
    SystemRestartMessageTypes: _('API.MESSAGE_TYPES.SystemRestartMessageTypes') as MessageTypes,  // System was restarted
    ThermalDisinfectionFailedDeviceMessageTypes: _('API.MESSAGE_TYPES.ThermalDisinfectionFailedDeviceMessageTypes') as MessageTypes,  // Thermal disinfection failed for function {functionName|string} with device {devicePointName|string} , because {thermalDisinfectionFailedDeviceReason|ThermalDisinfectionFailedDeviceReason} Additional information: {thermalDisinfectionFailedDeviceReasonParameter|string}
    ThermalDisinfectionFailedMessageTypes: _('API.MESSAGE_TYPES.ThermalDisinfectionFailedMessageTypes') as MessageTypes,  // Thermal disinfection failed for function {functionName|string} with devices {devicePointArrangementNames|list} and valves {circulationValvesNames|list} and DTE {dteName|string} , because {thermalDisinfectionFailedReason|ThermalDisinfectionFailedReason} Additional information: {thermalDisinfectionFailedReasonParameters|list}
    ThermalDisinfectionResetDeviceFailedMessageTypes: _('API.MESSAGE_TYPES.ThermalDisinfectionResetDeviceFailedMessageTypes') as MessageTypes,  // Thermal disinfection function {functionName|string}. Reset device {devicePointName|string} failed , because {thermalDisinfectionResetDeviceFailedReason|ThermalDisinfectionResetDeviceFailedReason} Additional information: {thermalDisinfectionResetDeviceFailedReasonParameter|string}
    ThermalDisinfectionStartedMessageTypes: _('API.MESSAGE_TYPES.ThermalDisinfectionStartedMessageTypes') as MessageTypes,  // Thermal disinfection started for function {functionName|string} with devices {devicePointArrangementNames|list} and valves {circulationValvesNames|list} and DTE {dteName|string}
    ThermalDisinfectionSuccessfulMessageTypes: _('API.MESSAGE_TYPES.ThermalDisinfectionSuccessfulMessageTypes') as MessageTypes,  // Thermal disinfection successful for function {functionName|string} with devices {devicePointArrangementNames|list} and valves {circulationValvesNames|list} and DTE {dteName|string}
    UpdateDeviceFailedMessageTypes: _('API.MESSAGE_TYPES.UpdateDeviceFailedMessageTypes') as MessageTypes,  // Device update failed for {deviceName|string} of type {deviceType|string} with serial number {serialNumber|string}. This update failed, because {deviceUpdateFailedStatus|DeviceUpdateFailedStatus}.
    UpdateDeviceStartMessageTypes: _('API.MESSAGE_TYPES.UpdateDeviceStartMessageTypes') as MessageTypes,  // Device update started for {deviceName|string} of type {deviceType|string} with serial number {serialNumber|string}. This update has the software version {deviceUpdateInfo.softwareVersion|string} and patch version {deviceUpdateInfo.patchVersion|string}. The current revision number {revisionNumberOld|string} will be upgraded to {deviceUpdateInfo.canOpenInfo.revisionNumber|string}.
    UpdateDeviceSuccessfulMessageTypes: _('API.MESSAGE_TYPES.UpdateDeviceSuccessfulMessageTypes') as MessageTypes,  // Device update was successful for {deviceName|string} of type {deviceType|string} with serial number {serialNumber|string}.Upgraded the revision number from {revisionNumberOld|string} to {revisionNumberNew|string}.
    UserTableSvcCreateUser: _('API.MESSAGE_TYPES.UserTableSvc.CreateUser') as MessageTypes,  // request user id:{param.requesterUserId|number}, param.loginName:{param.loginName|string}, param.password:{param.password|string}, param.authorityTemplateName:{param.authorityTemplateName|string}, param.firstName:{param.firstName|string}, param.lastName:{param.lastName|string}, param.email:{param.email|string}, param.cliqueId:{param.cliqueId|number}, param.majorId:{param.majorId|number}
    UserTableSvcChangePassword: _('API.MESSAGE_TYPES.UserTableSvc.ChangePassword') as MessageTypes,  // current user id:{userId|number}, new password:{newPassword|string}
    UserTableSvcResetPassword: _('API.MESSAGE_TYPES.UserTableSvc.ResetPassword') as MessageTypes,  // param.reqeustUserId:{param.reqeustUserId|number}, param.userLoginName:{param.userLoginName|string}, param.newUserPassword:{param.newUserPassword|string}, param.useBeforeTimestamp:{param.useBeforeTimestamp|string}
    UserTableSvcUpdateUserAnyMetadata: _('API.MESSAGE_TYPES.UserTableSvc.UpdateUserAnyMetadata') as MessageTypes,  // param.requesterUserId:{param.requesterUserId|number}, param.userLoginName:{param.userLoginName|string}, param.newUserLoginName:{param.newUserLoginName|string}, param.firstName:{param.firstName|string}, param.lastName:{param.lastName|string}, param.email:{param.email|string}
    UserTableSvcUpdateUserOwnMetadata: _('API.MESSAGE_TYPES.UserTableSvc.UpdateUserOwnMetadata') as MessageTypes,  // requesterUserId:{requesterUserId|number}, newLoginName:{newLoginName|string}, firstName:{firstName|string}, lastName:{lastName|string}, email:{email|string}
    UserTableSvcLogin: _('API.MESSAGE_TYPES.UserTableSvc.Login') as MessageTypes,  // user login name:{loginName|string}, user password:{password|string}
    UserTableSvcChangeUserLockStatus: _('API.MESSAGE_TYPES.UserTableSvc.ChangeUserLockStatus') as MessageTypes,  // requesterUserId:{requesterUserId|number}, userLoginName:{userLoginName|string}, lockFlag:{lockFlag|bool}
    UserTableSvcSetUserAuthorityTemplate: _('API.MESSAGE_TYPES.UserTableSvc.SetUserAuthorityTemplate') as MessageTypes,  // requesterUserId:{requesterUserId|number}, userLoginName:{userLoginName|string}, authorityTemplateName:{authorityTemplateName|string}
    UserTableSvcRemoveUserAuthorityTemplate: _('API.MESSAGE_TYPES.UserTableSvc.RemoveUserAuthorityTemplate') as MessageTypes,  // requesterUserId:{requesterUserId|number}, userLoginName:{userLoginName|string}
    UserTableSvcDeleteUser: _('API.MESSAGE_TYPES.UserTableSvc.DeleteUser') as MessageTypes,  // requesterUserId:{requesterUserId|number}, userLoginName:{userLoginName|string}
    UserTableSvcCreateClique: _('API.MESSAGE_TYPES.UserTableSvc.CreateClique') as MessageTypes,  // requesterUserId:{requesterUserId|number}, cliqueName:{cliqueName|string}, cliqueDescription:{cliqueDescription|string}
    UserTableSvcDeleteClique: _('API.MESSAGE_TYPES.UserTableSvc.DeleteClique') as MessageTypes,  // requesterUserId:{requesterUserId|number}, cliqueName:{cliqueName|string}
    UserTableSvcUpdateClique: _('API.MESSAGE_TYPES.UserTableSvc.UpdateClique') as MessageTypes,  // requesterUserId:{requesterUserId|number}, cliqueNameOld:{cliqueNameOld|string}, cliqueNameNew:{cliqueNameNew|string}, description:{description|string}
    UserTableSvcUpdateUserAnyClique: _('API.MESSAGE_TYPES.UserTableSvc.UpdateUserAnyClique') as MessageTypes,  // requesterUserId:{requesterUserId|number}, loginName:{loginName|string}, cliqueNameNew:{cliqueNameNew|string}
    UserTableSvcSetUserDisabledTimestamp: _('API.MESSAGE_TYPES.UserTableSvc.SetUserDisabledTimestamp') as MessageTypes,  // Requester User ID:{requesterUserId|number}, input.disabledTimestamp:{input.disabledTimestamp|string}, input.targetLoginName:{input.targetLoginName|string}
    UserTableSvcResetUserDisabledTimestamp: _('API.MESSAGE_TYPES.UserTableSvc.ResetUserDisabledTimestamp') as MessageTypes,  // Requester User ID:{requesterUserId|number}, Target Login Name:{targetLoginName|string}
    UserTableSvcCreateUserWithCliqueId: _('API.MESSAGE_TYPES.UserTableSvc.CreateUserWithCliqueId') as MessageTypes,  // request user id:{param.requesterUserId|number}, param.loginName:{param.loginName|string}, param.password:{param.password|string}, param.authorityTemplateName:{param.authorityTemplateName|string}, param.firstName:{param.firstName|string}, param.lastName:{param.lastName|string}, param.email:{param.email|string}, param.cliqueId:{param.cliqueId|number}, param.majorId:{param.majorId|number}
    ReportFilterTableSvcDeleteConfiguration: _('API.MESSAGE_TYPES.ReportFilterTableSvc.DeleteConfiguration') as MessageTypes,  // uuid:{uuid|string}
    ReportFilterTableSvcAddConfiguration: _('API.MESSAGE_TYPES.ReportFilterTableSvc.AddConfiguration') as MessageTypes,  // configuration:{configuration|string}
    ReportTableSvcAddService: _('API.MESSAGE_TYPES.ReportTableSvc.AddService') as MessageTypes,  // user identifier:{requesterUserId|number}, clique of the service creator:{serviceParameters.cliqueId|number}, id of the service (rowId):{serviceParameters.serviceId|number}, user uuid of the service creator:{serviceParameters.createdByUuid|string}, name of the service:{serviceParameters.serviceName|string}, name of the files created by the service:{serviceParameters.fileNameWithoutExtension|string}, what should the service do, if it gets triggered?\n            possible options: write usbfile, upload file to sftp-server, send email:{serviceParameters.action|string}, if Action = email, send the service output to this email address:{serviceParameters.emailAddress|string}, hostname of the sftp-server, e.g. 127.0.0.1:{serviceParameters.sftpOptionsInput.host|string}, port of the sftp-server, e.g. 22:{serviceParameters.sftpOptionsInput.host.port|number}, user name for the sftp-server login:{serviceParameters.sftpOptionsInput.host.port.username|string}, password for the sftp-server login:{serviceParameters.sftpOptionsInput.host.port.username.password|string}, path on the sftp-server (store new files on this location):{serviceParameters.sftpOptionsInput.host.port.username.password.destinationPath|string}, fingerprint of sftp-server:{serviceParameters.sftpOptionsInput.host.port.username.password.destinationPath.fingerprint|string}, path of public key:{serviceParameters.sftpOptionsInput.host.port.username.password.destinationPath.fingerprint.privateKeyPath|string}, passphrase of key:{serviceParameters.sftpOptionsInput.host.port.username.password.destinationPath.fingerprint.privateKeyPath.passphrase|string}, how gets the service triggered?\n            possible options: event (e.g. new ALARM), manual, cronjob, each x records (data log entries):{serviceParameters.trigger|string}, if Trigger = event, defines the trigger events, e.g. TriggerMessageTypes = "ALARM | DISRUPTION":{serviceParameters.triggerMessageTypes|list}, if Trigger = data, we send a report after each TriggerDataIntervalCount new entries in data_dataLog:{serviceParameters.triggerDataIntervalCount|number}, if Trigger = cronjob, defines the cronjob execution time:{serviceParameters.cronJobTimeStr|string}, uuid of the device point which created this data point:{serviceParameters.dataQueryParameters.devicePointName|string}, uuid of the device point which created this data point:{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid|string}, name of the device, e.g. "Wall-E 2":{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid|string}, type of the device, e.g. "Wall-E":{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName|string}, number of the channel, e.g. 6 (6 = Temperature_Get, see enum ChannelValueCodes or emico c api):{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId|number}, channel description, e.g. Get Temperature:{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription|string}, channel unit, e.g. DegC:{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit|string}, serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin:{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin|string}, Consider only datalog elements with date less or equal DateUTCMax:{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax|string}, serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase:{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase|string}, Alternative option to set DateUTCMin and DateUTCMax\n            Only in combination with DateUTC:{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase.dateOffsetSec|number}, Value should be greater equal ValueMin\n            if we want to allow negatives values, we have to change the generator constaint "if (valueMin lower 0.0) then":{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase.dateOffsetSec.valueMin|number}, Value should be lower equal ValueMax:{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase.dateOffsetSec.valueMin.valueMax|number}, Desired Datatype:{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase.dateOffsetSec.valueMin.valueMax.dataType|OutputDataType}, should include virtual initial value\n            if no DataPoint matches filter criteria the last DataPoint befor selected timeframe is given:{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase.dateOffsetSec.valueMin.valueMax.dataType.virtualInitValue|bool}, Limits the number of returned data log entries (obtained by the query):{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase.dateOffsetSec.valueMin.valueMax.dataType.virtualInitValue.limit|number}, Offset for the query result (useful for pagination):{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase.dateOffsetSec.valueMin.valueMax.dataType.virtualInitValue.limit.offset|number}, Predicate for the seek pagination (row id):{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase.dateOffsetSec.valueMin.valueMax.dataType.virtualInitValue.limit.offset.skipToken|number}, Order the returned data log entries (by now there is only the "Date" column supported):{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase.dateOffsetSec.valueMin.valueMax.dataType.virtualInitValue.limit.offset.skipToken.orderBy|string}, Order of the returned data log entries (dependent to OrderBy)\n            "asc" or "desc" allowed, default OrderBy column is "date":{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase.dateOffsetSec.valueMin.valueMax.dataType.virtualInitValue.limit.offset.skipToken.orderBy.order|string}
    ReportTableSvcDeleteService: _('API.MESSAGE_TYPES.ReportTableSvc.DeleteService') as MessageTypes,  // user identifier:{requesterUserId|number}, id of the service:{serviceId|number}
    ReportTableSvcDeleteDatalogsOlderThanBoundedAllCliquesInternal: _('API.MESSAGE_TYPES.ReportTableSvc.DeleteDatalogsOlderThanBoundedAllCliquesInternal') as MessageTypes,  // user identifier of the requester:{requesterUserId|number}, Delete only messages with CreatedTimestamp lower equal deleteOlderThan:{deleteOlderThan|string}, Limit the number of deleted messages:{maxNumberOfDeletedMessages|number}, true = delete only messages with DeletedBy != NULL:{needsDeletedMark|bool}
    PreferenceTableSvcSetPreference: _('API.MESSAGE_TYPES.PreferenceTableSvc.SetPreference') as MessageTypes,  // requestUserId:{requestUserId|number}, uuid:{uuid|string}, applicationKey:{applicationKey|string}, content:{content|string}
    PreferenceTableSvcSetPreferenceAsJson: _('API.MESSAGE_TYPES.PreferenceTableSvc.SetPreferenceAsJson') as MessageTypes,  // requestUserId:{requestUserId|number}, uuid:{uuid|string}, applicationKey:{applicationKey|string}, content:{content|generic}
    PreferenceTableSvcSetSystemPreference: _('API.MESSAGE_TYPES.PreferenceTableSvc.SetSystemPreference') as MessageTypes,  // applicationKey:{applicationKey|string}, content:{content|string}
    PreferenceTableSvcSetSystemPreferenceAsJson: _('API.MESSAGE_TYPES.PreferenceTableSvc.SetSystemPreferenceAsJson') as MessageTypes,  // applicationKey:{applicationKey|string}, content:{content|generic}
    MessagesTableSvcUpdateMessageOwn: _('API.MESSAGE_TYPES.MessagesTableSvc.UpdateMessageOwn') as MessageTypes,  // user identifier of the requester:{requesterUserId|number}, the index of the message entry:{messageId|number}, name of existing event type (ALARM, EVENT, DISRUPTION, MAINTENANCE, ...):{eventType|EventTypes}, an error code:{errorCode|number}, summary of the message:{summary|string}, description of the message:{description|string}
    MessagesTableSvcUpdateMessageAny: _('API.MESSAGE_TYPES.MessagesTableSvc.UpdateMessageAny') as MessageTypes,  // user identifier of the requester:{requesterUserId|number}, the index of the message entry:{messageId|number}, name of existing event type (ALARM, EVENT, DISRUPTION, MAINTENANCE, ...):{eventType|EventTypes}, an error code:{errorCode|number}, summary of the message:{summary|string}, description of the message:{description|string}
    MessagesTableSvcSetMessageViewed: _('API.MESSAGE_TYPES.MessagesTableSvc.SetMessageViewed') as MessageTypes,  // requesterUserId:{requesterUserId|number}, message id's:{messageIds|list}
    MessagesTableSvcSetMessageAcknowledged: _('API.MESSAGE_TYPES.MessagesTableSvc.SetMessageAcknowledged') as MessageTypes,  // requesterUserId:{requesterUserId|number}, message id's:{messageIds|list}
    MessagesTableSvcSetMessageFixed: _('API.MESSAGE_TYPES.MessagesTableSvc.SetMessageFixed') as MessageTypes,  // requesterUserId:{requesterUserId|number}, message id's:{messageIds|list}
    MessagesTableSvcCreateEventType: _('API.MESSAGE_TYPES.MessagesTableSvc.CreateEventType') as MessageTypes,  // key:{key|number}, value:{value|string}
    MessagesTableSvcSetMessageAnyDeletedMark: _('API.MESSAGE_TYPES.MessagesTableSvc.SetMessageAnyDeletedMark') as MessageTypes,  // user identifier of the requester:{requesterUserId|number}, a comma-separated list of indices of the entries of the messages (Integer-List, e.g.: 1,2,3):{messageIds|list}
    MessagesTableSvcSetMessageOwnDeletedMark: _('API.MESSAGE_TYPES.MessagesTableSvc.SetMessageOwnDeletedMark') as MessageTypes,  // user identifier of the requester:{requesterUserId|number}, a comma-separated list of indices of the entries of the messages (Integer-List, e.g.: 1,2,3):{messageIds|list}
    MessagesTableSvcResetMessageViewed: _('API.MESSAGE_TYPES.MessagesTableSvc.ResetMessageViewed') as MessageTypes,  // user identifier of the requester:{requesterUserId|number}, a comma-separated list of indices of the entries of the messages (Integer-List, e.g.: 1,2,3):{messageIds|list}
    MessagesTableSvcResetMessageAcknowledged: _('API.MESSAGE_TYPES.MessagesTableSvc.ResetMessageAcknowledged') as MessageTypes,  // user identifier of the requester:{requesterUserId|number}, a comma-separated list of indices of the entries of the messages (Integer-List, e.g.: 1,2,3):{messageIds|list}
    MessagesTableSvcResetMessageFixed: _('API.MESSAGE_TYPES.MessagesTableSvc.ResetMessageFixed') as MessageTypes,  // user identifier of the requester:{requesterUserId|number}, a comma-separated list of indices of the entries of the messages (Integer-List, e.g.: 1,2,3):{messageIds|list}
    MessagesTableSvcResetMessageAnyDeletedMark: _('API.MESSAGE_TYPES.MessagesTableSvc.ResetMessageAnyDeletedMark') as MessageTypes,  // user identifier of the requester:{requesterUserId|number}, a comma-separated list of indices of the entries of the messages (Integer-List, e.g.: 1,2,3):{messageIds|list}
    MessagesTableSvcResetMessageOwnDeletedMark: _('API.MESSAGE_TYPES.MessagesTableSvc.ResetMessageOwnDeletedMark') as MessageTypes,  // user identifier of the requester:{requesterUserId|number}, a comma-separated list of indices of the entries of the messages (Integer-List, e.g.: 1,2,3):{messageIds|list}
    MessagesTableSvcUpdateMessageAnyByIndex: _('API.MESSAGE_TYPES.MessagesTableSvc.UpdateMessageAnyByIndex') as MessageTypes,  // user identifier of the requester:{requesterUserId|number}, the index of the message entry:{messageIndex|string}, name of existing event type (ALARM, EVENT, DISRUPTION, MAINTENANCE, ...):{eventType|string}, an error code:{errorCode|number}, summary of the message:{summary|string}, description of the message:{description|string}
    MessagesTableSvcUpdateMessageOwnByIndex: _('API.MESSAGE_TYPES.MessagesTableSvc.UpdateMessageOwnByIndex') as MessageTypes,  // user identifier of the requester:{requesterUserId|number}, the index of the message entry:{messageIndex|string}, name of existing event type (ALARM, EVENT, DISRUPTION, MAINTENANCE, ...):{eventType|string}, an error code:{errorCode|number}, summary of the message:{summary|string}, description of the message:{description|string}
    MessagesTableSvcDeleteMessages: _('API.MESSAGE_TYPES.MessagesTableSvc.DeleteMessages') as MessageTypes,  // user identifier of the requester:{requesterUserId|number}, a comma-separated list of indices of the entries of the messages (Integer-List, e.g.: 1,2,3):{messageIds|list}
    MessagesTableSvcDeleteMessagesOlderThan: _('API.MESSAGE_TYPES.MessagesTableSvc.DeleteMessagesOlderThan') as MessageTypes,  // user identifier of the requester:{requesterUserId|number}, All messages older than this time will be deleted (examples: '2019-06-18T06:14:48', '2019-06-18 06:15', '2019-06-19'):{timestampValue|string}
    MessagesTableSvcDeleteMessagesOlderThanBoundedAllCliquesInternal: _('API.MESSAGE_TYPES.MessagesTableSvc.DeleteMessagesOlderThanBoundedAllCliquesInternal') as MessageTypes,  // user identifier of the requester:{requesterUserId|number}, All messages older than this time will be deleted (examples: '2019-06-18T06:14:48', '2019-06-18 06:15', '2019-06-19'):{timestampValue|string}, Count of messages to be deleted:{count|number}
    MessagesTableSvcDeleteMessagesAnyDeletedMarkOlderThanBoundedAllCliquesInternal: _('API.MESSAGE_TYPES.MessagesTableSvc.DeleteMessagesAnyDeletedMarkOlderThanBoundedAllCliquesInternal') as MessageTypes,  // user identifier of the requester:{requesterUserId|number}, All messages older than this time will be deleted (examples: '2019-06-18T06:14:48', '2019-06-18 06:15', '2019-06-19'):{timestampValue|string}, Count of messages to be deleted:{count|number}
    MessagesTableSvcDeleteLastMessages: _('API.MESSAGE_TYPES.MessagesTableSvc.DeleteLastMessages') as MessageTypes,  // user identifier of the requester:{requesterUserId|number}, Count of messages to be deleted:{count|number}
    FunctionManagementTableSvcSetCleaningShutdownEndTimestamp: _('API.MESSAGE_TYPES.FunctionManagementTableSvc.SetCleaningShutdownEndTimestamp') as MessageTypes,  // requesterUserId:{requesterUserId|number}, Name of the function:{devicePointGroupFunctionName|string}, Timestamp of the end of the cleaning shutdown:{cleaningShutdownEnd|string}
    FunctionManagementTableSvcSetLastExecutionTimestamp: _('API.MESSAGE_TYPES.FunctionManagementTableSvc.SetLastExecutionTimestamp') as MessageTypes,  // requesterUserId:{requesterUserId|number}, Name of the flush schedule:{devicePointGroupFunctionName|string}, Exectuion time of the flush:{executionTime|string}, Type of the flush pipe:{flushPipeType|FlushPipeType}
    FunctionManagementTableSvcCreateFunction: _('API.MESSAGE_TYPES.FunctionManagementTableSvc.CreateFunction') as MessageTypes,  // requesterUserId:{requesterUserId|number}, Is the function disabled?:{functionInput.disabledTimestamp|string}, true = flush all devices from DevicePointArrangement in paralell\n            false = flush the devices one after another (sequential order):{functionInput.flushSchedule.flushParallel|bool}, Flush if this threshold is reached aka stagnation time max:{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours|number}, The flush is starting at this point in time, e.g. 05.06.19 08:32:{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc|string}, Waiting time between two flushes:{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours|number}, functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated:{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated|bool}, functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan:{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan|number}, functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon:{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon|list}, functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue:{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue|list}, functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed:{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed|list}, functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu:{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu|list}, functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri:{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri|list}, functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat:{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat|list}, functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun:{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun|list}, Start of the range, only hours and minutes are used, e.g. 02:03:{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun.noFlushFrame.fromHourMinute|string}, End of the range, only hours and minutes are used, e.g. 06:59:{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun.noFlushFrame.fromHourMinute.toHourMinute|string}, true = use legacy versions of flush and thermal disinfection:{functionInput.legacy|bool}, Name of the function.\n            Is unique, could be used as id:{functionInput.name|string}, functionInput.remark:{functionInput.remark|string}, Type of the function e.g. circulation:{functionInput.type|FunctionTypes}, functionInput.circulationInput.temperatureLevelObject.temperatureLevel:{functionInput.circulationInput.temperatureLevelObject.temperatureLevel|TemperatureLevelCirculation}, only != null if TemperatureLevelCirculation = UfcManualConfig:{functionInput.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius|number}, only != null if TemperatureLevelCirculation = UfcManualConfig:{functionInput.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius.pwhcTemperatureCelsius|number}, functionInput.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius.pwhcTemperatureCelsius.isSelectable:{functionInput.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius.pwhcTemperatureCelsius.isSelectable|generic}, uuid of the key switch:{functionInput.keySwitchUuid|string}, Uuid for the DTE (water heating element):{functionInput.dteUuid|string}, Uuid for UFC fault contact, only allowed for a circulation function:{functionInput.ufcFaultContactUuid|string}, Use UFC, only allowed for a circulation function:{functionInput.useUFC|bool}, List of circulation valves:{functionInput.circulationValveConfigurationMapping|generic}, Device uuid's for the flush operation\n            The first element will be flushed first, the second element will be flushed second and so on.:{functionInput.flushableDevicePointUuids|list}, Sensor for pwc:{functionInput.temperatureSensorPwcDevicePointUuid|string}, Clique id of the function:{cliqueId|number}
    FunctionManagementTableSvcUpdateDevicePointGroupFunction: _('API.MESSAGE_TYPES.FunctionManagementTableSvc.UpdateDevicePointGroupFunction') as MessageTypes,  // requesterUserId:{requesterUserId|number}, Name of the function>:{devicePointGroupFunctionName|string}, Is the function disabled?:{updatedFunctionInput.disabledTimestamp|string}, true = flush all devices from DevicePointArrangement in paralell\n            false = flush the devices one after another (sequential order):{updatedFunctionInput.flushSchedule.flushParallel|bool}, Flush if this threshold is reached aka stagnation time max:{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours|number}, The flush is starting at this point in time, e.g. 05.06.19 08:32:{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc|string}, Waiting time between two flushes:{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours|number}, updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated:{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated|bool}, updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan:{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan|number}, updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon:{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon|list}, updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue:{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue|list}, updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed:{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed|list}, updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu:{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu|list}, updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri:{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri|list}, updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat:{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat|list}, updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun:{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun|list}, Start of the range, only hours and minutes are used, e.g. 02:03:{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun.noFlushFrame.fromHourMinute|string}, End of the range, only hours and minutes are used, e.g. 06:59:{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun.noFlushFrame.fromHourMinute.toHourMinute|string}, true = use legacy versions of flush and thermal disinfection:{updatedFunctionInput.legacy|bool}, Name of the function.\n            Is unique, could be used as id:{updatedFunctionInput.name|string}, updatedFunctionInput.remark:{updatedFunctionInput.remark|string}, Type of the function e.g. circulation:{updatedFunctionInput.type|FunctionTypes}, updatedFunctionInput.circulationInput.temperatureLevelObject.temperatureLevel:{updatedFunctionInput.circulationInput.temperatureLevelObject.temperatureLevel|TemperatureLevelCirculation}, only != null if TemperatureLevelCirculation = UfcManualConfig:{updatedFunctionInput.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius|number}, only != null if TemperatureLevelCirculation = UfcManualConfig:{updatedFunctionInput.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius.pwhcTemperatureCelsius|number}, updatedFunctionInput.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius.pwhcTemperatureCelsius.isSelectable:{updatedFunctionInput.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius.pwhcTemperatureCelsius.isSelectable|generic}, uuid of the key switch:{updatedFunctionInput.keySwitchUuid|string}, Uuid for the DTE (water heating element):{updatedFunctionInput.dteUuid|string}, Uuid for UFC fault contact, only allowed for a circulation function:{updatedFunctionInput.ufcFaultContactUuid|string}, Use UFC, only allowed for a circulation function:{updatedFunctionInput.useUFC|bool}, List of circulation valves:{updatedFunctionInput.circulationValveConfigurationMapping|generic}, Device uuid's for the flush operation\n            The first element will be flushed first, the second element will be flushed second and so on.:{updatedFunctionInput.flushableDevicePointUuids|list}, Sensor for pwc:{updatedFunctionInput.temperatureSensorPwcDevicePointUuid|string}
    FunctionManagementTableSvcDeleteDevicePointGroupFunction: _('API.MESSAGE_TYPES.FunctionManagementTableSvc.DeleteDevicePointGroupFunction') as MessageTypes,  // requesterUserId:{requesterUserId|number}, Name of the function:{devicePointGroupFunctionName|string}
    FunctionManagementTableSvcSetDisabledTimestamp: _('API.MESSAGE_TYPES.FunctionManagementTableSvc.SetDisabledTimestamp') as MessageTypes,  // requesterUserId:{requesterUserId|number}, Name of the function:{devicePointGroupFunctionName|string}, function is disabled if disabledTimestamp >= DateTime.UtcNow:{disabledTimestamp|string}
    FunctionManagementTableSvcAddFlushableDevicePointToGroupFunction: _('API.MESSAGE_TYPES.FunctionManagementTableSvc.AddFlushableDevicePointToGroupFunction') as MessageTypes,  // requesterUserId:{requesterUserId|number}, functionName:{functionName|string}, devicePointUuid:{devicePointUuid|string}, true => add at the beginning of the device list, false => add at the end of the device list:{hasHighPriority|bool}
    FunctionManagementTableSvcRemoveFlushableDevicePointToGroupFunction: _('API.MESSAGE_TYPES.FunctionManagementTableSvc.RemoveFlushableDevicePointToGroupFunction') as MessageTypes,  // requesterUserId:{requesterUserId|number}, functionName:{functionName|string}, devicePointUuid:{devicePointUuid|string}
    FunctionManagementTableSvcResetDisabledTimestamp: _('API.MESSAGE_TYPES.FunctionManagementTableSvc.ResetDisabledTimestamp') as MessageTypes,  // requesterUserId:{requesterUserId|number}, devicePointGroupFunctionName:{devicePointGroupFunctionName|string}
    FunctionManagementTableSvcSetExcecutedAtLeastOnce: _('API.MESSAGE_TYPES.FunctionManagementTableSvc.SetExcecutedAtLeastOnce') as MessageTypes,  // requesterUserId:{requesterUserId|number}, true = if this function is at least executed once\n            Used to calculate the next flush after a power loss:{functionInternal.executedAtLeastOnce|bool}, Clique of the function:{functionInternal.cliqueId|number}, Is the function disabled?:{functionInternal.disabledTimestamp|generic}, Last execution of the flush for the pwh:{functionInternal.flushSchedule.lastExecutionPwhTimestamp|generic}, Last execution of the flush for the pwc:{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp|generic}, End timestamp of the cleaning shutdown:{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp|generic}, true = flush all devices from DevicePointArrangement in paralell\n            false = flush the devices one after another (sequential order):{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel|bool}, Flush if this threshold is reached aka stagnation time max:{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours|number}, The flush is starting at this point in time, e.g. 05.06.19 08:32:{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc|string}, Waiting time between two flushes:{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours|number}, functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated:{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated|bool}, functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan:{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan|number}, functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon:{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon|list}, functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue:{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue|list}, functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed:{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed|list}, functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu:{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu|list}, functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri:{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri|list}, functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat:{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat|list}, functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun:{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun|list}, Start of the range, only hours and minutes are used, e.g. 02:03:{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun.noFlushFrame.fromHourMinute|string}, End of the range, only hours and minutes are used, e.g. 06:59:{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun.noFlushFrame.fromHourMinute.toHourMinute|string}, functionInternal.circulationValveUuids:{functionInternal.circulationValveUuids|list}, true = use legacy versions of flush and thermal disinfection:{functionInternal.legacy|bool}, Name of the function.\n            Is unique, could be used as id:{functionInternal.name|string}, functionInternal.remark:{functionInternal.remark|string}, Type of the function e.g. circulation:{functionInternal.type|FunctionTypes}, functionInternal.circulationInput.temperatureLevelObject.temperatureLevel:{functionInternal.circulationInput.temperatureLevelObject.temperatureLevel|TemperatureLevelCirculation}, only != null if TemperatureLevelCirculation = UfcManualConfig:{functionInternal.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius|number}, only != null if TemperatureLevelCirculation = UfcManualConfig:{functionInternal.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius.pwhcTemperatureCelsius|number}, functionInternal.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius.pwhcTemperatureCelsius.isSelectable:{functionInternal.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius.pwhcTemperatureCelsius.isSelectable|generic}, uuid of the key switch:{functionInternal.keySwitchUuid|string}, Uuid for the DTE (water heating element):{functionInternal.dteUuid|string}, Uuid for UFC fault contact, only allowed for a circulation function:{functionInternal.ufcFaultContactUuid|string}, Use UFC, only allowed for a circulation function:{functionInternal.useUFC|bool}, List of circulation valves:{functionInternal.circulationValveConfigurationMapping|generic}, Device uuid's for the flush operation\n            The first element will be flushed first, the second element will be flushed second and so on.:{functionInternal.flushableDevicePointUuids|list}, Sensor for pwc:{functionInternal.temperatureSensorPwcDevicePointUuid|string}
    ControllerPointTableSvcDeleteControllerPoint: _('API.MESSAGE_TYPES.ControllerPointTableSvc.DeleteControllerPoint') as MessageTypes,  // Requester User ID:{requesterUserId|number}, UUID of Device Controller:{uuid|string}
    ControllerPointTableSvcSetControllerPointMainMetaData: _('API.MESSAGE_TYPES.ControllerPointTableSvc.SetControllerPointMainMetaData') as MessageTypes,  // Requester User ID:{requesterUserId|number}, controllerPointEdit.uuid:{controllerPointEdit.uuid|string}, controllerPointEdit.name:{controllerPointEdit.name|string}, controllerPointEdit.controllerId:{controllerPointEdit.controllerId|number}, controllerPointEdit.remark:{controllerPointEdit.remark|string}, controllerPointEdit.building:{controllerPointEdit.building|string}, controllerPointEdit.area:{controllerPointEdit.area|string}, controllerPointEdit.room:{controllerPointEdit.room|string}, controllerPointEdit.segment:{controllerPointEdit.segment|string}, controllerPointEdit.newEnabledTimestamp:{controllerPointEdit.newEnabledTimestamp|generic}, controllerPointEdit.newDisabledTimestamp:{controllerPointEdit.newDisabledTimestamp|generic}
    ControllerPointTableSvcUpdateControllerPoint: _('API.MESSAGE_TYPES.ControllerPointTableSvc.UpdateControllerPoint') as MessageTypes,  // Requester User ID:{requesterUserId|number}, controllerPointEdit.uuid:{controllerPointEdit.uuid|string}, controllerPointEdit.name:{controllerPointEdit.name|string}, controllerPointEdit.controllerId:{controllerPointEdit.controllerId|number}, controllerPointEdit.remark:{controllerPointEdit.remark|string}, controllerPointEdit.building:{controllerPointEdit.building|string}, controllerPointEdit.area:{controllerPointEdit.area|string}, controllerPointEdit.room:{controllerPointEdit.room|string}, controllerPointEdit.segment:{controllerPointEdit.segment|string}, controllerPointEdit.newEnabledTimestamp:{controllerPointEdit.newEnabledTimestamp|generic}, controllerPointEdit.newDisabledTimestamp:{controllerPointEdit.newDisabledTimestamp|generic}
    ControllerPointTableSvcSetControllerPointControllerId: _('API.MESSAGE_TYPES.ControllerPointTableSvc.SetControllerPointControllerId') as MessageTypes,  // Requester User ID:{requesterUserId|number}, controllerPointEdit.uuid:{controllerPointEdit.uuid|string}, controllerPointEdit.name:{controllerPointEdit.name|string}, controllerPointEdit.controllerId:{controllerPointEdit.controllerId|number}, controllerPointEdit.remark:{controllerPointEdit.remark|string}, controllerPointEdit.building:{controllerPointEdit.building|string}, controllerPointEdit.area:{controllerPointEdit.area|string}, controllerPointEdit.room:{controllerPointEdit.room|string}, controllerPointEdit.segment:{controllerPointEdit.segment|string}, controllerPointEdit.newEnabledTimestamp:{controllerPointEdit.newEnabledTimestamp|generic}, controllerPointEdit.newDisabledTimestamp:{controllerPointEdit.newDisabledTimestamp|generic}
    ControllerPointTableSvcSetControllerPointEnabledTimestamp: _('API.MESSAGE_TYPES.ControllerPointTableSvc.SetControllerPointEnabledTimestamp') as MessageTypes,  // Requester User ID:{requesterUserId|number}, controllerPointEdit.uuid:{controllerPointEdit.uuid|string}, controllerPointEdit.name:{controllerPointEdit.name|string}, controllerPointEdit.controllerId:{controllerPointEdit.controllerId|number}, controllerPointEdit.remark:{controllerPointEdit.remark|string}, controllerPointEdit.building:{controllerPointEdit.building|string}, controllerPointEdit.area:{controllerPointEdit.area|string}, controllerPointEdit.room:{controllerPointEdit.room|string}, controllerPointEdit.segment:{controllerPointEdit.segment|string}, controllerPointEdit.newEnabledTimestamp:{controllerPointEdit.newEnabledTimestamp|generic}, controllerPointEdit.newDisabledTimestamp:{controllerPointEdit.newDisabledTimestamp|generic}
    ControllerPointTableSvcSetControllerPointDisabledTimestamp: _('API.MESSAGE_TYPES.ControllerPointTableSvc.SetControllerPointDisabledTimestamp') as MessageTypes,  // Requester User ID:{requesterUserId|number}, controllerPointEdit.uuid:{controllerPointEdit.uuid|string}, controllerPointEdit.name:{controllerPointEdit.name|string}, controllerPointEdit.controllerId:{controllerPointEdit.controllerId|number}, controllerPointEdit.remark:{controllerPointEdit.remark|string}, controllerPointEdit.building:{controllerPointEdit.building|string}, controllerPointEdit.area:{controllerPointEdit.area|string}, controllerPointEdit.room:{controllerPointEdit.room|string}, controllerPointEdit.segment:{controllerPointEdit.segment|string}, controllerPointEdit.newEnabledTimestamp:{controllerPointEdit.newEnabledTimestamp|generic}, controllerPointEdit.newDisabledTimestamp:{controllerPointEdit.newDisabledTimestamp|generic}
    ControllerPointTableSvcInstallControllerToControllerPoint: _('API.MESSAGE_TYPES.ControllerPointTableSvc.InstallControllerToControllerPoint') as MessageTypes,  // Requester User ID:{requesterUserId|number}, input.controllerUUID:{input.controllerUUID|string}, input.controllerPointUUID:{input.controllerPointUUID|string}
    ControllerPointTableSvcUninstallControllerFromControllerPoint: _('API.MESSAGE_TYPES.ControllerPointTableSvc.UninstallControllerFromControllerPoint') as MessageTypes,  // Requester User ID:{requesterUserId|number}, target controller uuid:{uuid|string}
    ControllerPointTableSvcAssignPointAddressToControllerPoint: _('API.MESSAGE_TYPES.ControllerPointTableSvc.AssignPointAddressToControllerPoint') as MessageTypes,  // Requester User ID:{requesterUserId|number}, input.building:{input.building|string}, input.area:{input.area|string}, input.room:{input.room|string}, input.segment:{input.segment|string}, input.controllerPointUUID:{input.controllerPointUUID|string}
    ControllerPointTableSvcCreateControllerPointWithCliqueId: _('API.MESSAGE_TYPES.ControllerPointTableSvc.CreateControllerPointWithCliqueId') as MessageTypes,  // user identifier:{requesterUserId|number}, id of the clique:{cliqueId|number}, name of a controller point:{name|string}, id of the controller:{controllerId|number}, remark of the controller point:{remark|string}
    ControllerPointTableSvcCreateControllerPointWithUUIDAndCliqueId: _('API.MESSAGE_TYPES.ControllerPointTableSvc.CreateControllerPointWithUUIDAndCliqueId') as MessageTypes,  // user identifier:{requesterUserId|number}, id of the clique:{cliqueId|number}, name of a controller point:{name|string}, id of the controller:{controllerId|number}, remark of the controller point:{remark|string}, UUID of the device:{targetUUID|string}
    ControllerTableSvcSetControllerMainMetadata: _('API.MESSAGE_TYPES.ControllerTableSvc.SetControllerMainMetadata') as MessageTypes,  // Requester User ID:{requesterUserId|number}, UUID of Controller:{controllerParams.uuid|string}, Controller name:{controllerParams.newName|string}, SerialNumber of Controller:{controllerParams.newSerialNumber|string}, Remark of Controller:{controllerParams.newRemark|string}, Maintenance Interval of Controller:{controllerParams.newMaintenanceIntervalDays|number}, Last Maintenance Timestamp of Controller:{controllerParams.newLastMaintenanceTimestamp|generic}
    ControllerTableSvcSetControllerMetadata: _('API.MESSAGE_TYPES.ControllerTableSvc.SetControllerMetadata') as MessageTypes,  // Requester User ID:{requesterUserId|number}, UUID:{controllerParams.uuid|string}, Controller name:{controllerParams.newName|string}, SerialNumber of Controller:{controllerParams.newSerialNumber|string}, Remark of Controller:{controllerParams.newRemark|string}, Maintenance Interval of Controller:{controllerParams.newMaintenanceInterval|string}, Last Maintenance Timestamp of Controller:{controllerParams.newLastMaintenanceTimestamp|generic}
    ControllerTableSvcSetControllerMaintenance: _('API.MESSAGE_TYPES.ControllerTableSvc.SetControllerMaintenance') as MessageTypes,  // Requester User ID:{requesterUserId|number}, UUID of Controller:{controllerParams.uuid|string}, Controller name:{controllerParams.newName|string}, SerialNumber of Controller:{controllerParams.newSerialNumber|string}, Remark of Controller:{controllerParams.newRemark|string}, Maintenance Interval of Controller:{controllerParams.newMaintenanceIntervalDays|number}, Last Maintenance Timestamp of Controller:{controllerParams.newLastMaintenanceTimestamp|generic}
    ControllerTableSvcSetControllerCliqueID: _('API.MESSAGE_TYPES.ControllerTableSvc.SetControllerCliqueID') as MessageTypes,  // Requester User ID:{requesterUserId|number}, controllerParams.uuid:{controllerParams.uuid|string}, controllerParams.newCliqueID:{controllerParams.newCliqueID|number}
    ControllerTableSvcSetControllerCliqueIDByName: _('API.MESSAGE_TYPES.ControllerTableSvc.SetControllerCliqueIDByName') as MessageTypes,  // Requester User ID:{requesterUserId|number}, controllerParams.targetName:{controllerParams.targetName|string}, controllerParams.newCliqueID:{controllerParams.newCliqueID|number}
    ControllerTableSvcDeleteController: _('API.MESSAGE_TYPES.ControllerTableSvc.DeleteController') as MessageTypes,  // Requester User ID:{requesterUserId|number}, UUID of Controller:{uuid|string}
    ControllerTableSvcCreateControllerWithCliqueId: _('API.MESSAGE_TYPES.ControllerTableSvc.CreateControllerWithCliqueId') as MessageTypes,  // user identifier:{requesterUserId|number}, id of the clique:{cliqueId|number}, name of the controller:{name|string}, serial number of the controller:{serialNumber|string}, remark of the controller:{remark|string}, timestamp of last maintenance:{lastMaintenanceTimestamp|string}, interval of maintenance:{maintenanceInterval|string}
    ControllerTableSvcCreateControllerWithUUIDAndCliqueId: _('API.MESSAGE_TYPES.ControllerTableSvc.CreateControllerWithUUIDAndCliqueId') as MessageTypes,  // user identifier:{requesterUserId|number}, id of the clique:{cliqueId|number}, name of the controller:{name|string}, serial number of the controller:{serialNumber|string}, remark of the controller:{remark|string}, timestamp of last maintenance:{lastMaintenanceTimestamp|string}, interval of maintenance:{maintenanceInterval|string}, UUID of the device:{targetUUID|string}
    DevicePointTableSvcDeleteDevicePoint: _('API.MESSAGE_TYPES.DevicePointTableSvc.DeleteDevicePoint') as MessageTypes,  // Requester User ID:{requesterUserId|number}, UUID of the DevicePoint:{uuid|string}
    DevicePointTableSvcSetDevicePointMetadata: _('API.MESSAGE_TYPES.DevicePointTableSvc.SetDevicePointMetadata') as MessageTypes,  // Requester User ID:{requesterUserId|number}, devicePoint.uuid:{devicePoint.uuid|string}, devicePoint.newName:{devicePoint.newName|string}, devicePoint.newNodeID:{devicePoint.newNodeID|number}, devicePoint.newControllerID:{devicePoint.newControllerID|number}, devicePoint.newRemark:{devicePoint.newRemark|string}, devicePoint.newEnabledTimestamp:{devicePoint.newEnabledTimestamp|string}, devicePoint.newDisabledTimestamp:{devicePoint.newDisabledTimestamp|string}
    DevicePointTableSvcSetDevicePointMainMetaData: _('API.MESSAGE_TYPES.DevicePointTableSvc.SetDevicePointMainMetaData') as MessageTypes,  // Requester User ID:{requesterUserId|number}, devicePointEdit.uuid:{devicePointEdit.uuid|string}, devicePointEdit.name:{devicePointEdit.name|string}, devicePointEdit.controllerId:{devicePointEdit.controllerId|number}, devicePointEdit.nodeId:{devicePointEdit.nodeId|number}, devicePointEdit.remark:{devicePointEdit.remark|string}, devicePointEdit.building:{devicePointEdit.building|string}, devicePointEdit.area:{devicePointEdit.area|string}, devicePointEdit.room:{devicePointEdit.room|string}, devicePointEdit.segment:{devicePointEdit.segment|string}, devicePointEdit.newEnabledTimestamp:{devicePointEdit.newEnabledTimestamp|generic}, devicePointEdit.newDisabledTimestamp:{devicePointEdit.newDisabledTimestamp|generic}
    DevicePointTableSvcUpdateDevicePoint: _('API.MESSAGE_TYPES.DevicePointTableSvc.UpdateDevicePoint') as MessageTypes,  // Requester User ID:{requesterUserId|number}, devicePointEdit.uuid:{devicePointEdit.uuid|string}, devicePointEdit.name:{devicePointEdit.name|string}, devicePointEdit.controllerId:{devicePointEdit.controllerId|number}, devicePointEdit.nodeId:{devicePointEdit.nodeId|number}, devicePointEdit.remark:{devicePointEdit.remark|string}, devicePointEdit.building:{devicePointEdit.building|string}, devicePointEdit.area:{devicePointEdit.area|string}, devicePointEdit.room:{devicePointEdit.room|string}, devicePointEdit.segment:{devicePointEdit.segment|string}, devicePointEdit.newEnabledTimestamp:{devicePointEdit.newEnabledTimestamp|generic}, devicePointEdit.newDisabledTimestamp:{devicePointEdit.newDisabledTimestamp|generic}
    DevicePointTableSvcSetDevicePointControllerIdAndNodeId: _('API.MESSAGE_TYPES.DevicePointTableSvc.SetDevicePointControllerIdAndNodeId') as MessageTypes,  // Requester User ID:{requesterUserId|number}, devicePointEdit.uuid:{devicePointEdit.uuid|string}, devicePointEdit.name:{devicePointEdit.name|string}, devicePointEdit.controllerId:{devicePointEdit.controllerId|number}, devicePointEdit.nodeId:{devicePointEdit.nodeId|number}, devicePointEdit.remark:{devicePointEdit.remark|string}, devicePointEdit.building:{devicePointEdit.building|string}, devicePointEdit.area:{devicePointEdit.area|string}, devicePointEdit.room:{devicePointEdit.room|string}, devicePointEdit.segment:{devicePointEdit.segment|string}, devicePointEdit.newEnabledTimestamp:{devicePointEdit.newEnabledTimestamp|generic}, devicePointEdit.newDisabledTimestamp:{devicePointEdit.newDisabledTimestamp|generic}
    DevicePointTableSvcSetDevicePointEnabledTimestamp: _('API.MESSAGE_TYPES.DevicePointTableSvc.SetDevicePointEnabledTimestamp') as MessageTypes,  // Requester User ID:{requesterUserId|number}, devicePointEdit.uuid:{devicePointEdit.uuid|string}, devicePointEdit.name:{devicePointEdit.name|string}, devicePointEdit.controllerId:{devicePointEdit.controllerId|number}, devicePointEdit.nodeId:{devicePointEdit.nodeId|number}, devicePointEdit.remark:{devicePointEdit.remark|string}, devicePointEdit.building:{devicePointEdit.building|string}, devicePointEdit.area:{devicePointEdit.area|string}, devicePointEdit.room:{devicePointEdit.room|string}, devicePointEdit.segment:{devicePointEdit.segment|string}, devicePointEdit.newEnabledTimestamp:{devicePointEdit.newEnabledTimestamp|generic}, devicePointEdit.newDisabledTimestamp:{devicePointEdit.newDisabledTimestamp|generic}
    DevicePointTableSvcSetDevicePointDisabledTimestamp: _('API.MESSAGE_TYPES.DevicePointTableSvc.SetDevicePointDisabledTimestamp') as MessageTypes,  // Requester User ID:{requesterUserId|number}, devicePointEdit.uuid:{devicePointEdit.uuid|string}, devicePointEdit.name:{devicePointEdit.name|string}, devicePointEdit.controllerId:{devicePointEdit.controllerId|number}, devicePointEdit.nodeId:{devicePointEdit.nodeId|number}, devicePointEdit.remark:{devicePointEdit.remark|string}, devicePointEdit.building:{devicePointEdit.building|string}, devicePointEdit.area:{devicePointEdit.area|string}, devicePointEdit.room:{devicePointEdit.room|string}, devicePointEdit.segment:{devicePointEdit.segment|string}, devicePointEdit.newEnabledTimestamp:{devicePointEdit.newEnabledTimestamp|generic}, devicePointEdit.newDisabledTimestamp:{devicePointEdit.newDisabledTimestamp|generic}
    DevicePointTableSvcInstallDeviceToDevicePoint: _('API.MESSAGE_TYPES.DevicePointTableSvc.InstallDeviceToDevicePoint') as MessageTypes,  // Requester User Id:{requesterUserId|number}, UUID of the target device:{deviceUUID|string}, UUID of the target device point:{devicePointUUID|string}
    DevicePointTableSvcUninstallDeviceFromDevicePoint: _('API.MESSAGE_TYPES.DevicePointTableSvc.UninstallDeviceFromDevicePoint') as MessageTypes,  // Requester User Id:{requesterUserId|number}, UUID of the target device:{deviceUUID|string}, UUID of the target device point:{devicePointUUID|string}
    DevicePointTableSvcAssignPointAddressToDevicePoint: _('API.MESSAGE_TYPES.DevicePointTableSvc.AssignPointAddressToDevicePoint') as MessageTypes,  // Requester User ID:{requesterUserId|number}, input.pointAddressUUID:{input.pointAddressUUID|string}, input.devicePointUUID:{input.devicePointUUID|string}, input.building:{input.building|string}, input.area:{input.area|string}, input.room:{input.room|string}, input.segment:{input.segment|string}
    DevicePointTableSvcSetDevicePointNodeId: _('API.MESSAGE_TYPES.DevicePointTableSvc.SetDevicePointNodeId') as MessageTypes,  // requesterUserId:{requesterUserId|number}, devicePointUUID:{devicePointUUID|string}, nodeId:{nodeId|number}
    DevicePointTableSvcAssignControllerPointToDevicePoint: _('API.MESSAGE_TYPES.DevicePointTableSvc.AssignControllerPointToDevicePoint') as MessageTypes,  // Requester User ID:{requesterUserId|number}, input.targetUUID:{input.targetUUID|string}, input.controllerID:{input.controllerID|number}
    DevicePointTableSvcUnassignControllerPointFromDevicePoint: _('API.MESSAGE_TYPES.DevicePointTableSvc.UnassignControllerPointFromDevicePoint') as MessageTypes,  // Requester User ID:{requesterUserId|number}, Target UUID of Device Point:{targetUUID|string}
    DevicePointTableSvcSetDevicePointCliqueId: _('API.MESSAGE_TYPES.DevicePointTableSvc.SetDevicePointCliqueId') as MessageTypes,  // Requester User ID:{requesterUserId|number}, devicePointParams.targetUUID:{devicePointParams.targetUUID|string}, devicePointParams.cliqueID:{devicePointParams.cliqueID|number}
    DevicePointTableSvcSetDevicePointCliqueIdByName: _('API.MESSAGE_TYPES.DevicePointTableSvc.SetDevicePointCliqueIdByName') as MessageTypes,  // Requester User ID:{requesterUserId|number}, devicePointParams.targetName:{devicePointParams.targetName|string}, devicePointParams.cliqueID:{devicePointParams.cliqueID|number}
    DevicePointTableSvcAssignPointAddressUUIDToDevicePoint: _('API.MESSAGE_TYPES.DevicePointTableSvc.AssignPointAddressUUIDToDevicePoint') as MessageTypes,  // Requester User ID:{requesterUserId|number}, Target UUID:{targetUUID|string}, Point Address UUID:{pointAddressUUID|string}
    DevicePointTableSvcResetDevicePointDisabledTimestamp: _('API.MESSAGE_TYPES.DevicePointTableSvc.ResetDevicePointDisabledTimestamp') as MessageTypes,  // requesterUserId:{requesterUserId|number}, uuid:{uuid|string}
    DevicePointTableSvcCreateDevicePointWithCliqueId: _('API.MESSAGE_TYPES.DevicePointTableSvc.CreateDevicePointWithCliqueId') as MessageTypes,  // user identifier:{requesterUserId|number}, id of the clique:{cliqueId|number}, name of this device point:{name|string}, node id for use in opcsa:{nodeId|number}, comment on this device point:{remark|string}, name of the device type:{deviceTypeName|string}
    DevicePointTableSvcCreateDevicePointWithUUIDAndCliqueId: _('API.MESSAGE_TYPES.DevicePointTableSvc.CreateDevicePointWithUUIDAndCliqueId') as MessageTypes,  // user identifier:{requesterUserId|number}, id of the clique:{cliqueId|number}, name of this device point:{name|string}, node id for use in opcsa:{nodeId|number}, comment on this device point:{remark|string}, name of the device type:{deviceTypeName|string}, UUID of the device:{targetUUID|string}
    DevicePointTableSvcCreateDevicePointWithCliqueIdLesser: _('API.MESSAGE_TYPES.DevicePointTableSvc.CreateDevicePointWithCliqueIdLesser') as MessageTypes,  // user identifier:{requesterUserId|number}, id of the clique:{cliqueId|number}, name of this device point:{name|string}, comment on this device point:{remark|string}, name of the device type:{deviceTypeName|string}
    DevicesTableSvcDeleteDevice: _('API.MESSAGE_TYPES.DevicesTableSvc.DeleteDevice') as MessageTypes,  // Requester User Id:{requesterUserId|number}, uuid:{uuid|string}
    DevicesTableSvcSetDeviceMainMetadata: _('API.MESSAGE_TYPES.DevicesTableSvc.SetDeviceMainMetadata') as MessageTypes,  // Requester User Id:{requesterUserId|number}, UUID of Device:{param.uuid|string}, Device name:{param.newName|string}, SerialNumber of Device:{param.newSerialNumber|number}, Revision Number of Device:{param.newRevisionNumber|number}, Device Type Name:{param.newDeviceTypeName|string}, Remark of Device:{param.newRemark|string}
    DevicesTableSvcTransferDeviceConfiguration: _('API.MESSAGE_TYPES.DevicesTableSvc.TransferDeviceConfiguration') as MessageTypes,  // UUID of source device:{sourceUUID|string}, UUID of target device:{targetUUID|string}
    DevicesTableSvcCreateDeviceFirmware: _('API.MESSAGE_TYPES.DevicesTableSvc.CreateDeviceFirmware') as MessageTypes,  // Requester User Id:{requesterUserId|number}, Version of the Device Firmware:{createDeviceFirmwareParameters.version|string}, Remark of the Device Firmware:{createDeviceFirmwareParameters.remark|string}, Firmware File of the Device Firmware:{createDeviceFirmwareParameters.filePath|string}
    DevicesTableSvcSetDeviceFirmware: _('API.MESSAGE_TYPES.DevicesTableSvc.SetDeviceFirmware') as MessageTypes,  // Requester User Id:{requesterUserId|number}, param.version:{param.version|string}, param.newVersion:{param.newVersion|string}, param.remark:{param.remark|string}, param.filePath:{param.filePath|string}
    DevicesTableSvcDeleteDeviceFirmware: _('API.MESSAGE_TYPES.DevicesTableSvc.DeleteDeviceFirmware') as MessageTypes,  // Requester User Id:{requesterUserId|number}, Firmware Version:{version|string}
    DevicesTableSvcCreateDeviceType: _('API.MESSAGE_TYPES.DevicesTableSvc.CreateDeviceType') as MessageTypes,  // Requester User ID:{requesterUserId|number}, createDeviceTypeParameters.name:{createDeviceTypeParameters.name|string}, createDeviceTypeParameters.templateFile:{createDeviceTypeParameters.templateFile|string}
    DevicesTableSvcDeleteDeviceType: _('API.MESSAGE_TYPES.DevicesTableSvc.DeleteDeviceType') as MessageTypes,  // Requester User Id:{requesterUserId|number}, Name of type:{name|string}
    DevicesTableSvcSetDeviceType: _('API.MESSAGE_TYPES.DevicesTableSvc.SetDeviceType') as MessageTypes,  // Requester User Id:{requesterUserId|number}, param.name:{param.name|string}, param.newName:{param.newName|string}, param.templateFile:{param.templateFile|string}
    DevicesTableSvcInstallDeviceFirmwareToDevice: _('API.MESSAGE_TYPES.DevicesTableSvc.InstallDeviceFirmwareToDevice') as MessageTypes,  // Requester User Id:{requesterUserId|number}, deviceUuid:{deviceUuid|string}, firmwareVersion:{firmwareVersion|string}
    DevicesTableSvcUninstallDeviceFirmwareFromDevice: _('API.MESSAGE_TYPES.DevicesTableSvc.UninstallDeviceFirmwareFromDevice') as MessageTypes,  // Requester User Id:{requesterUserId|number}, parameters.deviceFirmwareVersion:{parameters.deviceFirmwareVersion|string}, parameters.deviceUUID:{parameters.deviceUUID|string}
    DevicesTableSvcSetDeviceMetadata: _('API.MESSAGE_TYPES.DevicesTableSvc.SetDeviceMetadata') as MessageTypes,  // Requester User ID:{requesterUserId|number}, input.targetUUID:{input.targetUUID|string}, input.newName:{input.newName|string}, input.newRevisionNumber:{input.newRevisionNumber|number}, input.newSerialNumber:{input.newSerialNumber|number}, input.newRemark:{input.newRemark|string}, input.newLastMaintenanceTimestamp:{input.newLastMaintenanceTimestamp|string}, input.newMaintenanceInterval:{input.newMaintenanceInterval|string}, input.newDeviceTypeName:{input.newDeviceTypeName|string}
    DevicesTableSvcSetDeviceMaintenance: _('API.MESSAGE_TYPES.DevicesTableSvc.SetDeviceMaintenance') as MessageTypes,  // Requester User ID:{requesterUserId|number}, input.targetUUID:{input.targetUUID|string}, input.newLastMaintenanceTimestamp:{input.newLastMaintenanceTimestamp|string}, input.newMaintenanceIntervalDays:{input.newMaintenanceIntervalDays|number}
    DevicesTableSvcSetDeviceIdentityObject: _('API.MESSAGE_TYPES.DevicesTableSvc.SetDeviceIdentityObject') as MessageTypes,  // Requester User ID:{requesterUserId|number}, input.targetUUID:{input.targetUUID|string}, input.newVendorID:{input.newVendorID|number}, input.newProductCode:{input.newProductCode|number}, input.newRevisionNumber:{input.newRevisionNumber|number}, input.newSerialNumber:{input.newSerialNumber|number}
    DevicesTableSvcSetDeviceAncestorByUUID: _('API.MESSAGE_TYPES.DevicesTableSvc.SetDeviceAncestorByUUID') as MessageTypes,  // Requester User ID:{requesterUserId|number}, Target UUID:{input.targetUUID|string}, UUID Ancestor:{input.ancestorUUID|string}
    DevicesTableSvcSetDeviceAncestorByName: _('API.MESSAGE_TYPES.DevicesTableSvc.SetDeviceAncestorByName') as MessageTypes,  // Requester User ID:{requesterUserId|number}, Target Name:{input.targetName|string}, UUID Ancestor:{input.ancestorName|string}
    DevicesTableSvcSetDeviceAncestorAndPortByUUID: _('API.MESSAGE_TYPES.DevicesTableSvc.SetDeviceAncestorAndPortByUUID') as MessageTypes,  // Requester Uer ID:{requesterUserId|number}, Target UUID:{input.targetUUID|string}, UUID Ancestor:{input.ancestorUUID|string}, Port:{input.ancestorPort|number}
    DevicesTableSvcSetDevicePreSelectedNodeId: _('API.MESSAGE_TYPES.DevicesTableSvc.SetDevicePreSelectedNodeId') as MessageTypes,  // requesterUserId:{requesterUserId|number}, targetUUID:{targetUUID|string}, newPreSelectedNodeId:{newPreSelectedNodeId|number}
    DevicesTableSvcCreateDeviceWithCliqueIdEx: _('API.MESSAGE_TYPES.DevicesTableSvc.CreateDeviceWithCliqueIdEx') as MessageTypes,  // user identifier:{requesterUserId|number}, id of the clique:{cliqueId|number}, name of the device:{name|string}, identity object: revision number:{revisionNumber|number}, identity object: serial number:{serialNumber|number}, remark:{remark|string}, timestamp of last maintenance:{lastMaintenanceTimestamp|string}, interval of maintenance:{maintenanceInterval|string}, Name of the device type:{deviceTypeName|string}, UUID of the device ancestor:{ancestorDeviceUUID|string}, Port of this device on the ancestor device:{ancestorDevice_Port|number}, UUID of the creator (e.g. Controller, ControllerPoint, User, ..., Actor):{createdByUUID|string}
    DevicesTableSvcCreateDeviceWithUUIDAndCliqueIdEx: _('API.MESSAGE_TYPES.DevicesTableSvc.CreateDeviceWithUUIDAndCliqueIdEx') as MessageTypes,  // user identifier:{requesterUserId|number}, id of the clique:{cliqueId|number}, name of the device:{name|string}, identity object: revision number:{revisionNumber|number}, identity object: serial number:{serialNumber|number}, remark:{remark|string}, timestamp of last maintenance:{lastMaintenanceTimestamp|string}, interval of maintenance:{maintenanceInterval|string}, Name of the device type:{deviceTypeName|string}, UUID of the device ancestor:{ancestorDeviceUUID|string}, Port of this device on the ancestor device:{ancestorDevice_Port|number}, UUID of the creator (e.g. Controller, ControllerPoint, User, ..., Actor):{createdByUUID|string}, UUID of the device:{targetUUID|string}
    PointAddressTableSvcDeletePointAddress: _('API.MESSAGE_TYPES.PointAddressTableSvc.DeletePointAddress') as MessageTypes,  // Requester User ID:{requesterUserId|number}, Building of point address:{param.building|string}, Area of point address:{param.area|string}, Room of point address:{param.room|string}, Segment of point address:{param.segment|string}
    PointAddressTableSvcSetPointAddress: _('API.MESSAGE_TYPES.PointAddressTableSvc.SetPointAddress') as MessageTypes,  // Requester User ID:{requesterUserId|number}, pointAddress.building:{pointAddress.building|string}, pointAddress.area:{pointAddress.area|string}, pointAddress.room:{pointAddress.room|string}, pointAddress.segment:{pointAddress.segment|string}, pointAddress.newBuilding:{pointAddress.newBuilding|string}, pointAddress.newArea:{pointAddress.newArea|string}, pointAddress.newRoom:{pointAddress.newRoom|string}, pointAddress.newSegment:{pointAddress.newSegment|string}
    PointAddressTableSvcChangePointAddressBuilding: _('API.MESSAGE_TYPES.PointAddressTableSvc.ChangePointAddressBuilding') as MessageTypes,  // Requester User ID:{requesterUserId|number}, pointAddress.building:{pointAddress.building|string}, pointAddress.area:{pointAddress.area|string}, pointAddress.room:{pointAddress.room|string}, pointAddress.segment:{pointAddress.segment|string}, pointAddress.newBuilding:{pointAddress.newBuilding|string}, pointAddress.newArea:{pointAddress.newArea|string}, pointAddress.newRoom:{pointAddress.newRoom|string}, pointAddress.newSegment:{pointAddress.newSegment|string}
    PointAddressTableSvcChangePointAddressArea: _('API.MESSAGE_TYPES.PointAddressTableSvc.ChangePointAddressArea') as MessageTypes,  // Requester User ID:{requesterUserId|number}, pointAddress.building:{pointAddress.building|string}, pointAddress.area:{pointAddress.area|string}, pointAddress.room:{pointAddress.room|string}, pointAddress.segment:{pointAddress.segment|string}, pointAddress.newBuilding:{pointAddress.newBuilding|string}, pointAddress.newArea:{pointAddress.newArea|string}, pointAddress.newRoom:{pointAddress.newRoom|string}, pointAddress.newSegment:{pointAddress.newSegment|string}
    PointAddressTableSvcChangePointAddressRoom: _('API.MESSAGE_TYPES.PointAddressTableSvc.ChangePointAddressRoom') as MessageTypes,  // Requester User ID:{requesterUserId|number}, pointAddress.building:{pointAddress.building|string}, pointAddress.area:{pointAddress.area|string}, pointAddress.room:{pointAddress.room|string}, pointAddress.segment:{pointAddress.segment|string}, pointAddress.newBuilding:{pointAddress.newBuilding|string}, pointAddress.newArea:{pointAddress.newArea|string}, pointAddress.newRoom:{pointAddress.newRoom|string}, pointAddress.newSegment:{pointAddress.newSegment|string}
    PointAddressTableSvcAssignPointAddressToControllerPoint: _('API.MESSAGE_TYPES.PointAddressTableSvc.AssignPointAddressToControllerPoint') as MessageTypes,  // Requester User ID:{requesterUserId|number}, input.building:{input.building|string}, input.area:{input.area|string}, input.room:{input.room|string}, input.segment:{input.segment|string}, input.controllerPointUUID:{input.controllerPointUUID|string}
    PointAddressTableSvcAssignPointAddressToControllerPointId: _('API.MESSAGE_TYPES.PointAddressTableSvc.AssignPointAddressToControllerPointId') as MessageTypes,  // Requester User ID:{requesterUserId|number}, input.building:{input.building|string}, input.area:{input.area|string}, input.room:{input.room|string}, input.segment:{input.segment|string}, input.controllerID:{input.controllerID|number}
    PointAddressTableSvcSetPointAddressCliqueId: _('API.MESSAGE_TYPES.PointAddressTableSvc.SetPointAddressCliqueId') as MessageTypes,  // Requester User ID:{requesterUserId|number}, pointAddressParam.targetUUID:{pointAddressParam.targetUUID|string}, pointAddressParam.newCliqueID:{pointAddressParam.newCliqueID|number}
    PointAddressTableSvcAssignPointAddressToDevicePoint: _('API.MESSAGE_TYPES.PointAddressTableSvc.AssignPointAddressToDevicePoint') as MessageTypes,  // Requester User ID:{requesterUserId|number}, input.devicePointUUID:{input.devicePointUUID|string}, input.building:{input.building|string}, input.area:{input.area|string}, input.room:{input.room|string}, input.segment:{input.segment|string}
    PointAddressTableSvcSetPointAddressCliqueIdByName: _('API.MESSAGE_TYPES.PointAddressTableSvc.SetPointAddressCliqueIdByName') as MessageTypes,  // Requester User ID:{requesterUserId|number}, pointAddressParam.building:{pointAddressParam.building|string}, pointAddressParam.area:{pointAddressParam.area|string}, pointAddressParam.room:{pointAddressParam.room|string}, pointAddressParam.segment:{pointAddressParam.segment|string}, pointAddressParam.newCliqueID:{pointAddressParam.newCliqueID|number}
    PointAddressTableSvcUnassignPointAddressFromControllerPoint: _('API.MESSAGE_TYPES.PointAddressTableSvc.UnassignPointAddressFromControllerPoint') as MessageTypes,  // RequesterUserID:{requesterUserId|number}, Target UUID:{targetUUID|string}
    PointAddressTableSvcUnassignPointAddressFromControllerPointId: _('API.MESSAGE_TYPES.PointAddressTableSvc.UnassignPointAddressFromControllerPointId') as MessageTypes,  // RequesterUserID:{requesterUserId|number}, Controller ID:{controllerID|number}
    PointAddressTableSvcUnassignPointAddressFromDevicePoint: _('API.MESSAGE_TYPES.PointAddressTableSvc.UnassignPointAddressFromDevicePoint') as MessageTypes,  // Requester User ID:{requesterUserId|number}, Target UUID:{targetUUID|string}
    PointAddressTableSvcSetPointAddressBuilding: _('API.MESSAGE_TYPES.PointAddressTableSvc.SetPointAddressBuilding') as MessageTypes,  // Requester User ID:{requesterUserId|number}, input.building:{input.building|string}, input.newArea:{input.newArea|string}, input.newRoom:{input.newRoom|string}, input.newSegment:{input.newSegment|string}
    PointAddressTableSvcSetPointAddressArea: _('API.MESSAGE_TYPES.PointAddressTableSvc.SetPointAddressArea') as MessageTypes,  // Requester User ID:{requesterUserId|number}, input.building:{input.building|string}, input.area:{input.area|string}, input.newRoom:{input.newRoom|string}, input.newSegment:{input.newSegment|string}
    PointAddressTableSvcSetPointAddressRoom: _('API.MESSAGE_TYPES.PointAddressTableSvc.SetPointAddressRoom') as MessageTypes,  // Requester User ID:{requesterUserId|number}, input.building:{input.building|string}, input.area:{input.area|string}, input.room:{input.room|string}, input.newSegment:{input.newSegment|string}
    PointAddressTableSvcCreatePointAddressWithCliqueId: _('API.MESSAGE_TYPES.PointAddressTableSvc.CreatePointAddressWithCliqueId') as MessageTypes  // user identifier:{requesterUserId|number}, id of the clique:{cliqueId|number}, building of a point address:{building|string}, area of a point address:{area|string}, room of point address:{room|string}, segment of a point address:{segment|string}
};