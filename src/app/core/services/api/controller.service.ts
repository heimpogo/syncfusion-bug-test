/**
 * TWMS REST API
 * TWMS REST API
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ControllerCreateInput } from '../model/controllerCreateInput';
import { ControllerOutputDto } from '../model/controllerOutputDto';
import { ControllerSetMetadataInput } from '../model/controllerSetMetadataInput';
import { ControllerUpdateMaintenanceInput } from '../model/controllerUpdateMaintenanceInput';
import { DiscoveryStatusOutputDto } from '../model/discoveryStatusOutputDto';
import { ForbiddenResponse } from '../model/forbiddenResponse';
import { MultiControllerPassword } from '../model/multiControllerPassword';
import { UnauthorizedResponse } from '../model/unauthorizedResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ControllerService {

    protected basePath = '/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Abort Controller Discovery
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public abortDiscovery(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public abortDiscovery(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public abortDiscovery(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public abortDiscovery(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/v1/Devices/Controller/AbortDiscovery`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a new Controller
     * Example start parameter:  &lt;pre&gt;  {          \&quot;name\&quot;:\&quot;Controller C\&quot;,          \&quot;serialNumber\&quot;:\&quot;\&quot;,          \&quot;remark\&quot;:\&quot;\&quot;,          \&quot;lastMaintenanceTimestamp\&quot;:\&quot;\&quot;,          \&quot;maintenanceInterval\&quot;:\&quot;\&quot;  }  &lt;/pre&gt;
     * @param body create device input object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createController(body?: ControllerCreateInput, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public createController(body?: ControllerCreateInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public createController(body?: ControllerCreateInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public createController(body?: ControllerCreateInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<string>('post',`${this.basePath}/v1/Devices/Controller`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Generate and set a new key
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public generateAndSetNewKey(body?: MultiControllerPassword, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public generateAndSetNewKey(body?: MultiControllerPassword, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public generateAndSetNewKey(body?: MultiControllerPassword, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public generateAndSetNewKey(body?: MultiControllerPassword, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/v1/Devices/Controller/GenerateAndSetNewKey`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets all Controller
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getControllerMetadataList(observe?: 'body', reportProgress?: boolean): Observable<Array<ControllerOutputDto>>;
    public getControllerMetadataList(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ControllerOutputDto>>>;
    public getControllerMetadataList(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ControllerOutputDto>>>;
    public getControllerMetadataList(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<ControllerOutputDto>>('get',`${this.basePath}/v1/Devices/Controller/list`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets Controller UUID by Name
     * 
     * @param name 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getControllerUUID(name: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getControllerUUID(name: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getControllerUUID(name: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getControllerUUID(name: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling getControllerUUID.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('get',`${this.basePath}/v1/Devices/Controller/getcontrolleruuid/${encodeURIComponent(String(name))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets Controller Metadata by UUID
     * 
     * @param uuid 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getControllerUUIDMetadata(uuid: string, observe?: 'body', reportProgress?: boolean): Observable<ControllerOutputDto>;
    public getControllerUUIDMetadata(uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ControllerOutputDto>>;
    public getControllerUUIDMetadata(uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ControllerOutputDto>>;
    public getControllerUUIDMetadata(uuid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling getControllerUUIDMetadata.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ControllerOutputDto>('get',`${this.basePath}/v1/Devices/Controller/Metadata/${encodeURIComponent(String(uuid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Discovery Status
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDiscoveryStatus(observe?: 'body', reportProgress?: boolean): Observable<DiscoveryStatusOutputDto>;
    public getDiscoveryStatus(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DiscoveryStatusOutputDto>>;
    public getDiscoveryStatus(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DiscoveryStatusOutputDto>>;
    public getDiscoveryStatus(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<DiscoveryStatusOutputDto>('get',`${this.basePath}/v1/Devices/Controller/DiscoveryStatus`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Is Controller Installed
     * 
     * @param uuid 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public isControllerInstalled(uuid: string, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public isControllerInstalled(uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public isControllerInstalled(uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public isControllerInstalled(uuid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling isControllerInstalled.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<boolean>('get',`${this.basePath}/v1/Devices/Controller/iscontrollerinstalled/${encodeURIComponent(String(uuid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a Controller
     * Example  &lt;pre&gt;  {          \&quot;MaintenanceIntervalDays\&quot;: 100,  }  &lt;/pre&gt;
     * @param deviceUUID device UUID of the controller
     * @param body edit device input object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setControllerMaintenance(deviceUUID: string, body?: ControllerUpdateMaintenanceInput, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setControllerMaintenance(deviceUUID: string, body?: ControllerUpdateMaintenanceInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setControllerMaintenance(deviceUUID: string, body?: ControllerUpdateMaintenanceInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setControllerMaintenance(deviceUUID: string, body?: ControllerUpdateMaintenanceInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (deviceUUID === null || deviceUUID === undefined) {
            throw new Error('Required parameter deviceUUID was null or undefined when calling setControllerMaintenance.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('patch',`${this.basePath}/v1/Devices/Controller/SetControllerMaintenance/${encodeURIComponent(String(deviceUUID))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a Controller
     * Example  &lt;pre&gt;  {          \&quot;newName\&quot;:\&quot;\&quot;,          \&quot;newSerialNumber\&quot;:\&quot;name\&quot;,          \&quot;newRemark\&quot;:\&quot;Controller Test new\&quot;,          \&quot;newLastMaintenanceTimestamp\&quot; : \&quot;\&quot;,          \&quot;newMaintenanceInterval\&quot; : \&quot;\&quot;  }  &lt;/pre&gt;
     * @param uuid UUID of the controller
     * @param body ControllerSetMetadataInput object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setControllerMetadata(uuid: string, body?: ControllerSetMetadataInput, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setControllerMetadata(uuid: string, body?: ControllerSetMetadataInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setControllerMetadata(uuid: string, body?: ControllerSetMetadataInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setControllerMetadata(uuid: string, body?: ControllerSetMetadataInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling setControllerMetadata.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('patch',`${this.basePath}/v1/Devices/Controller/SetControllerMetadata/${encodeURIComponent(String(uuid))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Start the LSS scan
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public startDiscovery(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public startDiscovery(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public startDiscovery(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public startDiscovery(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/v1/Devices/Controller/StartDiscovery`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
