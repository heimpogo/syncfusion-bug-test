/**
 * TWMS REST API
 * TWMS REST API
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AssignCirculationFunctionToFlushableDeviceInput } from '../model/assignCirculationFunctionToFlushableDeviceInput';
import { DevicePointCreateInput } from '../model/devicePointCreateInput';
import { DevicePointFullOutputDto } from '../model/devicePointFullOutputDto';
import { DevicePointOutputDto } from '../model/devicePointOutputDto';
import { DevicePointSetMetadataInput } from '../model/devicePointSetMetadataInput';
import { ForbiddenResponse } from '../model/forbiddenResponse';
import { InstallDeviceToDevicePointInput } from '../model/installDeviceToDevicePointInput';
import { InvalidModelStateResponse } from '../model/invalidModelStateResponse';
import { LinkDevicePortToSensorInput } from '../model/linkDevicePortToSensorInput';
import { PointAddressUpdateByAddressUUIDInput } from '../model/pointAddressUpdateByAddressUUIDInput';
import { PointAddressUpdateInput } from '../model/pointAddressUpdateInput';
import { UnauthorizedResponse } from '../model/unauthorizedResponse';
import { UpdateMainMetadataCompnentInput } from '../model/updateMainMetadataCompnentInput';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DevicePointService {

    protected basePath = '/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * IsDevicePointExists
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public assignCirculationFunctionToFlushableDevice(body?: AssignCirculationFunctionToFlushableDeviceInput, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public assignCirculationFunctionToFlushableDevice(body?: AssignCirculationFunctionToFlushableDeviceInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public assignCirculationFunctionToFlushableDevice(body?: AssignCirculationFunctionToFlushableDeviceInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public assignCirculationFunctionToFlushableDevice(body?: AssignCirculationFunctionToFlushableDeviceInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<boolean>('post',`${this.basePath}/v1/Devices/DevicePoint/AssignCirculationFunctionToFlushableDevice`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates a new DevicePoint
     * Example start parameter:  &lt;pre&gt;  {      \&quot;name\&quot;: \&quot;Device Point B\&quot;,      \&quot;nodeId\&quot;: \&quot;Building B\&quot;,      \&quot;remark\&quot;:\&quot;Area A\&quot;  }  &lt;/pre&gt;
     * @param body create device point input object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createDevicePoint(body?: DevicePointCreateInput, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public createDevicePoint(body?: DevicePointCreateInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public createDevicePoint(body?: DevicePointCreateInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public createDevicePoint(body?: DevicePointCreateInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<string>('post',`${this.basePath}/v1/Devices/DevicePoint`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a Device Point (internally we will deactivate and rename the device point)
     * 
     * @param uuid UUID of the device
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteDevicePoint(uuid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteDevicePoint(uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteDevicePoint(uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteDevicePoint(uuid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling deleteDevicePoint.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/v1/Devices/DevicePoint/${encodeURIComponent(String(uuid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a Device Point by UUID
     * 
     * @param uuid 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDevicePointByUuid(uuid: string, observe?: 'body', reportProgress?: boolean): Observable<DevicePointOutputDto>;
    public getDevicePointByUuid(uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DevicePointOutputDto>>;
    public getDevicePointByUuid(uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DevicePointOutputDto>>;
    public getDevicePointByUuid(uuid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling getDevicePointByUuid.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<DevicePointOutputDto>('get',`${this.basePath}/v1/Devices/DevicePoint/${encodeURIComponent(String(uuid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get device point list without deleted devices
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDevicePoints(observe?: 'body', reportProgress?: boolean): Observable<Array<DevicePointOutputDto>>;
    public getDevicePoints(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DevicePointOutputDto>>>;
    public getDevicePoints(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DevicePointOutputDto>>>;
    public getDevicePoints(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<DevicePointOutputDto>>('get',`${this.basePath}/v1/Devices/DevicePoint/list`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get full device point list without deleted devices
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDevicePointsFull(observe?: 'body', reportProgress?: boolean): Observable<Array<DevicePointFullOutputDto>>;
    public getDevicePointsFull(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DevicePointFullOutputDto>>>;
    public getDevicePointsFull(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DevicePointFullOutputDto>>>;
    public getDevicePointsFull(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<DevicePointFullOutputDto>>('get',`${this.basePath}/v1/Devices/DevicePoint/listfull`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get device point list with or without deleted devices
     * 
     * @param returnDeleted 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDevicePoints_1(returnDeleted: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<DevicePointOutputDto>>;
    public getDevicePoints_1(returnDeleted: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DevicePointOutputDto>>>;
    public getDevicePoints_1(returnDeleted: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DevicePointOutputDto>>>;
    public getDevicePoints_1(returnDeleted: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (returnDeleted === null || returnDeleted === undefined) {
            throw new Error('Required parameter returnDeleted was null or undefined when calling getDevicePoints_1.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<DevicePointOutputDto>>('get',`${this.basePath}/v1/Devices/DevicePoint/list/${encodeURIComponent(String(returnDeleted))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a Device Point by UUID with extended details
     * 
     * @param uuid 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFullDevicePointByUuid(uuid: string, observe?: 'body', reportProgress?: boolean): Observable<DevicePointFullOutputDto>;
    public getFullDevicePointByUuid(uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DevicePointFullOutputDto>>;
    public getFullDevicePointByUuid(uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DevicePointFullOutputDto>>;
    public getFullDevicePointByUuid(uuid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling getFullDevicePointByUuid.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<DevicePointFullOutputDto>('get',`${this.basePath}/v1/Devices/DevicePoint/full/${encodeURIComponent(String(uuid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Connect device to one device point
     * Example  &lt;pre&gt;  {          \&quot;deviceUUID\&quot;:\&quot;[Device UUID]\&quot;,          \&quot;devicePointUUID\&quot;:\&quot;[DevicePoint UUID]\&quot;  }  &lt;/pre&gt;
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public installDeviceToDevicePoint(body?: InstallDeviceToDevicePointInput, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public installDeviceToDevicePoint(body?: InstallDeviceToDevicePointInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public installDeviceToDevicePoint(body?: InstallDeviceToDevicePointInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public installDeviceToDevicePoint(body?: InstallDeviceToDevicePointInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/v1/Devices/DevicePoint/install`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * IsDevicePointExists
     * 
     * @param name Name of the device point
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public isDevicePointExists(name: string, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public isDevicePointExists(name: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public isDevicePointExists(name: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public isDevicePointExists(name: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling isDevicePointExists.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<boolean>('get',`${this.basePath}/v1/Devices/DevicePoint/IsDevicePointExists/${encodeURIComponent(String(name))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Connect devie to sensor
     * Example  &lt;pre&gt;  {          \&quot;deviceUUID\&quot;:\&quot;[Device UUID]\&quot;,          \&quot;devicePointUUID\&quot;:\&quot;[DevicePoint UUID]\&quot;  }  &lt;/pre&gt;
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public linkDevicePortToSensor(body?: LinkDevicePortToSensorInput, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public linkDevicePortToSensor(body?: LinkDevicePortToSensorInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public linkDevicePortToSensor(body?: LinkDevicePortToSensorInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public linkDevicePortToSensor(body?: LinkDevicePortToSensorInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<string>('post',`${this.basePath}/v1/Devices/DevicePoint/link`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Enables a Device Point
     * 
     * @param uuid UUID of the device
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public resetDevicePointDisabled(uuid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public resetDevicePointDisabled(uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public resetDevicePointDisabled(uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public resetDevicePointDisabled(uuid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling resetDevicePointDisabled.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/v1/Devices/DevicePoint/ResetDevicePointDisabled/${encodeURIComponent(String(uuid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Disable a Device Point
     * 
     * @param uuid UUID of the device
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setDevicePointDisabled(uuid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setDevicePointDisabled(uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setDevicePointDisabled(uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setDevicePointDisabled(uuid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling setDevicePointDisabled.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/v1/Devices/DevicePoint/SetDevicePointDisabled/${encodeURIComponent(String(uuid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a Device Point
     * Example  &lt;pre&gt;  {          \&quot;name\&quot;:\&quot;name\&quot;,          \&quot;remark\&quot;:\&quot;Device Test new\&quot;  }  &lt;/pre&gt;
     * @param uuid UUID of the device
     * @param body edit device input object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setDevicePointMainMetaData(uuid: string, body?: UpdateMainMetadataCompnentInput, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setDevicePointMainMetaData(uuid: string, body?: UpdateMainMetadataCompnentInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setDevicePointMainMetaData(uuid: string, body?: UpdateMainMetadataCompnentInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setDevicePointMainMetaData(uuid: string, body?: UpdateMainMetadataCompnentInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling setDevicePointMainMetaData.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('patch',`${this.basePath}/v1/Devices/DevicePoint/SetDevicePointMainMetaData/${encodeURIComponent(String(uuid))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Set Device Point Metadata
     * &lt;pre&gt;               {                   \&quot;UUID\&quot;: \&quot;DP2\&quot;,                   \&quot;newName\&quot;: \&quot;Device Point 22\&quot;,                   \&quot;newDeviceId\&quot;: \&quot;Device Point 22\&quot;,                   \&quot;newNodeId\&quot;: \&quot;Device Point 22\&quot;,                   \&quot;newRemark\&quot;: \&quot;Test Device Point 22\&quot;,                   \&quot;newEnabledTimestamp\&quot;: \&quot;\&quot;,                   \&quot;newDisabledTimestamp\&quot;: \&quot;Bulding 4\&quot;              }               &lt;/pre&gt;
     * @param body DevicePointUpdateInput Object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setDevicePointMetadata(body?: DevicePointSetMetadataInput, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setDevicePointMetadata(body?: DevicePointSetMetadataInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setDevicePointMetadata(body?: DevicePointSetMetadataInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setDevicePointMetadata(body?: DevicePointSetMetadataInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('patch',`${this.basePath}/v1/Devices/DevicePoint`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Connect device to one device point
     * Example  &lt;pre&gt;  {          \&quot;deviceUUID\&quot;:\&quot;[Device UUID]\&quot;,          \&quot;devicePointUUID\&quot;:\&quot;[DevicePoint UUID]\&quot;  }  &lt;/pre&gt;
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uninstallDeviceFromDevicePoint(body?: InstallDeviceToDevicePointInput, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public uninstallDeviceFromDevicePoint(body?: InstallDeviceToDevicePointInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public uninstallDeviceFromDevicePoint(body?: InstallDeviceToDevicePointInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public uninstallDeviceFromDevicePoint(body?: InstallDeviceToDevicePointInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/v1/Devices/DevicePoint/uninstall`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a Device Point
     * Example  &lt;pre&gt;  {          \&quot;building\&quot; : \&quot;\&quot;,          \&quot;area\&quot; : \&quot;\&quot;,          \&quot;room\&quot; : \&quot;\&quot;,          \&quot;segment\&quot; : \&quot;\&quot;  }  &lt;/pre&gt;
     * @param uuid UUID of the device
     * @param body edit device input object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateDevicePoint(uuid: string, body?: PointAddressUpdateInput, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateDevicePoint(uuid: string, body?: PointAddressUpdateInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateDevicePoint(uuid: string, body?: PointAddressUpdateInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateDevicePoint(uuid: string, body?: PointAddressUpdateInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling updateDevicePoint.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('patch',`${this.basePath}/v1/Devices/DevicePoint/UpdateDevicePoint/${encodeURIComponent(String(uuid))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a Device Point
     * Example  &lt;pre&gt;  {          \&quot;AdressUUID\&quot; : \&quot;dec1ceaaace1ceaaaaaaaaaaaaaa0001\&quot;,  }  &lt;/pre&gt;
     * @param uuid UUID of the device
     * @param body edit device input object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateDevicePointByAddressUUID(uuid: string, body?: PointAddressUpdateByAddressUUIDInput, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateDevicePointByAddressUUID(uuid: string, body?: PointAddressUpdateByAddressUUIDInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateDevicePointByAddressUUID(uuid: string, body?: PointAddressUpdateByAddressUUIDInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateDevicePointByAddressUUID(uuid: string, body?: PointAddressUpdateByAddressUUIDInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling updateDevicePointByAddressUUID.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('patch',`${this.basePath}/v1/Devices/DevicePoint/UpdateDevicePointByAddressUUID/${encodeURIComponent(String(uuid))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
