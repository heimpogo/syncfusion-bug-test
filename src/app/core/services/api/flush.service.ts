/**
 * TWMS REST API
 * TWMS REST API
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { FlushScheduleInput } from '../model/flushScheduleInput';
import { ForbiddenResponse } from '../model/forbiddenResponse';
import { FunctionNameStartTimeOutputDto } from '../model/functionNameStartTimeOutputDto';
import { InvalidModelStateResponse } from '../model/invalidModelStateResponse';
import { ProblemDetails } from '../model/problemDetails';
import { SetCleaningShutdownInput } from '../model/setCleaningShutdownInput';
import { StartThermalDisinfectionOutputDto } from '../model/startThermalDisinfectionOutputDto';
import { ThermalDisinfectionTaskStatusObjOutputDto } from '../model/thermalDisinfectionTaskStatusObjOutputDto';
import { UnauthorizedResponse } from '../model/unauthorizedResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class FlushService {

    protected basePath = '/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Aborts a thermal disinfection (see https://collab.cbb.de/confluence/pages/viewpage.action?pageId&#x3D;20742424 for more details)
     * 
     * @param taskId TaskId of a running thermal Disinfection
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public abortThermalDisinfection(taskId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public abortThermalDisinfection(taskId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public abortThermalDisinfection(taskId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public abortThermalDisinfection(taskId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (taskId === null || taskId === undefined) {
            throw new Error('Required parameter taskId was null or undefined when calling abortThermalDisinfection.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/v1/Functions/Flush/AbortThermalDisinfection/${encodeURIComponent(String(taskId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a flush schedule with default values
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDefaultFlushSchedule(observe?: 'body', reportProgress?: boolean): Observable<FlushScheduleInput>;
    public getDefaultFlushSchedule(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FlushScheduleInput>>;
    public getDefaultFlushSchedule(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FlushScheduleInput>>;
    public getDefaultFlushSchedule(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<FlushScheduleInput>('get',`${this.basePath}/v1/Functions/Flush/schedule/default`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets the thermal disinfection status (see https://collab.cbb.de/confluence/pages/viewpage.action?pageId&#x3D;20742424 for more details)
     * 
     * @param taskId Id of the thermal disinfection task
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getThermalDisinfectionStatus(taskId: string, observe?: 'body', reportProgress?: boolean): Observable<ThermalDisinfectionTaskStatusObjOutputDto>;
    public getThermalDisinfectionStatus(taskId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ThermalDisinfectionTaskStatusObjOutputDto>>;
    public getThermalDisinfectionStatus(taskId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ThermalDisinfectionTaskStatusObjOutputDto>>;
    public getThermalDisinfectionStatus(taskId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (taskId === null || taskId === undefined) {
            throw new Error('Required parameter taskId was null or undefined when calling getThermalDisinfectionStatus.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ThermalDisinfectionTaskStatusObjOutputDto>('get',`${this.basePath}/v1/Functions/Flush/ThermalDisinfectionStatus/${encodeURIComponent(String(taskId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all thermal disinfection tasks
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getThermalDisinfectionTasks(observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: FunctionNameStartTimeOutputDto; }>;
    public getThermalDisinfectionTasks(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: FunctionNameStartTimeOutputDto; }>>;
    public getThermalDisinfectionTasks(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: FunctionNameStartTimeOutputDto; }>>;
    public getThermalDisinfectionTasks(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<{ [key: string]: FunctionNameStartTimeOutputDto; }>('get',`${this.basePath}/v1/Functions/Flush/GetThermalDisinfectionTasks`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Set a cleaning shutdown for a flush schedule
     * Example start parameter:  &lt;pre&gt;  {      \&quot;functionName\&quot; : \&quot;My flush schedule interval\&quot;,      \&quot;durationMin\&quot; : 20  }  &lt;/pre&gt;
     * @param body Parameters for the cleaning shutdown
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setCleaningShutdown(body: SetCleaningShutdownInput, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public setCleaningShutdown(body: SetCleaningShutdownInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public setCleaningShutdown(body: SetCleaningShutdownInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public setCleaningShutdown(body: SetCleaningShutdownInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling setCleaningShutdown.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<string>('post',`${this.basePath}/v1/Functions/Flush/schedule/shutdown`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Claims the DTE target temperature for running thermal disinfection task. Only availble if FunctionsInput.DteUuid &#x3D;&#x3D; null  (see https://collab.cbb.de/confluence/pages/viewpage.action?pageId&#x3D;20742424 for more details)
     * 
     * @param taskId TaskId of a running thermal Disinfection
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setThermalDisinfectionDteTargetTemperatureUserClaim(taskId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setThermalDisinfectionDteTargetTemperatureUserClaim(taskId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setThermalDisinfectionDteTargetTemperatureUserClaim(taskId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setThermalDisinfectionDteTargetTemperatureUserClaim(taskId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (taskId === null || taskId === undefined) {
            throw new Error('Required parameter taskId was null or undefined when calling setThermalDisinfectionDteTargetTemperatureUserClaim.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/v1/Functions/Flush/SetThermalDisinfectionDteTargetTemperatureUserClaim/${encodeURIComponent(String(taskId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Starts thermal disinfection (see https://collab.cbb.de/confluence/pages/viewpage.action?pageId&#x3D;20742424 for more details)
     * 
     * @param body Node Id&#x27;s of all devices that are flushed
     * @param functionName Name of the thermal disinfection function
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public startThermalDisinfection(body: Array<number>, functionName: string, observe?: 'body', reportProgress?: boolean): Observable<StartThermalDisinfectionOutputDto>;
    public startThermalDisinfection(body: Array<number>, functionName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StartThermalDisinfectionOutputDto>>;
    public startThermalDisinfection(body: Array<number>, functionName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StartThermalDisinfectionOutputDto>>;
    public startThermalDisinfection(body: Array<number>, functionName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling startThermalDisinfection.');
        }

        if (functionName === null || functionName === undefined) {
            throw new Error('Required parameter functionName was null or undefined when calling startThermalDisinfection.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<StartThermalDisinfectionOutputDto>('post',`${this.basePath}/v1/Functions/Flush/StartThermalDisinfection/${encodeURIComponent(String(functionName))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
