/**
 * TWMS REST API
 * TWMS REST API
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CanObjectValueType } from '../model/canObjectValueType';
import { CanObjectValueTypeValue } from '../model/canObjectValueTypeValue';
import { ForbiddenResponse } from '../model/forbiddenResponse';
import { GetGPOIPinInput } from '../model/getGPOIPinInput';
import { GetGPOIPinOutput } from '../model/getGPOIPinOutput';
import { HandleNoValueType } from '../model/handleNoValueType';
import { HandleNoValueTypeValue } from '../model/handleNoValueTypeValue';
import { IActionResult } from '../model/iActionResult';
import { InvalidModelStateResponse } from '../model/invalidModelStateResponse';
import { ProblemDetails } from '../model/problemDetails';
import { SetGPOIPinInput } from '../model/setGPOIPinInput';
import { UnauthorizedResponse } from '../model/unauthorizedResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class FunctionTestService {

    protected basePath = '/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get Hanlde Value via CAN-Object data
     * Example start parameter:  &lt;pre&gt;  [      { \&quot;nodeID\&quot; : \&quot;10023\&quot;, \&quot;mainIndex\&quot; : \&quot;12AB\&quot;, \&quot;subIndex\&quot;: 1, \&quot;value\&quot; : 123 },      { \&quot;nodeID\&quot; : \&quot;10023\&quot;, \&quot;mainIndex\&quot; : \&quot;12AB\&quot;, \&quot;subIndex\&quot;: 1, \&quot;value\&quot; : 123 }  ]  &lt;/pre&gt;
     * @param body List of handleNo&#x27;s and value types
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCanObjectValues(body?: Array<CanObjectValueType>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getCanObjectValues(body?: Array<CanObjectValueType>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getCanObjectValues(body?: Array<CanObjectValueType>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getCanObjectValues(body?: Array<CanObjectValueType>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('get',`${this.basePath}/v1/FunctionTest/GetCanObjectValues`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGPIOPin(body?: Array<GetGPOIPinInput>, observe?: 'body', reportProgress?: boolean): Observable<Array<GetGPOIPinOutput>>;
    public getGPIOPin(body?: Array<GetGPOIPinInput>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GetGPOIPinOutput>>>;
    public getGPIOPin(body?: Array<GetGPOIPinInput>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GetGPOIPinOutput>>>;
    public getGPIOPin(body?: Array<GetGPOIPinInput>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<GetGPOIPinOutput>>('get',`${this.basePath}/v1/FunctionTest/gpio`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Hanlde Value via HandleNo
     * Example start parameter:  &lt;pre&gt;  [      { \&quot;handleNo\&quot; : \&quot;10023\&quot;, \&quot;valueType\&quot; : \&quot;int32\&quot;, \&quot;value\&quot; : 123 },      { \&quot;handleNo\&quot; : \&quot;10021\&quot;, \&quot;valueType\&quot; : \&quot;int32\&quot;, \&quot;value\&quot; : 123 }  ]  &lt;/pre&gt;
     * @param body List of handleNo&#x27;s and value types
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHandleNoValues(body?: Array<HandleNoValueType>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getHandleNoValues(body?: Array<HandleNoValueType>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getHandleNoValues(body?: Array<HandleNoValueType>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getHandleNoValues(body?: Array<HandleNoValueType>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('get',`${this.basePath}/v1/FunctionTest/GetHandleNoValues`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Set Hanlde Value via CAN-Object data
     * Example start parameter:  &lt;pre&gt;  [      { \&quot;nodeID\&quot; : \&quot;10023\&quot;, \&quot;mainIndex\&quot; : \&quot;12AB\&quot;, \&quot;subIndex\&quot;: 1, \&quot;value\&quot; : 123 },      { \&quot;nodeID\&quot; : \&quot;10023\&quot;, \&quot;mainIndex\&quot; : \&quot;12AB\&quot;, \&quot;subIndex\&quot;: 1, \&quot;value\&quot; : 123 }  ]  &lt;/pre&gt;
     * @param body List of handleNo&#x27;s and value types
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setCanObjectValues(body?: Array<CanObjectValueTypeValue>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setCanObjectValues(body?: Array<CanObjectValueTypeValue>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setCanObjectValues(body?: Array<CanObjectValueTypeValue>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setCanObjectValues(body?: Array<CanObjectValueTypeValue>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/v1/FunctionTest/SetCanObjectValues`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setGPIOPin(body?: Array<SetGPOIPinInput>, observe?: 'body', reportProgress?: boolean): Observable<IActionResult>;
    public setGPIOPin(body?: Array<SetGPOIPinInput>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IActionResult>>;
    public setGPIOPin(body?: Array<SetGPOIPinInput>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IActionResult>>;
    public setGPIOPin(body?: Array<SetGPOIPinInput>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<IActionResult>('post',`${this.basePath}/v1/FunctionTest/gpio`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Set Hanlde Value via HandleNo
     * Example start parameter:  &lt;pre&gt;  [      { \&quot;handleNo\&quot; : \&quot;10023\&quot;, \&quot;valueType\&quot; : \&quot;int32\&quot; },      { \&quot;handleNo\&quot; : \&quot;10021\&quot;, \&quot;valueType\&quot; : \&quot;int32\&quot; }  ]  &lt;/pre&gt;
     * @param body List of handleNo&#x27;s and value types
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setHandleNoValues(body?: Array<HandleNoValueTypeValue>, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setHandleNoValues(body?: Array<HandleNoValueTypeValue>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setHandleNoValues(body?: Array<HandleNoValueTypeValue>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setHandleNoValues(body?: Array<HandleNoValueTypeValue>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/v1/FunctionTest/SetHandleNoValues`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Writes DTE Werkfunktionstest Ergibnis to TWMS Database  on success disables ProductionTest
     * 
     * @param success 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public writeTestResult(success?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public writeTestResult(success?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public writeTestResult(success?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public writeTestResult(success?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (success !== undefined && success !== null) {
            queryParameters = queryParameters.set('success', <any>success);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/v1/FunctionTest/writeTestResult`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
