/**
 * TWMS REST API
 * TWMS REST API
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ForbiddenResponse } from '../model/forbiddenResponse';
import { InvalidModelStateResponse } from '../model/invalidModelStateResponse';
import { PointAddressCreateInput } from '../model/pointAddressCreateInput';
import { PointAddressEditInput } from '../model/pointAddressEditInput';
import { UnauthorizedResponse } from '../model/unauthorizedResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class PointAddressService {

    protected basePath = '/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Creates new point address
     * Example start parameter:  &lt;pre&gt;  {      \&quot;building\&quot;:\&quot;Building 1\&quot;,      \&quot;area\&quot;:\&quot;Area A\&quot;,      \&quot;room\&quot;:\&quot;Room B\&quot;,      \&quot;segment\&quot;:\&quot;Segment B\&quot;  }  &lt;/pre&gt;
     * @param body point address create input object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createPointAddress(body?: PointAddressCreateInput, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public createPointAddress(body?: PointAddressCreateInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public createPointAddress(body?: PointAddressCreateInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public createPointAddress(body?: PointAddressCreateInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<string>('post',`${this.basePath}/v1/Devices/PointAddress`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a point address
     * Example start parameter:  &lt;pre&gt;  {      \&quot;building\&quot;:\&quot;Building 1\&quot;,      \&quot;area\&quot;:\&quot;Area A\&quot;,      \&quot;room\&quot;:\&quot;Room B\&quot;,      \&quot;segment\&quot;:\&quot;Segment B\&quot;  }  &lt;/pre&gt;
     * @param body point address create input object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deletePointAddress(body?: PointAddressCreateInput, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deletePointAddress(body?: PointAddressCreateInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deletePointAddress(body?: PointAddressCreateInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deletePointAddress(body?: PointAddressCreateInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/v1/Devices/PointAddress/delete`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Exists a Point address
     * &lt;pre&gt;&lt;/pre&gt;
     * @param body PointAddressEditInput with old and new point address
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public isPointAddressExists(body?: PointAddressCreateInput, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public isPointAddressExists(body?: PointAddressCreateInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public isPointAddressExists(body?: PointAddressCreateInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public isPointAddressExists(body?: PointAddressCreateInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/v1/Devices/PointAddress/exists`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Edits a Point address
     * &lt;pre&gt;              {                  \&quot;building\&quot;: \&quot;Bulding 4\&quot;,                  \&quot;area\&quot;: \&quot;Area 4\&quot;,                  \&quot;room\&quot;: \&quot;Room 4\&quot;,                  \&quot;segment\&quot;: \&quot;Segment 4\&quot;                  \&quot;newBuilding\&quot;: \&quot;newBuilding\&quot;,                  \&quot;newArea\&quot;: \&quot;newArea\&quot;,                  \&quot;newRoom\&quot;: \&quot;newRoom\&quot;,                  \&quot;newSegment\&quot;: \&quot;newSegment\&quot;              }              &lt;/pre&gt;
     * @param body PointAddressEditInput with old and new point address
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setPointAddress(body?: PointAddressEditInput, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setPointAddress(body?: PointAddressEditInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setPointAddress(body?: PointAddressEditInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setPointAddress(body?: PointAddressEditInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/v1/Devices/PointAddress`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
