/**
 * TWMS REST API
 * TWMS REST API
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ControllerPointCreateInput } from '../model/controllerPointCreateInput';
import { ControllerPointOutputDto } from '../model/controllerPointOutputDto';
import { ForbiddenResponse } from '../model/forbiddenResponse';
import { InstallControllerToControllerPointInput } from '../model/installControllerToControllerPointInput';
import { PointAddressUpdateByAddressUUIDInput } from '../model/pointAddressUpdateByAddressUUIDInput';
import { PointAddressUpdateInput } from '../model/pointAddressUpdateInput';
import { SetIPAddressInput } from '../model/setIPAddressInput';
import { UnauthorizedResponse } from '../model/unauthorizedResponse';
import { UpdateDisabledTimestampInput } from '../model/updateDisabledTimestampInput';
import { UpdateEnabledTimestampInput } from '../model/updateEnabledTimestampInput';
import { UpdateMainMetadataCompnentInput } from '../model/updateMainMetadataCompnentInput';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ControllerPointService {

    protected basePath = '/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Creates a new ControllerPoint
     * Example start parameter:  &lt;pre&gt;  {          \&quot;name\&quot;:\&quot;Controller C\&quot;,          \&quot;controllerId\&quot;:\&quot;\&quot;,          \&quot;remark\&quot;:\&quot;\&quot;,          \&quot;controllerUUID\&quot;:\&quot;\&quot;  }  &lt;/pre&gt;
     * @param body create device input object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createControllerPoint(body?: ControllerPointCreateInput, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public createControllerPoint(body?: ControllerPointCreateInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public createControllerPoint(body?: ControllerPointCreateInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public createControllerPoint(body?: ControllerPointCreateInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<string>('post',`${this.basePath}/v1/Devices/ControllerPoint`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets all Controller Points
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllControllerPoints(observe?: 'body', reportProgress?: boolean): Observable<Array<ControllerPointOutputDto>>;
    public getAllControllerPoints(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ControllerPointOutputDto>>>;
    public getAllControllerPoints(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ControllerPointOutputDto>>>;
    public getAllControllerPoints(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<ControllerPointOutputDto>>('get',`${this.basePath}/v1/Devices/ControllerPoint/list`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gets a Controller Point by UUID
     * 
     * @param uuid 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getControllerPointByUuid(uuid: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ControllerPointOutputDto>>;
    public getControllerPointByUuid(uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ControllerPointOutputDto>>>;
    public getControllerPointByUuid(uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ControllerPointOutputDto>>>;
    public getControllerPointByUuid(uuid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling getControllerPointByUuid.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<ControllerPointOutputDto>>('get',`${this.basePath}/v1/Devices/ControllerPoint/${encodeURIComponent(String(uuid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Install Controller To Controller Point
     * Example  &lt;pre&gt;  {          \&quot;controllerUUID\&quot;:\&quot;\&quot;,          \&quot;controllerPointUUID\&quot;:\&quot;\&quot;  }  &lt;/pre&gt;
     * @param body InstallControllerToControllerPointInput object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public installControllerToControllerPoint(body?: InstallControllerToControllerPointInput, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public installControllerToControllerPoint(body?: InstallControllerToControllerPointInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public installControllerToControllerPoint(body?: InstallControllerToControllerPointInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public installControllerToControllerPoint(body?: InstallControllerToControllerPointInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('patch',`${this.basePath}/v1/Devices/ControllerPoint/installcontrollertocontrollerpoint`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Reset Controller By UUID
     * 
     * @param name ControllerPoint Name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public resetControllerByName(name: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public resetControllerByName(name: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public resetControllerByName(name: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public resetControllerByName(name: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling resetControllerByName.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/v1/Devices/ControllerPoint/resetcontrollerbyname/${encodeURIComponent(String(name))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Reset Controller By UUID
     * 
     * @param uuid ControllerPoint UUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public resetControllerByUUID(uuid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public resetControllerByUUID(uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public resetControllerByUUID(uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public resetControllerByUUID(uuid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling resetControllerByUUID.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/v1/Devices/ControllerPoint/resetcontrollerbyuuid/${encodeURIComponent(String(uuid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Disables a Controller Point
     * Example
     * @param uuid UUID of the controller
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setControllerPointDisabled(uuid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setControllerPointDisabled(uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setControllerPointDisabled(uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setControllerPointDisabled(uuid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling setControllerPointDisabled.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('patch',`${this.basePath}/v1/Devices/ControllerPoint/SetControllerPointDisabled/${encodeURIComponent(String(uuid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a Controller Point disabled timestamp
     * Example  &lt;pre&gt;  {          \&quot;newDisabledTimestamp\&quot;:\&quot;\&quot;  }  &lt;/pre&gt;
     * @param uuid UUID of the controller
     * @param body edit device input object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setControllerPointDisabledTimestamp(uuid: string, body?: UpdateDisabledTimestampInput, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setControllerPointDisabledTimestamp(uuid: string, body?: UpdateDisabledTimestampInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setControllerPointDisabledTimestamp(uuid: string, body?: UpdateDisabledTimestampInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setControllerPointDisabledTimestamp(uuid: string, body?: UpdateDisabledTimestampInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling setControllerPointDisabledTimestamp.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('patch',`${this.basePath}/v1/Devices/ControllerPoint/UpdateDisabledTimestamp/${encodeURIComponent(String(uuid))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a Controller Point enabled timestamp
     * Example  &lt;pre&gt;  {          \&quot;newEnabledTimestamp\&quot;:\&quot;\&quot;  }  &lt;/pre&gt;
     * @param uuid UUID of the controller
     * @param body edit device input object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setControllerPointEnabledTimestamp(uuid: string, body?: UpdateEnabledTimestampInput, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setControllerPointEnabledTimestamp(uuid: string, body?: UpdateEnabledTimestampInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setControllerPointEnabledTimestamp(uuid: string, body?: UpdateEnabledTimestampInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setControllerPointEnabledTimestamp(uuid: string, body?: UpdateEnabledTimestampInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling setControllerPointEnabledTimestamp.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('patch',`${this.basePath}/v1/Devices/ControllerPoint/UpdateEnabledTimestamp/${encodeURIComponent(String(uuid))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a Controller Point
     * Example  &lt;pre&gt;  {          \&quot;name\&quot;:\&quot;name\&quot;,          \&quot;remark\&quot;:\&quot;Controller Test new\&quot;  }  &lt;/pre&gt;
     * @param uuid UUID of the controller
     * @param body edit device input object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setControllerPointMainMetaData(uuid: string, body?: UpdateMainMetadataCompnentInput, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setControllerPointMainMetaData(uuid: string, body?: UpdateMainMetadataCompnentInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setControllerPointMainMetaData(uuid: string, body?: UpdateMainMetadataCompnentInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setControllerPointMainMetaData(uuid: string, body?: UpdateMainMetadataCompnentInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling setControllerPointMainMetaData.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('patch',`${this.basePath}/v1/Devices/ControllerPoint/SetControllerPointMainMetaData/${encodeURIComponent(String(uuid))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Set IP Address to a Controller Point
     * 
     * @param body SetIPAddressInput Object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setIPAddress(body?: SetIPAddressInput, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setIPAddress(body?: SetIPAddressInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setIPAddress(body?: SetIPAddressInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setIPAddress(body?: SetIPAddressInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('patch',`${this.basePath}/v1/Devices/ControllerPoint/setipaddress`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Uninstall Controller To Controller Point
     * 
     * @param uuid target controller uuid
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uninstallControllerFromControllerPoint(uuid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public uninstallControllerFromControllerPoint(uuid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public uninstallControllerFromControllerPoint(uuid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public uninstallControllerFromControllerPoint(uuid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling uninstallControllerFromControllerPoint.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('patch',`${this.basePath}/v1/Devices/ControllerPoint/uninstallcontrollerfromcontrollerpoint/${encodeURIComponent(String(uuid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a Controller Point
     * Example  &lt;pre&gt;  {          \&quot;building\&quot; : \&quot;\&quot;,          \&quot;area\&quot; : \&quot;\&quot;,          \&quot;room\&quot; : \&quot;\&quot;,          \&quot;segment\&quot; : \&quot;\&quot;  }  &lt;/pre&gt;
     * @param uuid UUID of the controller
     * @param body edit device input object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateControllerPoint(uuid: string, body?: PointAddressUpdateInput, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateControllerPoint(uuid: string, body?: PointAddressUpdateInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateControllerPoint(uuid: string, body?: PointAddressUpdateInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateControllerPoint(uuid: string, body?: PointAddressUpdateInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling updateControllerPoint.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('patch',`${this.basePath}/v1/Devices/ControllerPoint/UpdateControllerPoint/${encodeURIComponent(String(uuid))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates a Controller Point
     * Example  &lt;pre&gt;  {          \&quot;AdressUUID\&quot; : \&quot;dec1ceaaace1ceaaaaaaaaaaaaaa0001\&quot;,  }  &lt;/pre&gt;
     * @param uuid UUID of the controller
     * @param body edit device input object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateControllerPointByAddressUUID(uuid: string, body?: PointAddressUpdateByAddressUUIDInput, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateControllerPointByAddressUUID(uuid: string, body?: PointAddressUpdateByAddressUUIDInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateControllerPointByAddressUUID(uuid: string, body?: PointAddressUpdateByAddressUUIDInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateControllerPointByAddressUUID(uuid: string, body?: PointAddressUpdateByAddressUUIDInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling updateControllerPointByAddressUUID.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('patch',`${this.basePath}/v1/Devices/ControllerPoint/UpdateControllerPointByAddressUUID/${encodeURIComponent(String(uuid))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
