/**
 * TWMS REST API
 * TWMS REST API
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CreatePortInput } from '../model/createPortInput';
import { DeviceConfigTransferInput } from '../model/deviceConfigTransferInput';
import { DeviceCreateInput } from '../model/deviceCreateInput';
import { DeviceCreateSensorFromAncestorInput } from '../model/deviceCreateSensorFromAncestorInput';
import { DeviceCreateWithAncestorInput } from '../model/deviceCreateWithAncestorInput';
import { DevicesOutputDto } from '../model/devicesOutputDto';
import { ForbiddenResponse } from '../model/forbiddenResponse';
import { InvalidModelStateResponse } from '../model/invalidModelStateResponse';
import { LocateDeviceInput } from '../model/locateDeviceInput';
import { ResetDeviceInput } from '../model/resetDeviceInput';
import { SetDeviceMainMetadataInput } from '../model/setDeviceMainMetadataInput';
import { SetDeviceMaintenanceIntervalInput } from '../model/setDeviceMaintenanceIntervalInput';
import { UnauthorizedResponse } from '../model/unauthorizedResponse';
import { UnlinkDevicePortByUUIDInput } from '../model/unlinkDevicePortByUUIDInput';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DevicesService {

    protected basePath = '/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Creates new device
     * Example start parameter:  &lt;pre&gt;  {          \&quot;name\&quot;:\&quot;Controller C\&quot;,          \&quot;serialNumber\&quot;:\&quot;Controller\&quot;,          \&quot;vendorID\&quot;:\&quot;192.168.10.50\&quot;,          \&quot;productCode\&quot;:\&quot;CE-76-D4-23-B4\&quot;,          \&quot;revisionNumber\&quot;:\&quot;Controller Test\&quot;,          \&quot;DeviceTypeName\&quot;:\&quot;\&quot;,          \&quot;Remark\&quot;:\&quot;\&quot;,          \&quot;MaintenanceInterval\&quot;:\&quot;\&quot;,          \&quot;LastMaintenanceTimestamp\&quot;:\&quot;\&quot;  }  &lt;/pre&gt;
     * @param body create device input object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createDevice(body?: DeviceCreateInput, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public createDevice(body?: DeviceCreateInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public createDevice(body?: DeviceCreateInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public createDevice(body?: DeviceCreateInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<string>('post',`${this.basePath}/v1/Devices`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates new device with ancestor
     * Example start parameter:  &lt;pre&gt;  {          \&quot;name\&quot;:\&quot;Controller C\&quot;,          \&quot;serialNumber\&quot;:\&quot;Controller\&quot;,          \&quot;vendorID\&quot;:\&quot;192.168.10.50\&quot;,          \&quot;productCode\&quot;:\&quot;CE-76-D4-23-B4\&quot;,          \&quot;revisionNumber\&quot;:\&quot;Controller Test\&quot;,          \&quot;DeviceTypeName\&quot;:\&quot;\&quot;,          \&quot;Remark\&quot;:\&quot;\&quot;,          \&quot;MaintenanceInterval\&quot;:\&quot;\&quot;,          \&quot;LastMaintenanceTimestamp\&quot;:\&quot;\&quot;  }  &lt;/pre&gt;
     * @param body create device input object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createDeviceWithAncestor(body?: DeviceCreateWithAncestorInput, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public createDeviceWithAncestor(body?: DeviceCreateWithAncestorInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public createDeviceWithAncestor(body?: DeviceCreateWithAncestorInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public createDeviceWithAncestor(body?: DeviceCreateWithAncestorInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<string>('post',`${this.basePath}/v1/Devices/WithAncestor`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Creates new sensor fromancestor
     * 
     * @param body DeviceCreateSensorFromAncestorInput object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createSensorFromAncestor(body?: DeviceCreateSensorFromAncestorInput, observe?: 'body', reportProgress?: boolean): Observable<DevicesOutputDto>;
    public createSensorFromAncestor(body?: DeviceCreateSensorFromAncestorInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DevicesOutputDto>>;
    public createSensorFromAncestor(body?: DeviceCreateSensorFromAncestorInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DevicesOutputDto>>;
    public createSensorFromAncestor(body?: DeviceCreateSensorFromAncestorInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<DevicesOutputDto>('post',`${this.basePath}/v1/Devices/Sensor`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Executes Device Function Test
     * 
     * @param devicePointUUID DevicePoint UUID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public executeDeviceFunctionTest(devicePointUUID: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public executeDeviceFunctionTest(devicePointUUID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public executeDeviceFunctionTest(devicePointUUID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public executeDeviceFunctionTest(devicePointUUID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (devicePointUUID === null || devicePointUUID === undefined) {
            throw new Error('Required parameter devicePointUUID was null or undefined when calling executeDeviceFunctionTest.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('get',`${this.basePath}/v1/Devices/executedevicefunctiontest/${encodeURIComponent(String(devicePointUUID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Sets the maintenance interval for a device
     * 
     * @param devicePointUUID DevicePoint UUID
     * @param file 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public executeDeviceMaintenanceForm(devicePointUUID: string, file?: Blob, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public executeDeviceMaintenanceForm(devicePointUUID: string, file?: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public executeDeviceMaintenanceForm(devicePointUUID: string, file?: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public executeDeviceMaintenanceForm(devicePointUUID: string, file?: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (devicePointUUID === null || devicePointUUID === undefined) {
            throw new Error('Required parameter devicePointUUID was null or undefined when calling executeDeviceMaintenance.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (file !== undefined) {
            formParams = formParams.append('file', <any>file) as any || formParams;
        }

        return this.httpClient.request<string>('post',`${this.basePath}/v1/Devices/setdevicemaintenancelasttimestamp/${encodeURIComponent(String(devicePointUUID))}`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get devices list
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDeviceMetadataList(observe?: 'body', reportProgress?: boolean): Observable<Array<DevicesOutputDto>>;
    public getDeviceMetadataList(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DevicesOutputDto>>>;
    public getDeviceMetadataList(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DevicesOutputDto>>>;
    public getDeviceMetadataList(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<DevicesOutputDto>>('get',`${this.basePath}/v1/Devices/list`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get device metadata
     * 
     * @param deviceUUID 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDeviceUUIDMetadata(deviceUUID: string, observe?: 'body', reportProgress?: boolean): Observable<DevicesOutputDto>;
    public getDeviceUUIDMetadata(deviceUUID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DevicesOutputDto>>;
    public getDeviceUUIDMetadata(deviceUUID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DevicesOutputDto>>;
    public getDeviceUUIDMetadata(deviceUUID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (deviceUUID === null || deviceUUID === undefined) {
            throw new Error('Required parameter deviceUUID was null or undefined when calling getDeviceUUIDMetadata.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<DevicesOutputDto>('get',`${this.basePath}/v1/Devices/metadata/${encodeURIComponent(String(deviceUUID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all SensorTypeNames for Port
     * 
     * @param deviceTypeName 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSensorsOnPort(deviceTypeName: string, body?: CreatePortInput, observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public getSensorsOnPort(deviceTypeName: string, body?: CreatePortInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public getSensorsOnPort(deviceTypeName: string, body?: CreatePortInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public getSensorsOnPort(deviceTypeName: string, body?: CreatePortInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (deviceTypeName === null || deviceTypeName === undefined) {
            throw new Error('Required parameter deviceTypeName was null or undefined when calling getSensorsOnPort.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<string>>('post',`${this.basePath}/v1/Devices/sensorsonport/${encodeURIComponent(String(deviceTypeName))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Checks whether LSS is running
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public isScanningLSS(observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public isScanningLSS(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public isScanningLSS(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public isScanningLSS(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<boolean>('get',`${this.basePath}/v1/Devices/isscanninglss`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Locate Device
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public locateDevice(body?: LocateDeviceInput, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public locateDevice(body?: LocateDeviceInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public locateDevice(body?: LocateDeviceInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public locateDevice(body?: LocateDeviceInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/v1/Devices/locatedevice`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns the devices that want to be found by user  At first call StartLocateDeviceReverse before use this endpoint
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public locateDeviceReverse(observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public locateDeviceReverse(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public locateDeviceReverse(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public locateDeviceReverse(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<string>>('get',`${this.basePath}/v1/Devices/LocateDeviceReverse`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Reset Device
     * Example  &lt;pre&gt;  {          \&quot;devicePointUuid\&quot;:\&quot;[Device Point UUID]\&quot;,  }  &lt;/pre&gt;
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public resetDevice(body?: ResetDeviceInput, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public resetDevice(body?: ResetDeviceInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public resetDevice(body?: ResetDeviceInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public resetDevice(body?: ResetDeviceInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<boolean>('patch',`${this.basePath}/v1/Devices/reset`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Updates device Information
     * Example  &lt;pre&gt;  {          \&quot;uuid\&quot;:\&quot;\&quot;,          \&quot;newName\&quot;:\&quot;Device A\&quot;,          \&quot;newSerialNumber\&quot;:44,          \&quot;newVendorID\&quot;:43,          \&quot;newProductCode\&quot;:33,          \&quot;newRevisionNumber\&quot;:12,          \&quot;newDeviceTypeName\&quot;:\&quot;\&quot;,          \&quot;newRemark\&quot;:\&quot;\&quot;  }  &lt;/pre&gt;
     * @param body DeviceUpdateInput object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setDeviceMainMetadata(body?: SetDeviceMainMetadataInput, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setDeviceMainMetadata(body?: SetDeviceMainMetadataInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setDeviceMainMetadata(body?: SetDeviceMainMetadataInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setDeviceMainMetadata(body?: SetDeviceMainMetadataInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('patch',`${this.basePath}/v1/Devices/SetDeviceMainMetadata`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Sets the maintenance interval for a device
     * 
     * @param devicePointUUID DevicePoint UUID
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setDeviceMaintenanceInterval(devicePointUUID: string, body?: SetDeviceMaintenanceIntervalInput, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public setDeviceMaintenanceInterval(devicePointUUID: string, body?: SetDeviceMaintenanceIntervalInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public setDeviceMaintenanceInterval(devicePointUUID: string, body?: SetDeviceMaintenanceIntervalInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public setDeviceMaintenanceInterval(devicePointUUID: string, body?: SetDeviceMaintenanceIntervalInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (devicePointUUID === null || devicePointUUID === undefined) {
            throw new Error('Required parameter devicePointUUID was null or undefined when calling setDeviceMaintenanceInterval.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<string>('post',`${this.basePath}/v1/Devices/setdevicemaintenanceinterval/${encodeURIComponent(String(devicePointUUID))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Locate the device reverse  At first call this endpoint and after manual localization of a device, call LocateDeviceReverse endpoint
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public startLocateDeviceReverse(observe?: 'body', reportProgress?: boolean): Observable<string>;
    public startLocateDeviceReverse(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public startLocateDeviceReverse(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public startLocateDeviceReverse(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('post',`${this.basePath}/v1/Devices/StartLocateDeviceReverse`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Start the LSS scan
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public startLss(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public startLss(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public startLss(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public startLss(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/v1/Devices/startlss`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Copy the configuration from source device and apply for target device
     * Example  &lt;pre&gt;  {          \&quot;SourceDeviceUUID\&quot;:\&quot;[Old Device UUID]\&quot;,          \&quot;TargetDeviceUUID\&quot;:\&quot;[New Device UUID]\&quot;         }  &lt;/pre&gt;
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public transferDeviceConfiguration(body?: DeviceConfigTransferInput, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public transferDeviceConfiguration(body?: DeviceConfigTransferInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public transferDeviceConfiguration(body?: DeviceConfigTransferInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public transferDeviceConfiguration(body?: DeviceConfigTransferInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<boolean>('post',`${this.basePath}/v1/Devices/transfer`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public unlinkDevicePortByUUID(body?: UnlinkDevicePortByUUIDInput, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public unlinkDevicePortByUUID(body?: UnlinkDevicePortByUUIDInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public unlinkDevicePortByUUID(body?: UnlinkDevicePortByUUIDInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public unlinkDevicePortByUUID(body?: UnlinkDevicePortByUUIDInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/v1/Devices/unlink`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
