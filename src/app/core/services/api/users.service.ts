/**
 * TWMS REST API
 * TWMS REST API
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ForbiddenResponse } from '../model/forbiddenResponse';
import { InvalidModelStateResponse } from '../model/invalidModelStateResponse';
import { SetUserDisabledTimestampInput } from '../model/setUserDisabledTimestampInput';
import { UnauthorizedResponse } from '../model/unauthorizedResponse';
import { UserAuthoritiesDto } from '../model/userAuthoritiesDto';
import { UserCreateInput } from '../model/userCreateInput';
import { UserOutputDto } from '../model/userOutputDto';
import { UserResetPasswordInput } from '../model/userResetPasswordInput';
import { UserSetAuthorityTemplateInput } from '../model/userSetAuthorityTemplateInput';
import { UserUpdateAnyMetadataInput } from '../model/userUpdateAnyMetadataInput';
import { UserUpdateOwnMetadataInput } from '../model/userUpdateOwnMetadataInput';
import { UserUpdatePasswordInput } from '../model/userUpdatePasswordInput';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class UsersService {

    protected basePath = '/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create a user
     * Example create parameter:  &lt;pre&gt;  {     \&quot;loginname\&quot;           :\&quot;TestNewCreatedUser\&quot;,     \&quot;password\&quot;            :\&quot;Paccccc1%\&quot;,     \&quot;PasswordConfirmation\&quot;:\&quot;Paccccc1%\&quot;,     \&quot;lastname\&quot;            :\&quot;MyLastName\&quot;,     \&quot;firstname\&quot;           :\&quot;MyFirstName\&quot;,     \&quot;email\&quot;               :\&quot;MyEmail@cbb.de\&quot;,     \&quot;AuthorityTemplateName\&quot;  :\&quot;GUESTS\&quot;  }  &lt;/pre&gt;
     * @param body Create user input object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createUser(body?: UserCreateInput, observe?: 'body', reportProgress?: boolean): Observable<UserOutputDto>;
    public createUser(body?: UserCreateInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserOutputDto>>;
    public createUser(body?: UserCreateInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserOutputDto>>;
    public createUser(body?: UserCreateInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<UserOutputDto>('post',`${this.basePath}/v1/Users`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all authorities belonging to the current user
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUserAuthority(observe?: 'body', reportProgress?: boolean): Observable<UserAuthoritiesDto>;
    public getUserAuthority(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserAuthoritiesDto>>;
    public getUserAuthority(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserAuthoritiesDto>>;
    public getUserAuthority(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<UserAuthoritiesDto>('get',`${this.basePath}/v1/Users/userauthority`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get one user detail information
     * 
     * @param loginName user login name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUserMetadata(loginName: string, observe?: 'body', reportProgress?: boolean): Observable<UserOutputDto>;
    public getUserMetadata(loginName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserOutputDto>>;
    public getUserMetadata(loginName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserOutputDto>>;
    public getUserMetadata(loginName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (loginName === null || loginName === undefined) {
            throw new Error('Required parameter loginName was null or undefined when calling getUserMetadata.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<UserOutputDto>('get',`${this.basePath}/v1/Users/${encodeURIComponent(String(loginName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get a user preference
     * 
     * @param loginName 
     * @param applicationKey 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUserPreference(loginName: string, applicationKey: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getUserPreference(loginName: string, applicationKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getUserPreference(loginName: string, applicationKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getUserPreference(loginName: string, applicationKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (loginName === null || loginName === undefined) {
            throw new Error('Required parameter loginName was null or undefined when calling getUserPreference.');
        }

        if (applicationKey === null || applicationKey === undefined) {
            throw new Error('Required parameter applicationKey was null or undefined when calling getUserPreference.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('get',`${this.basePath}/v1/Users/preference/${encodeURIComponent(String(loginName))}/${encodeURIComponent(String(applicationKey))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get user detail information
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUsers(observe?: 'body', reportProgress?: boolean): Observable<Array<UserOutputDto>>;
    public getUsers(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<UserOutputDto>>>;
    public getUsers(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<UserOutputDto>>>;
    public getUsers(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<UserOutputDto>>('get',`${this.basePath}/v1/Users`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Lock one user
     * 
     * @param loginName Target user login name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public lockUser(loginName: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public lockUser(loginName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public lockUser(loginName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public lockUser(loginName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (loginName === null || loginName === undefined) {
            throw new Error('Required parameter loginName was null or undefined when calling lockUser.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('patch',`${this.basePath}/v1/Users/lock/${encodeURIComponent(String(loginName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Reset password for other user
     * Example  &lt;pre&gt;  {   \&quot;Password\&quot;: \&quot;11ssJOKq*(\&quot;,   \&quot;PasswordConfirmation\&quot;: \&quot;11ssJOKq*(\&quot;,   \&quot;ManagerPassword\&quot;:\&quot;Admin123@cbb\&quot; // This is the passowrd from the caller,for example the administrator.  }  &lt;/pre&gt;
     * @param loginName target user login name
     * @param body password reset object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public resetPassword(loginName: string, body?: UserResetPasswordInput, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public resetPassword(loginName: string, body?: UserResetPasswordInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public resetPassword(loginName: string, body?: UserResetPasswordInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public resetPassword(loginName: string, body?: UserResetPasswordInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (loginName === null || loginName === undefined) {
            throw new Error('Required parameter loginName was null or undefined when calling resetPassword.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('patch',`${this.basePath}/v1/Users/password/reset/${encodeURIComponent(String(loginName))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Set user disabled timestamp
     * 
     * @param loginName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public resetUserDisabledTimestamp(loginName: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public resetUserDisabledTimestamp(loginName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public resetUserDisabledTimestamp(loginName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public resetUserDisabledTimestamp(loginName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (loginName === null || loginName === undefined) {
            throw new Error('Required parameter loginName was null or undefined when calling resetUserDisabledTimestamp.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('patch',`${this.basePath}/v1/Users/resetuserdisabledtimestamp/${encodeURIComponent(String(loginName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Set user authority template
     * Example  &lt;pre&gt;  {   \&quot;ManagerPassword\&quot;:\&quot;Admin123@cbb\&quot; // This is the passowrd from the caller,for example the administrator.   \&quot;AuthorityTemplateName\&quot;: \&quot;USERS\&quot;  }  &lt;/pre&gt;
     * @param loginName Target user login name
     * @param body set user authority tempalte object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setUserAuthorityTemplate(loginName: string, body?: UserSetAuthorityTemplateInput, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setUserAuthorityTemplate(loginName: string, body?: UserSetAuthorityTemplateInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setUserAuthorityTemplate(loginName: string, body?: UserSetAuthorityTemplateInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setUserAuthorityTemplate(loginName: string, body?: UserSetAuthorityTemplateInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (loginName === null || loginName === undefined) {
            throw new Error('Required parameter loginName was null or undefined when calling setUserAuthorityTemplate.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/v1/Users/authoritytemplate/${encodeURIComponent(String(loginName))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Set user disabled timestamp
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setUserDisabledTimestamp(body?: SetUserDisabledTimestampInput, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setUserDisabledTimestamp(body?: SetUserDisabledTimestampInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setUserDisabledTimestamp(body?: SetUserDisabledTimestampInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setUserDisabledTimestamp(body?: SetUserDisabledTimestampInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('patch',`${this.basePath}/v1/Users/setuserdisabledtimestamp`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Set a user preference
     * 
     * @param loginName 
     * @param applicationKey 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setUserPreference(loginName: string, applicationKey: string, body?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public setUserPreference(loginName: string, applicationKey: string, body?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public setUserPreference(loginName: string, applicationKey: string, body?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public setUserPreference(loginName: string, applicationKey: string, body?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (loginName === null || loginName === undefined) {
            throw new Error('Required parameter loginName was null or undefined when calling setUserPreference.');
        }

        if (applicationKey === null || applicationKey === undefined) {
            throw new Error('Required parameter applicationKey was null or undefined when calling setUserPreference.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<string>('post',`${this.basePath}/v1/Users/preference/${encodeURIComponent(String(loginName))}/${encodeURIComponent(String(applicationKey))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Unlock one user
     * 
     * @param loginName Target user login name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public unlockUser(loginName: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public unlockUser(loginName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public unlockUser(loginName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public unlockUser(loginName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (loginName === null || loginName === undefined) {
            throw new Error('Required parameter loginName was null or undefined when calling unlockUser.');
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('patch',`${this.basePath}/v1/Users/unlock/${encodeURIComponent(String(loginName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update user own password
     * Example  &lt;pre&gt;  {   \&quot;OldPassword\&quot;:\&quot;Admin123@cbb\&quot;,   \&quot;NewPassword\&quot;: \&quot;Admin123@cbbNew\&quot;,   \&quot;NewPasswordConfirmation\&quot;:\&quot;Admin123@cbbNew\&quot;  }  &lt;/pre&gt;
     * @param body Updatepassword input object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updatePassword(body?: UserUpdatePasswordInput, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updatePassword(body?: UserUpdatePasswordInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updatePassword(body?: UserUpdatePasswordInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updatePassword(body?: UserUpdatePasswordInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('patch',`${this.basePath}/v1/Users/password`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Set or update other user metadata
     * Example  &lt;pre&gt;  {   \&quot;loginname\&quot;:\&quot;DemoLoginNameUpdated\&quot;,   \&quot;lastname\&quot;:\&quot;UpdateTest\&quot;,   \&quot;firstname\&quot;:\&quot;UpdateTest\&quot;,   \&quot;email\&quot;:\&quot;UpdateTest@cbb.de\&quot;  }  &lt;/pre&gt;
     * @param loginName target user login name
     * @param body user update object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateUserAnyMetadata(loginName: string, body?: UserUpdateAnyMetadataInput, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateUserAnyMetadata(loginName: string, body?: UserUpdateAnyMetadataInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateUserAnyMetadata(loginName: string, body?: UserUpdateAnyMetadataInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateUserAnyMetadata(loginName: string, body?: UserUpdateAnyMetadataInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (loginName === null || loginName === undefined) {
            throw new Error('Required parameter loginName was null or undefined when calling updateUserAnyMetadata.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/v1/Users/${encodeURIComponent(String(loginName))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Modify user own metadata.
     * Example  &lt;pre&gt;  {   \&quot;loginname\&quot;:\&quot;admin\&quot;,   \&quot;lastname\&quot; :\&quot;UpdateTest\&quot;,   \&quot;firstname\&quot;:\&quot;UpdateTest\&quot;,   \&quot;email\&quot;    :\&quot;UpdateTest@cbb.de\&quot;  }  &lt;/pre&gt;
     * @param loginName user login Name
     * @param body user update obejct
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateUserOwnMetadata(loginName: string, body?: UserUpdateOwnMetadataInput, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateUserOwnMetadata(loginName: string, body?: UserUpdateOwnMetadataInput, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateUserOwnMetadata(loginName: string, body?: UserUpdateOwnMetadataInput, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateUserOwnMetadata(loginName: string, body?: UserUpdateOwnMetadataInput, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (loginName === null || loginName === undefined) {
            throw new Error('Required parameter loginName was null or undefined when calling updateUserOwnMetadata.');
        }


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('patch',`${this.basePath}/v1/Users/${encodeURIComponent(String(loginName))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
