{
  "ACTIVATION": {
    "ACTIVATE": "Activate",
    "ACTIVATION_ERROR_MESSAGE": "The activation file could not be transferred to the controller.",
    "ACTIVATION_FILE": "Please select an activation file.",
    "ACTIVATION_UNKNOWN": "The activation state of the controller could not be retrieved.",
    "APPLICATION_FILE": "Please select an application file.",
    "CANNOT_READ_CONTROLLER_SERIAL_NUMBER": "The controller's serial number could not be read.",
    "CONTROLLER_UPDATING": "Software update in progress…",
    "DECRYPTING_UPDATE_FILE_FAILED": "The update file could not be decrypted.",
    "INVALID_ACTIVATION_CODE": "The selected activation file is invalid.",
    "INVALID_CERTIFICATE": "The certificate of the update file is not valid.",
    "PRODUCT_ACTIVATION": "Product Activation",
    "PRODUCT_ID_NOT_MATCHING": "The update file does not match with the controller hardware.",
    "RAUC_INFO_FAILED": "The update file is defective. (RAUC info not readable)",
    "SEARCH": "Search…",
    "SOFTWARE_UPDATE": "Software Update",
    "UNABLE_TO_GET_ISSUER_CERTIFICATE": "The certificate of the update file is defective.",
    "UNABLE_TO_GET_LOCAL_ISSUER_CERTIFICATE": "The certificate of the update file is defective.",
    "UPDATE": "Update",
    "UPDATE_ALLREADY_INSTALLED": "The update has already been installed.",
    "UPDATE_ERROR_MESSAGE": "The update file could not be transferred to the controller.",
    "UPDATE_FAILED": "The software update failed.",
    "UPDATE_FILE_PRODUCT_ID_WRONG_FORMAT": "The update file is defective. (product ID not in expected format)",
    "UPDATE_OLDER_THAN_CURRENT": "The update file is older than the software currently installed.",
    "UPLOAD_FILE_FAILED": "The update file could not be uploaded.",
    "UPLOAD_MESSAGE": "Software update is being transferred…"
  },
  "API": {
    "DEVICE_PARAMETERS": {
      "FlowSensorDT": "Time limit exceedance",
      "FlowSensorINC": "Time increment",
      "FlowSensorN": "Counter",
      "FlowSensorNR": "Nominal size",
      "FlowSensorPMAX": "Flow limit max",
      "FlowSensorPMIN": "Flow limit min",
      "FlowSensorQ": "Flow",
      "FlowSensorSV": "Sensor Variant",
      "HyPlusFlowSensor2": "Flow Sensor 1",
      "HyPlusTemperatur1": "Temperature Sensor 1",
      "HyPlusTemperatur2": "Temperature Sensor 2",
      "PressureSensorP": "Pressure",
      "PressureSensorPDT": "Time of limit exceedance",
      "PressureSensorPMAX": "Pressure limit max",
      "PressureSensorPMIN": "Pressure limit min",
      "PressureSensorSV": "Sensor Variant",
      "TemperatureSensorDT": "Time of limit exceedance",
      "TemperatureSensorSV": "Sensor Variant",
      "TemperatureSensorT": "Temperature",
      "TemperatureSensorTMAX": "Temperature limit max",
      "TemperatureSensorTMIN": "Temperature limit min",
      "VTFlowSensorDT": "Time of limit exceedance",
      "VTFlowSensorINC": "Time increment",
      "VTFlowSensorN": "Counter",
      "VTFlowSensorNR": "Nominal size",
      "VTFlowSensorPMAX": "Flow limit max",
      "VTFlowSensorPMIN": "Flow limit min",
      "VTFlowSensorQ": "Flow",
      "VTFlowSensorSV": "Sensor Variant",
      "VTTemperatureSensorDT": "Time limit exceedance",
      "VTTemperatureSensorT": "Temperature",
      "VTTemperatureSensorTMAX": "Temperature limit max",
      "VTTemperatureSensorTMIN": "Temperature limit min",
      "beateAHCI": "Autonomous hygiene cleansing intervall",
      "beateBFV": "Big flush volume",
      "beateCFT": "Comfort function timeout",
      "beateCFTT": "Comfort function target temperature",
      "beateCMD": "Duration cleansing shutdown",
      "beateECM": "Cleansing shutdown",
      "beateHCTTW": "Hygiene cleansing target temperature warm",
      "beateMHCDW": "Maximum hygiene cleansing duration warm",
      "beateMHCLDC": "Minimum hygiene cleansing duration cold",
      "beateSCM": "Dis-/Enable comfort function",
      "beateSFV": "Small flush volume",
      "beateWFR": "Water flow rate",
      "dteAReg": "Device ready",
      "dteCOUNTS": "Boot count",
      "dteCPM": "Circulation pump on/off",
      "dteDV": "DTE Variant",
      "dteFTLPP": "Function test: Lower pump power",
      "dteFTLPS": "Function test: Lower pump on/off",
      "dteFTUPP": "Function test: Upper pump power",
      "dteFTUPS": "Function test: Upper pump on/off",
      "dteIACP": "Circulation pump on/off",
      "dteICPC": "Circulation pump connected",
      "dteIUC": "UFC connected",
      "dtePLPP": "Heizungsseite Pumpenleistung, Untere Pumpe",
      "dtePTVL": "Heizungsseite Vorlauf, Ist-Temperatur",
      "dtePUPP": "Heizungsseite Pumpenleistung, Obere Pumpe",
      "dteSAPWH": "Trinkwasser warm (PWH), Ist-Temperatur",
      "dteSATPWHC": "Trinkwasser warm, Zirkulation (PWH-C), Ist-Temperatur",
      "dteSATPWHPWHC": "Mischtemperatur PWH und PWH-C, Ist-Temperatur",
      "dteSAVRPWHPWHC": "Volumenstrom PWH & PWH-C, Ist-Volumenstrom",
      "dteSMode": "Umschaltung: Grundbetrieb, Normabetrieb, Thermischer Desinfektionsmodus, Wartungsmodus",
      "dteSTPWH": "Trinkwasser warm (PWH), Soll-Temperatur",
      "rulanticaFlowQA1": "Ventilöffnung in %",
      "rulanticaTempQA1": "Temperatur in Grad",
      "rulanticaWaterDur": "Spüldauer in Sekunden",
      "sens-e-1-pt1000": "Multi I/O 1 Pt1000",
      "sens-e-1-sensor-type": "Sensor Type",
      "sens-e-2-pt1000": "Multi I/O 2 Pt1000",
      "sens-e-2-sensor-type": "Sensor Type",
      "ufcfc": "UFC Fehlerkontakt",
      "viegaIV": "Interface version",
      "viegaOH": "Betriebsdauer",
      "viegaPId": "Product Id",
      "viegaSN": "Serial number",
      "viegaSV": "Software version",
      "walleAHCI": "Autonomous hygiene cleansing intervall",
      "walleCMD": "Dauer Reinungungsabschaltung",
      "walleECM": "Reinigungsabschaltung",
      "walleHCTTW": "Hygiene cleansing target temperature warm",
      "walleMHCDC": "Minimum hygiene cleansing duration cold",
      "walleMHCDW": "Maximum hygiene cleansing duration warm",
      "walleMT": "Maximaltemperatur",
      "walleSMD": "Dauer Sicherheitsabschaltung",
      "walleSSM": "Sicherheitabschaltung an/aus",
      "walleWFR": "Water flow rate",
      "zirkeDefaultMode": "Selection hot/cold water circulation",
      "zirkeMVPWCC": "Manual valve position PWC-C",
      "zirkeMVPWHC": "Manual valve position PWH-C",
      "zirkeOperatingMode": "Operation mode",
      "zirkeSATTPWHC": "Stand-alone temperature setpoint PWH-C",
      "zirkeSelfCleaning": "Run self-cleaning",
      "zirkeTPWCC": "Temperature PWC-C",
      "zirkeTPWHC": "Temperature PWH-C",
      "zirkeTTPWCC": "Temperature setpoint PWC-C",
      "zirkeTTPWHC": "Temperature setpoint PWH-C",
      "zirkeVPWHC": "Valve position PWC-C"
    },
    "DEVICE_TYPE_NAME": {
      "BeatE": "Prevista Dry WC Element with integrated Rinsing Station",
      "Controller": "AquaVip Controller",
      "DTE": "DTE",
      "FlowAndTemperatureSensor": "Combisensor Flow and Temperature",
      "FlowSensor": "Flow Sensor",
      "GPIO": "GPIO",
      "Hyplus": "Hyplus",
      "KeySwitch": "Key Switch",
      "LEDBar": "LED Bar",
      "MagneticValve": "Valve",
      "PressureSensor": "Pressure Sensor",
      "PulseSensor": "Pulse Sensor",
      "Pump": "Pump",
      "Rulantica": "Rulantica",
      "RulanticaT": "Rulantica-T",
      "TemperatureSensor": "Temperature Sensor",
      "UfcFaultContact": "Ufc Fault Contact",
      "WallE": "AquaVip Lavatory Tab",
      "WirePort": "WirePort",
      "WireSens": "WireSens",
      "ZirkE": "Zirk-E"
    },
    "FUNCTIONTEST": {
      "DTE": {
        "CANCONNECTIONTEST": "CAN Connection",
        "CANCONNECTIONTEST_FAILED": "",
        "CANCONNECTIONTEST_HWVERSION": "",
        "CANCONNECTIONTEST_ITFVERSION": "",
        "CANCONNECTIONTEST_PRODUCTID": "",
        "CANCONNECTIONTEST_SERIALNUMBER": "",
        "CANCONNECTIONTEST_SUCCESS": "CAN connection is working.",
        "CANCONNECTIONTEST_SWVERSION": "",
        "COMMUNICATIONERROR": "",
        "DESCRIPTION": "",
        "FINALIZEERROR": "",
        "FLOWSENSORTEST": "Flow Sensor",
        "FLOWSENSORTEST_FAILED": "The measured flow value is not plausible.",
        "FLOWSENSORTEST_HINT": "Hint: Please notice, the actual fow value has to be above the DTEs detection threshold.",
        "FLOWSENSORTEST_MEASUREDVALUE": "Measured flow value",
        "FLOWSENSORTEST_PLAUSIBILITYQUESTION": "Does the measured flow sensor value correspond to an expected flow value?",
        "FLOWSENSORTEST_SENSORERROR": "The flow sensor communication failed. Possible reasons: Sensor not connected, short circuit or cable break.",
        "FLOWSENSORTEST_SUCCESS": "The measured flow corresponds to the actual flow.",
        "FLOWSENSORTEST_VALUEWAS": "Measured flow was {0}.",
        "INPUT_NO": "",
        "INPUT_OK": "",
        "INPUT_YES": "",
        "INTERNALERROR": "",
        "LEDBARTEST": "LED Bar",
        "LEDBARTEST_BLUE": "Blue",
        "LEDBARTEST_BOTH": "Red & Blue",
        "LEDBARTEST_FAILED": "LED patterns not recognized correctly.",
        "LEDBARTEST_NONE": "None",
        "LEDBARTEST_QUESTION": "Which LEDs glow at the moment?",
        "LEDBARTEST_RED": "Red",
        "LEDBARTEST_STEP": "Step {0}/{1}",
        "LEDBARTEST_SUCCESS": "All patterns recognized correctly.",
        "NONE": "",
        "PUMPTEST": "Pump",
        "PUMPTEST_CURRENT": "Currents (mA): Top: {0}; Bottom: {1}.",
        "PUMPTEST_FAILED": "The pumps are connected inverted.",
        "PUMPTEST_PUMPBOTTOM": "Pump Bottom (mA)",
        "PUMPTEST_PUMPTOP": "Pump Top (mA)",
        "PUMPTEST_QUESTION": "Please use the current clamp and enter the current.",
        "PUMPTEST_STEP": "{0}/2",
        "PUMPTEST_SUCCESS": "The pumps are connected correctly.",
        "SUPPLYVOLTAGETEST": "Supply Voltage",
        "SUPPLYVOLTAGETEST_FAILED": "Value of supply voltage has to be between {0} and {1}.",
        "SUPPLYVOLTAGETEST_SUCCESS": "The supply voltage is correctly between {0} and {1}.",
        "SUPPLYVOLTAGETEST_SUPPLYVOLTAGE": "Supply Voltage",
        "TEMPERATURESENSORTEST": "Temperature Sensor",
        "TEMPERATURESENSORTEST_DTESUBSTITUTION": "The DTE was substituted",
        "TEMPERATURESENSORTEST_DTESUBSTITUTIONQUESTION": "Has the DTE controller been substituted?",
        "TEMPERATURESENSORTEST_DTESUBSTITUTIONTEMPERATURSENSORHINT": "Please ensure that the temperature sensors are connected to the DTE controller. Otherwise there will be automated control system errors.",
        "TEMPERATURESENSORTEST_TEMPERATURESENSORAUTOMATICFAILURE": "The temperature sensor communication failed.",
        "TEMPERATURESENSORTEST_TEMPERATURESENSORERROR": "The temperature sensor communication failed. Possible reasons: PWH: sensor not connected, bypass; PWHC: cable break.",
        "TEMPERATURESENSORTEST_TEMPERATURESENSORMANUALFAILURE": "The measued temperature sensor values do not corresond to the expected values.",
        "TEMPERATURESENSORTEST_TEMPERATURESENSORPWCPWHC": "",
        "TEMPERATURESENSORTEST_TEMPERATURESENSORPWH": "",
        "TEMPERATURESENSORTEST_TEMPERATURESENSORPWHC": "",
        "TEMPERATURESENSORTEST_TEMPERATURESENSORQUESTION": "Are the temperature sensor values plausible?",
        "TEMPERATURESENSORTEST_TEMPERATURESENSORSUCCESS": "The temperature sensor values are plausible.",
        "TEMPERATURESENSORTEST_TEMPERATURESENSORSUPPLY": "",
        "TEMPERATURESENSORTEST_TEMPERATUREVALUESSTRING": "PWH: {0}, PWC u. PWHC: {1}, PWHC: {2}, Supply: {3}.",
        "WATERTEST": "Water",
        "WATERTEST_NOWATER": "The system has to be filled with water!",
        "WATERTEST_WATERFILLEDQUESTION": "Is the system filled with water?"
      }
    },
    "MESSAGE_TYPES": {
      "CANSlaveAutomaticResetAfterHardwareFailure": "CAN slave did reset after hardware failure. {{Reason}}",
      "CANSlaveHardwarePersistentFailure": "CAN slave has a persistant hardware failure. {{Reason}}",
      "ControllerPointTableSvc": {
        "AssignPointAddressToControllerPoint": "Requester User ID: {{requesterUserId}}, Controller Point name: {{controllerPoint.name}}, Node ID of Controller Point: {{controllerPoint.controllerID}}, remark of Controller Point: {{controllerPoint.remark}}",
        "CreateControllerPointWithCliqueId": "User identifier: {{requesterUserId}}, id of the clique: {{cliqueId}}, name of a controller point: {{name}}, id of the controller: {{controllerId}}, remark of the controller point: {{remark}}",
        "CreateControllerPointWithUUIDAndCliqueId": "User identifier: {{requesterUserId}}, id of the clique: {{cliqueId}}, name of a controller point: {{name}}, id of the controller: {{controllerId}}, remark of the controller point: {{remark}}, UUID of the device: {{targetUUID}}",
        "DeleteControllerPoint": "Requester User ID: {{requesterUserId}}, controllerPointEdit.uuid: {{controllerPointEdit.uuid}}, controllerPointEdit.name: {{controllerPointEdit.name}}, controllerPointEdit.controllerId: {{controllerPointEdit.controllerId}}, controllerPointEdit.remark: {{controllerPointEdit.remark}}, controllerPointEdit.building: {{controllerPointEdit.building}}, controllerPointEdit.area: {{controllerPointEdit.area}}, controllerPointEdit.room: {{controllerPointEdit.room}}, controllerPointEdit.segment: {{controllerPointEdit.segment}}, controllerPointEdit.newEnabledTimestamp: {{controllerPointEdit.newEnabledTimestamp}}, controllerPointEdit.newDisabledTimestamp: {{controllerPointEdit.newDisabledTimestamp}}",
        "InstallControllerToControllerPoint": "Requester User ID: {{requesterUserId}}, controllerPointEdit.uuid: {{controllerPointEdit.uuid}}, controllerPointEdit.name: {{controllerPointEdit.name}}, controllerPointEdit.controllerId: {{controllerPointEdit.controllerId}}, controllerPointEdit.remark: {{controllerPointEdit.remark}}, controllerPointEdit.building: {{controllerPointEdit.building}}, controllerPointEdit.area: {{controllerPointEdit.area}}, controllerPointEdit.room: {{controllerPointEdit.room}}, controllerPointEdit.segment: {{controllerPointEdit.segment}}, controllerPointEdit.newEnabledTimestamp: {{controllerPointEdit.newEnabledTimestamp}}, controllerPointEdit.newDisabledTimestamp: {{controllerPointEdit.newDisabledTimestamp}}",
        "SetControllerPointControllerId": "Requester User ID: {{requesterUserId}}, controllerPointEdit.uuid: {{controllerPointEdit.uuid}}, controllerPointEdit.name: {{controllerPointEdit.name}}, controllerPointEdit.controllerId: {{controllerPointEdit.controllerId}}, controllerPointEdit.remark: {{controllerPointEdit.remark}}, controllerPointEdit.building: {{controllerPointEdit.building}}, controllerPointEdit.area: {{controllerPointEdit.area}}, controllerPointEdit.room: {{controllerPointEdit.room}}, controllerPointEdit.segment: {{controllerPointEdit.segment}}, controllerPointEdit.newEnabledTimestamp: {{controllerPointEdit.newEnabledTimestamp}}, controllerPointEdit.newDisabledTimestamp: {{controllerPointEdit.newDisabledTimestamp}}",
        "SetControllerPointDisabledTimestamp": "Requester User ID: {{requesterUserId}}, controllerPointEdit.uuid: {{controllerPointEdit.uuid}}, controllerPointEdit.name: {{controllerPointEdit.name}}, controllerPointEdit.controllerId: {{controllerPointEdit.controllerId}}, controllerPointEdit.remark: {{controllerPointEdit.remark}}, controllerPointEdit.building: {{controllerPointEdit.building}}, controllerPointEdit.area: {{controllerPointEdit.area}}, controllerPointEdit.room: {{controllerPointEdit.room}}, controllerPointEdit.segment: {{controllerPointEdit.segment}}, controllerPointEdit.newEnabledTimestamp: {{controllerPointEdit.newEnabledTimestamp}}, controllerPointEdit.newDisabledTimestamp: {{controllerPointEdit.newDisabledTimestamp}}",
        "SetControllerPointEnabledTimestamp": "Requester User ID: {{requesterUserId}}, controllerPointEdit.uuid: {{controllerPointEdit.uuid}}, controllerPointEdit.name: {{controllerPointEdit.name}}, controllerPointEdit.controllerId: {{controllerPointEdit.controllerId}}, controllerPointEdit.remark: {{controllerPointEdit.remark}}, controllerPointEdit.building: {{controllerPointEdit.building}}, controllerPointEdit.area: {{controllerPointEdit.area}}, controllerPointEdit.room: {{controllerPointEdit.room}}, controllerPointEdit.segment: {{controllerPointEdit.segment}}, controllerPointEdit.newEnabledTimestamp: {{controllerPointEdit.newEnabledTimestamp}}, controllerPointEdit.newDisabledTimestamp: {{controllerPointEdit.newDisabledTimestamp}}",
        "SetControllerPointMainMetaData": "Requester User ID: {{requesterUserId}}, input.controllerUUID: {{input.controllerUUID}}, input.controllerPointUUID: {{input.controllerPointUUID}}",
        "UninstallControllerFromControllerPoint": "Requester User ID: {{requesterUserId}}, target controller uuid: {{uuid}}",
        "UpdateControllerPoint": "Requester User ID: {{requesterUserId}}, input.building: {{input.building}}, input.area: {{input.area}}, input.room: {{input.room}}, input.segment: {{input.segment}}, input.controllerPointUUID: {{input.controllerPointUUID}}"
      },
      "ControllerTableSvc": {
        "CreateControllerWithCliqueId": "User identifier: {{requesterUserId}}, id of the clique: {{cliqueId}}, name of the controller: {{name}}, serial number of the controller: {{serialNumber}}, remark of the controller: {{remark}}, timestamp of last maintenance: {{lastMaintenanceTimestamp}}, interval of maintenance: {{maintenanceInterval}}",
        "CreateControllerWithUUIDAndCliqueId": "User identifier: {{requesterUserId}}, id of the clique: {{cliqueId}}, name of the controller: {{name}}, serial number of the controller: {{serialNumber}}, remark of the controller: {{remark}}, timestamp of last maintenance: {{lastMaintenanceTimestamp}}, interval of maintenance: {{maintenanceInterval}}, UUID of the device: {{targetUUID}}",
        "DeleteController": "Requester User ID: {{requesterUserId}}, UUID of Controller: {{controllerParams.uuid}}, Controller name: {{controllerParams.newName}}, SerialNumber of Controller: {{controllerParams.newSerialNumber}}, Remark of Controller: {{controllerParams.newRemark}}, Maintenance Interval of Controller: {{controllerParams.newMaintenanceIntervalDays}}, Last Maintenance Timestamp of Controller: {{controllerParams.newLastMaintenanceTimestamp}}",
        "SetControllerCliqueID": "Requester User ID: {{requesterUserId}}, UUID: {{controllerParams.uuid}}, Controller name: {{controllerParams.newName}}, SerialNumber of Controller: {{controllerParams.newSerialNumber}}, Remark of Controller: {{controllerParams.newRemark}}, Maintenance Interval of Controller: {{controllerParams.newMaintenanceInterval}}, Last Maintenance Timestamp of Controller: {{controllerParams.newLastMaintenanceTimestamp}}",
        "SetControllerCliqueIDByName": "Requester User ID: {{requesterUserId}}, UUID of Controller: {{controllerParams.uuid}}, Controller name: {{controllerParams.newName}}, SerialNumber of Controller: {{controllerParams.newSerialNumber}}, Remark of Controller: {{controllerParams.newRemark}}, Maintenance Interval of Controller: {{controllerParams.newMaintenanceIntervalDays}}, Last Maintenance Timestamp of Controller: {{controllerParams.newLastMaintenanceTimestamp}}",
        "SetControllerMainMetadata": "Requester User ID: {{requesterUserId}}, controllerParams.uuid: {{controllerParams.uuid}}, controllerParams.newCliqueID: {{controllerParams.newCliqueID}}",
        "SetControllerMaintenance": "Requester User ID: {{requesterUserId}}, controllerParams.targetName: {{controllerParams.targetName}}, controllerParams.newCliqueID: {{controllerParams.newCliqueID}}",
        "SetControllerMetadata": "Requester User ID: {{requesterUserId}}, UUID of Controller: {{uuid}}"
      },
      "CreateHygieneCleansingFailedBlockedMessageTypes": "Hygiene flush \"{{functionName}}\" failed on {{flushPipeType}}, because devices \"{{hygieneCleansingBlockedDeviceNames}}\" blocked by the following functions: \"{{hygieneCleansingBlockingFunctionNames}}\".",
      "CreateHygieneCleansingFailedDeviceMessageTypes": "Hygiene flush \"{{functionName}}\" failed on {{flushPipeType}} for device: \"{{devicePointName}}\", because {{hygieneCleansingFailedDeviceReason}}. Additional information: {{hygieneCleansingFailedDeviceReasonParameter}}.",
      "CreateHygieneCleansingFailedMessageTypes": "Hygiene flush \"{{functionName}}\" failed on {{flushPipeType}}, because only {{successfulCount}} devices were successful and {{failedCount}} devices failed. {{failedTemperatureCount}} devices do not reached the desired temperature and {{timeoutCount}} devices exceeded the timeout limit.",
      "CreateHygieneCleansingSuccessfulMessageTypes": "Hygiene flush \"{{functionName}}\" was successful on {{flushPipeType}}.",
      "CreateSensorLimitMaxViolationMessageTypes": "Sensor \"{{sensorName}}\" exceeded LimitMax ({{limitMax}}) for {{timeLimitViolationSeconds}} sec!",
      "CreateSensorLimitMinViolationMessageTypes": "Sensor \"{{sensorName}}\" exceeded LimitMin ({{limitMin}}) for {{timeLimitViolationSeconds}} sec!",
      "DevicePointTableSvc": {
        "AssignControllerPointToDevicePoint": "Requester User ID: {{requesterUserId}}, device point name: {{param.name}}, Node ID of Device Point: {{param.nodeID}}, ControllerID of a Controller Point: {{param.controllerID}}, remark of device point: {{param.remark}}, Enabled Timestamp of Device Point: {{param.enabledTimestamp}}, Point Address UUID: {{param.pointAddressUUID}}, Name of the device type: {{param.deviceTypeName}}",
        "AssignPointAddressToDevicePoint": "Requester User ID: {{requesterUserId}}, device point name: {{param.name}}, Node ID of Device Point: {{param.nodeID}}, ControllerID of a Controller Point: {{param.controllerID}}, remark of device point: {{param.remark}}, Enabled Timestamp of Device Point: {{param.enabledTimestamp}}, Point Address UUID: {{param.pointAddressUUID}}, Name of the device type: {{param.deviceTypeName}}",
        "AssignPointAddressUUIDToDevicePoint": "Requester User ID: {{requesterUserId}}, UUID of the DevicePoint: {{uuid}}",
        "CreateDevicePointWithCliqueId": "User identifier: {{requesterUserId}}, id of the clique: {{cliqueId}}, name of this device point: {{name}}, node id for use in opcsa: {{nodeId}}, comment on this device point: {{remark}}, name of the device type: {{deviceTypeName}}",
        "CreateDevicePointWithCliqueIdLesser": "User identifier: {{requesterUserId}}, id of the clique: {{cliqueId}}, name of this device point: {{name}}, comment on this device point: {{remark}}, name of the device type: {{deviceTypeName}}",
        "CreateDevicePointWithUUIDAndCliqueId": "User identifier: {{requesterUserId}}, id of the clique: {{cliqueId}}, name of this device point: {{name}}, node id for use in opcsa: {{nodeId}}, comment on this device point: {{remark}}, name of the device type: {{deviceTypeName}}, UUID of the device: {{targetUUID}}",
        "DeleteDevicePoint": "Requester User ID: {{requesterUserId}}, devicePointEdit.uuid: {{devicePointEdit.uuid}}, devicePointEdit.name: {{devicePointEdit.name}}, devicePointEdit.controllerId: {{devicePointEdit.controllerId}}, devicePointEdit.nodeId: {{devicePointEdit.nodeId}}, devicePointEdit.remark: {{devicePointEdit.remark}}, devicePointEdit.building: {{devicePointEdit.building}}, devicePointEdit.area: {{devicePointEdit.area}}, devicePointEdit.room: {{devicePointEdit.room}}, devicePointEdit.segment: {{devicePointEdit.segment}}, devicePointEdit.newEnabledTimestamp: {{devicePointEdit.newEnabledTimestamp}}, devicePointEdit.newDisabledTimestamp: {{devicePointEdit.newDisabledTimestamp}}",
        "InstallDeviceToDevicePoint": "Requester User ID: {{requesterUserId}}, devicePointEdit.uuid: {{devicePointEdit.uuid}}, devicePointEdit.name: {{devicePointEdit.name}}, devicePointEdit.controllerId: {{devicePointEdit.controllerId}}, devicePointEdit.nodeId: {{devicePointEdit.nodeId}}, devicePointEdit.remark: {{devicePointEdit.remark}}, devicePointEdit.building: {{devicePointEdit.building}}, devicePointEdit.area: {{devicePointEdit.area}}, devicePointEdit.room: {{devicePointEdit.room}}, devicePointEdit.segment: {{devicePointEdit.segment}}, devicePointEdit.newEnabledTimestamp: {{devicePointEdit.newEnabledTimestamp}}, devicePointEdit.newDisabledTimestamp: {{devicePointEdit.newDisabledTimestamp}}",
        "ResetDevicePointDisabledTimestamp": "Requester User ID: {{requesterUserId}}, devicePointEdit.uuid: {{devicePointEdit.uuid}}, devicePointEdit.name: {{devicePointEdit.name}}, devicePointEdit.controllerId: {{devicePointEdit.controllerId}}, devicePointEdit.nodeId: {{devicePointEdit.nodeId}}, devicePointEdit.remark: {{devicePointEdit.remark}}, devicePointEdit.building: {{devicePointEdit.building}}, devicePointEdit.area: {{devicePointEdit.area}}, devicePointEdit.room: {{devicePointEdit.room}}, devicePointEdit.segment: {{devicePointEdit.segment}}, devicePointEdit.newEnabledTimestamp: {{devicePointEdit.newEnabledTimestamp}}, devicePointEdit.newDisabledTimestamp: {{devicePointEdit.newDisabledTimestamp}}",
        "SetDevicePointCliqueId": "Requester User ID: {{requesterUserId}}, devicePointEdit.uuid: {{devicePointEdit.uuid}}, devicePointEdit.name: {{devicePointEdit.name}}, devicePointEdit.controllerId: {{devicePointEdit.controllerId}}, devicePointEdit.nodeId: {{devicePointEdit.nodeId}}, devicePointEdit.remark: {{devicePointEdit.remark}}, devicePointEdit.building: {{devicePointEdit.building}}, devicePointEdit.area: {{devicePointEdit.area}}, devicePointEdit.room: {{devicePointEdit.room}}, devicePointEdit.segment: {{devicePointEdit.segment}}, devicePointEdit.newEnabledTimestamp: {{devicePointEdit.newEnabledTimestamp}}, devicePointEdit.newDisabledTimestamp: {{devicePointEdit.newDisabledTimestamp}}",
        "SetDevicePointCliqueIdByName": "Requester User Id: {{requesterUserId}}, UUID of the target device: {{deviceUUID}}, UUID of the target device point: {{devicePointUUID}}",
        "SetDevicePointControllerIdAndNodeId": "Requester User Id: {{requesterUserId}}, UUID of the target device: {{deviceUUID}}, UUID of the target device point: {{devicePointUUID}}",
        "SetDevicePointDisabledTimestamp": "Requester User ID: {{requesterUserId}}, input.pointAddressUUID: {{input.pointAddressUUID}}, input.devicePointUUID: {{input.devicePointUUID}}, input.building: {{input.building}}, input.area: {{input.area}}, input.room: {{input.room}}, input.segment: {{input.segment}}",
        "SetDevicePointEnabledTimestamp": ": {{requesterUserId}}, : {{devicePointUUID}}, : {{nodeId}}",
        "SetDevicePointMainMetaData": "Requester User ID: {{requesterUserId}}, input.targetUUID: {{input.targetUUID}}, input.controllerID: {{input.controllerID}}",
        "SetDevicePointMetadata": "Requester User ID: {{requesterUserId}}, Target UUID of Device Point: {{targetUUID}}",
        "SetDevicePointNodeId": "Requester User ID: {{requesterUserId}}, devicePointParams.targetUUID: {{devicePointParams.targetUUID}}, devicePointParams.cliqueID: {{devicePointParams.cliqueID}}",
        "UnassignControllerPointFromDevicePoint": "Requester User ID: {{requesterUserId}}, devicePointParams.targetName: {{devicePointParams.targetName}}, devicePointParams.cliqueID: {{devicePointParams.cliqueID}}",
        "UninstallDeviceFromDevicePoint": "Requester User ID: {{requesterUserId}}, Target UUID: {{targetUUID}}, Point Address UUID: {{pointAddressUUID}}",
        "UpdateDevicePoint": "requesterUserId: {{requesterUserId}}, uuid: {{uuid}}"
      },
      "DevicesTableSvc": {
        "CreateDeviceFirmware": "Requester User Id: {{requesterUserId}}, Version of the Device Firmware: {{createDeviceFirmwareParameters.version}}, Remark of the Device Firmware: {{createDeviceFirmwareParameters.remark}}, Firmware File of the Device Firmware: {{createDeviceFirmwareParameters.filePath}}",
        "CreateDeviceType": "Requester User Id: {{requesterUserId}}, uuid: {{uuid}}",
        "CreateDeviceWithCliqueIdEx": "User identifier: {{requesterUserId}}, id of the clique: {{cliqueId}}, name of the device: {{name}}, identity object: revision number: {{revisionNumber}}, identity object: serial number: {{serialNumber}}, remark: {{remark}}, timestamp of last maintenance: {{lastMaintenanceTimestamp}}, interval of maintenance: {{maintenanceInterval}}, Name of the device type: {{deviceTypeName}}, UUID of the device ancestor: {{ancestorDeviceUUID}}, Port of this device on the ancestor device: {{ancestorDevice_Port}}, UUID of the creator (e.g. Controller, ControllerPoint, User, ..., Actor): {{createdByUUID}}",
        "CreateDeviceWithUUIDAndCliqueIdEx": "User identifier: {{requesterUserId}}, id of the clique: {{cliqueId}}, name of the device: {{name}}, identity object: revision number: {{revisionNumber}}, identity object: serial number: {{serialNumber}}, remark: {{remark}}, timestamp of last maintenance: {{lastMaintenanceTimestamp}}, interval of maintenance: {{maintenanceInterval}}, Name of the device type: {{deviceTypeName}}, UUID of the device ancestor: {{ancestorDeviceUUID}}, Port of this device on the ancestor device: {{ancestorDevice_Port}}, UUID of the creator (e.g. Controller, ControllerPoint, User, ..., Actor): {{createdByUUID}}, UUID of the device: {{targetUUID}}",
        "DeleteDevice": "UUID of source device: {{sourceUUID}}, UUID of target device: {{targetUUID}}",
        "DeleteDeviceFirmware": "Requester User Id: {{requesterUserId}}, Version of the Device Firmware: {{createDeviceFirmwareParameters.version}}, Remark of the Device Firmware: {{createDeviceFirmwareParameters.remark}}, Firmware File of the Device Firmware: {{createDeviceFirmwareParameters.filePath}}",
        "DeleteDeviceType": "Requester User Id: {{requesterUserId}}, param.version: {{param.version}}, param.newVersion: {{param.newVersion}}, param.remark: {{param.remark}}, param.filePath: {{param.filePath}}",
        "InstallDeviceFirmwareToDevice": "Requester User Id: {{requesterUserId}}, deviceUuid: {{deviceUuid}}, firmwareVersion: {{firmwareVersion}}",
        "SetDeviceAncestorAndPortByUUID": "Requester User ID: {{requesterUserId}}, createDeviceTypeParameters.name: {{createDeviceTypeParameters.name}}, createDeviceTypeParameters.templateFile: {{createDeviceTypeParameters.templateFile}}",
        "SetDeviceAncestorByName": "Requester User Id: {{requesterUserId}}, Name of type: {{name}}",
        "SetDeviceAncestorByUUID": "Requester User Id: {{requesterUserId}}, param.name: {{param.name}}, param.newName: {{param.newName}}, param.templateFile: {{param.templateFile}}",
        "SetDeviceFirmware": "Requester User Id: {{requesterUserId}}, : {{deviceUuid}}, : {{firmwareVersion}}",
        "SetDeviceIdentityObject": "Requester User Id: {{requesterUserId}}, parameters.deviceFirmwareVersion: {{parameters.deviceFirmwareVersion}}, parameters.deviceUUID: {{parameters.deviceUUID}}",
        "SetDeviceMainMetadata": "Requester User Id: {{requesterUserId}}, UUID of Device: {{param.uuid}}, Device name: {{param.newName}}, SerialNumber of Device: {{param.newSerialNumber}}, Revision Number of Device: {{param.newRevisionNumber}}, Device Type Name: {{param.newDeviceTypeName}}, Remark of Device: {{param.newRemark}}",
        "SetDeviceMaintenance": "Requester User ID: {{requesterUserId}}, input.targetUUID: {{input.targetUUID}}, input.newLastMaintenanceTimestamp: {{input.newLastMaintenanceTimestamp}}, input.newMaintenanceIntervalDays: {{input.newMaintenanceIntervalDays}}",
        "SetDeviceMetadata": "Requester User ID: {{requesterUserId}}, input.targetUUID: {{input.targetUUID}}, input.newVendorID: {{input.newVendorID}}, input.newProductCode: {{input.newProductCode}}, input.newRevisionNumber: {{input.newRevisionNumber}}, input.newSerialNumber: {{input.newSerialNumber}}",
        "SetDevicePreSelectedNodeId": "RequesterUserId: {{requesterUserId}}, targetUUID: {{targetUUID}}, newPreSelectedNodeId: {{newPreSelectedNodeId}}",
        "SetDeviceType": "Requester User ID: {{requesterUserId}}, Target UUID: {{input.targetUUID}}, UUID Ancestor: {{input.ancestorUUID}}",
        "TransferDeviceConfiguration": "Requester User ID: {{requesterUserId}}, Target Name: {{input.targetName}}, UUID Ancestor: {{input.ancestorName}}",
        "UninstallDeviceFirmwareFromDevice": "Requester Uer ID: {{requesterUserId}}, Target UUID: {{input.targetUUID}}, UUID Ancestor: {{input.ancestorUUID}}, Port: {{input.ancestorPort}}"
      },
      "DteErrorMessage6600Types": "Verbindung zwischen AquaVip- und DTE-Controller konnte nicht aufgebaut werden. Wenn das Problem bestehen bleibt, wenden Sie sich an den Viega Service. (6600)",
      "DteErrorMessage6601Types": "Verbindungsfehler zum DTE. Wenden Sie sich an den Viega Service. (6601)",
      "DteErrorMessage6602Types": "Der DTE wurde aufgrund eines Fehlers abgeschaltet. Wenden Sie sich an den Viega Service. (6602)",
      "DteErrorMessage6603Types": "Der DTE wurde aufgrund eines Fehlers abgeschaltet. Wenden Sie sich an den Viega Service. (6603)",
      "DteErrorMessage6604Types": "De DTE wurde aufgrund eines Fehlers abgeschaltet. Wenden Sie sich an den Viega Service. (6604)",
      "DteErrorMessage6605Types": "Der DTE wurde aufgrund eines Fehlers abgeschaltet. Wenden Sie sich an den Viega Service. (6605)",
      "DteErrorMessage6606Types": "Der DTE wurde aufgrund eines Fehlers abgeschaltet. Wenden Sie sich an den Viega Service. (6606)",
      "DteErrorMessage6607Types": "Der DTE wurde aufgrund eines Fehlers abgeschaltet. Wenden Sie sich an den Viega Service. (6607)",
      "DteErrorMessage6608Types": "Der DTE wurde aufgrund eines Fehlers abgeschaltet. Wenden Sie sich an den Viega Service. (6608)",
      "DteErrorMessage6609Types": "Der DTE wurde aufgrund eines Fehlers abgeschaltet. Wenden Sie sich an den Viega Service. (6609)",
      "DteErrorMessage6610Types": "Der DTE wurde aufgrund eines Fehlers abgeschaltet. Wenden Sie sich an den Viega Service. (6610)",
      "DteErrorMessage6611Types": "Der DTE wurde aufgrund eines Fehlers abgeschaltet. Wenden Sie sich an den Viega Service. (6611)",
      "DteErrorMessage6612Types": "Störung an der Spannungsversorgung. Wenden Sie sich an den Viega Service. (6612)",
      "DteErrorMessage6613Types": "Der DTE wurde aufgrund eines Fehlers an der Spannungsversorgung abgeschaltet.  Wenden Sie sich an den Viega Service. (6613)",
      "DteErrorMessage6614Types": "Softwarefehler. Wenden Sie sich an den Viega Service. (6614)",
      "DteErrorMessage6615Types": "Der DTE wurde aufgrund eines Softwarefehlers abgeschaltet.  Wenden Sie sich an den Viega Service. (6615)",
      "DteErrorMessage6616Types": "PWH-Temperatur zeitweise außerhalb des Sollbereichs. Ursache prüfen. (6616)",
      "DteErrorMessage6617Types": "PWH-Temperatur zeitweise außerhalb des Sollbereichs. Ursache prüfen. (6617)",
      "DteErrorMessage6618Types": "PWH-Temperatur außerhalb des Sollbereichs. Der DTE wurde abgeschaltet. Wenden Sie sich umgehend an den Viega Service. (6618)",
      "DteErrorMessage6619Types": "PWH-Temperatur außerhalb des Sollbereichs. Der DTE wurde abgeschaltet.  Wenden Sie sich umgehend an den Viega Service. (6619)",
      "DteErrorMessage6620Types": "Zu geringe Pufferspeicher-Temperatur. Der DTE wurde abgeschaltet. Pufferspeicher überprüfen. (6620)",
      "DteErrorMessage6621Types": "Der DTE wurde auf Werkseinstellungen zurückgesetzt. (6621)",
      "DteErrorMessage6622Types": "Funktionstest erfolgreich. (6622)",
      "DteErrorMessage6623Types": "Funktionstest fehlgeschlagen. (6623)",
      "DteErrorMessage6624Types": "Werksfunktionstest erfolgreich. (6624)",
      "DteErrorMessage6625Types": "Werksfunktionstest fehlgeschlagen. (6625)",
      "DteErrorMessage6626Types": "Thermische Desinfektion erfolgreich abgeschlossen. (6626)",
      "DteErrorMessage6627Types": "Thermische Desinfektion abgebrochen. (6627)",
      "DteErrorMessage6628Types": "Wartung in 30 Tagen fällig.(6628)",
      "DteErrorMessage6629Types": "Wartung fällig. (6629)",
      "DteErrorMessage6630Types": "Wartung durchgeführt. (6630)",
      "DteErrorMessage6631Types": "Der DTE wurde in den Grundbetrieb gesetzt, die Temperatur im Pufferspeicher überprüfen und ggf. erhöhen. Wenden Sie sich umgehend an den Viega Service. (6631)",
      "DteErrorMessage6632Types": "Zu geringe Pufferspeicher-Temperatur. Pufferspeicher überprüfen. (6632)",
      "DteErrorMessage6633Types": "PWH-C-Temperatur zeitweise außerhalb des Sollbereichs. Ursache prüfen. (6633)",
      "DteErrorMessage6634Types": "PWH-C-Temperatur außerhalb des Sollbereichs. Der DTE wurde abgeschaltet. Wenden Sie sich umgehend an den Viega Service. (6634)",
      "DteErrorMessage6635Types": "Der DTE wurde in den Werkszustand versetzt, da die Einstellungen nicht geladen werden konnten. Tritt diese Störung häufiger auf, wenden Sie sich an den Viega Service. (6635)",
      "DteErrorMessage6636Types": "The DTE was turned of due to a possible error. Please contact the Viega Service if this error occurs repeatedly. (6636)",
      "DteErrorMessage6637Types": "Kein Zirkulationsvolumenstrom: Es wurde keine Zirkulation erkannt. Dies kann die Wassertemperatur-Regelung negativ beeinflussen. Ursache prüfen. (6637)",
      "DteErrorMessage6638Types": "Zirkulationsvolumenstrom wieder vorhanden: Die Zirkulation konnte wieder erkannt werden. (6638)",
      "DteUfcNotOkMessageTypes": "The ultrafiltration contact (UFC) on DTE \"{{dteName}}\" is not okay! Therefore the system rises the PWH target temperature for this DTE from {{dtePwhTargetTemperatureOld}} to {{dtePwhTargetTemperatureNew}}. Moreover the system sets the target temperature from {{zirkePwhcTargetTemperatureOld}} to {{zirkePwhcTargetTemperatureNew}} for the following circulation valves: \"{{circulationValveNames}}\".",
      "ExecuteDeviceFunctionTestFailedMessageTypes": "Function test failed, because {{reason}}.",
      "FatalPersistantSystemFailureMessageTypes": "System is in failure mode, because {{reason}}.",
      "FlushPipeType": {
        "PWC": "PWC",
        "PWH": "PWH"
      },
      "FunctionManagementTableSvc": {
        "AddFlushableDevicePointToGroupFunction": "maximal temperature for potable water cold(pwc): {{variablesGlobal.temperaturePwcMax}}, stagnation time in minutes: {{variablesGlobal.stagnationTimeMaxMinutes}}, flush time in seconds: {{variablesGlobal.flushTimeMaxSec}}",
        "CreateFunction": "requesterUserId: {{requesterUserId}}, Is the function disabled?: {{functionInput.disabledTimestamp}}, true = flush all devices from DevicePointArrangement in paralell, false = flush the devices one after another (sequential order): {{functionInput.flushSchedule.flushParallel}}, Flush if this threshold is reached aka stagnation time max: {{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours}}, The flush is starting at this point in time, e.g. 05.06.19 08:32: {{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc}}, Waiting time between two flushes: {{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours}}, functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated: {{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated}}, functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan: {{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan}}, functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon: {{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon}}, functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue: {{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue}}, functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed: {{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed}}, functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu: {{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu}}, functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri: {{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri}}, functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat: {{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat}}, functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun: {{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun}}, Start of the range, only hours and minutes are used, e.g. 02:03: {{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun.noFlushFrame.fromHourMinute}}, End of the range, only hours and minutes are used, e.g. 06:59: {{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun.noFlushFrame.fromHourMinute.toHourMinute}}, true = use legacy versions of flush and thermal disinfection: {{functionInput.legacy}}, Name of the function. Is unique, could be used as id: {{functionInput.name}}, functionInput.remark: {{functionInput.remark}}, Type of the function e.g. circulation: {{functionInput.type}}, functionInput.circulationInput.temperatureLevelObject.temperatureLevel: {{functionInput.circulationInput.temperatureLevelObject.temperatureLevel}}, only != null if TemperatureLevelCirculation = UfcManualConfig: {{functionInput.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius}}, only != null if TemperatureLevelCirculation = UfcManualConfig: {{functionInput.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius.pwhcTemperatureCelsius}}, functionInput.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius.pwhcTemperatureCelsius.isSelectable: {{functionInput.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius.pwhcTemperatureCelsius.isSelectable}}, uuid of the key switch: {{functionInput.keySwitchUuid}}, Uuid for the DTE (water heating element): {{functionInput.dteUuid}}, Uuid for UFC fault contact, only allowed for a circulation function: {{functionInput.ufcFaultContactUuid}}, Use UFC, only allowed for a circulation function: {{functionInput.useUFC}}, List of circulation valves: {{functionInput.circulationValveConfigurationMapping}}, Device uuid's for the flush operation. The first element will be flushed first, the second element will be flushed second and so on.: {{functionInput.flushableDevicePointUuids}}, Sensor for pwc: {{functionInput.temperatureSensorPwcDevicePointUuid}}, Clique id of the function: {{cliqueId}}",
        "DeleteDevicePointGroupFunction": ": {{requesterUserId}}, Name of the function: {{devicePointGroupFunctionName}}, Timestamp of the end of the cleaning shutdown: {{cleaningShutdownEnd}}",
        "RemoveFlushableDevicePointToGroupFunction": ": {{requesterUserId}}, Name of the flush schedule: {{devicePointGroupFunctionName}}, Exectuion time of the flush: {{executionTime}}, Type of the flush pipe: {{flushPipeType}}",
        "ResetDisabledTimestamp": ": {{requesterUserId}}, Is the function disabled?: {{functionInput.disabledTimestamp}}, true = flush all devices from DevicePointArrangement in paralell. false = flush the devices one after another (sequential order): {{functionInput.flushSchedule.flushParallel}}, Flush if this threshold is reached aka stagnation time max: {{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours}}, Start of the range, only hours and minutes are used, e.g. 02:03: {{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute}}, End of the range, only hours and minutes are used, e.g. 06:59: {{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute}}, The flush is starting at this point in time, e.g. 05.06.19 08:32: {{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc}}, Waiting time between two flushes: {{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours}}, functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated: {{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated}}, functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan: {{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan}}, functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon: \"{{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon}}\", functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue: \"{{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue}}\", functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed: \"{{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed}}\", functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu: \"{{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu}}\", functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri: \"{{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri}}\", functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat: \"{{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat}}\", functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun: \"{{functionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun}}\", true = use legacy versions of flush and thermal disinfection: {{functionInput.legacy}}, Name of the function. Is unique, could be used as id: {{functionInput.name}}, functionInput.remark: {{functionInput.remark}}, Type of the function e.g. circulation: {{functionInput.type}}, functionInput.circulationInput.temperatureLevelObject.temperatureLevel: {{functionInput.circulationInput.temperatureLevelObject.temperatureLevel}}, only != null if TemperatureLevelCirculation = UfcManualConfig: {{functionInput.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius}}, only != null if TemperatureLevelCirculation = UfcManualConfig: {{functionInput.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius.pwhcTemperatureCelsius}}, uuid of the key switch: {{functionInput.keySwitchUuid}}, Uuid for the DTE (water heating element): {{functionInput.dteUuid}}, Uuid for UFC fault contact, only allowed for a circulation function: {{functionInput.ufcFaultContactUuid}}, List of circulation valves: {{functionInput.circulationValveConfigurationMapping}}, Device uuid's for the flush operation. The first element will be flushed first, the second element will be flushed second and so on.: \"{{functionInput.flushableDevicePointUuids}}\", Sensor for pwc: {{functionInput.temperatureSensorPwcDevicePointUuid}}, Clique id of the function: {{cliqueId}}",
        "SetCleaningShutdownEndTimestamp": ": {{requesterUserId}}, Name of the function>: {{devicePointGroupFunctionName}}, Is the function disabled?: {{updatedFunctionInput.disabledTimestamp}}, true = flush all devices from DevicePointArrangement in paralell. false = flush the devices one after another (sequential order): {{updatedFunctionInput.flushSchedule.flushParallel}}, Flush if this threshold is reached aka stagnation time max: {{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours}}, Start of the range, only hours and minutes are used, e.g. 02:03: {{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute}}, End of the range, only hours and minutes are used, e.g. 06:59: {{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute}}, The flush is starting at this point in time, e.g. 05.06.19 08:32: {{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc}}, Waiting time between two flushes: {{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours}}, updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated: {{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated}}, updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan: {{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan}}, updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon: \"{{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon}}\", updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue: \"{{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue}}\", updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed: \"{{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed}}\", updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu: \"{{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu}}\", updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri: \"{{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri}}\", updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat: \"{{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat}}\", updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun: \"{{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.noFlushFrame.fromHourMinute.toHourMinute.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun}}\", true = use legacy versions of flush and thermal disinfection: {{updatedFunctionInput.legacy}}, Name of the function. Is unique, could be used as id: {{updatedFunctionInput.name}}, updatedFunctionInput.remark: {{updatedFunctionInput.remark}}, Type of the function e.g. circulation: {{updatedFunctionInput.type}}, updatedFunctionInput.circulationInput.temperatureLevelObject.temperatureLevel: {{updatedFunctionInput.circulationInput.temperatureLevelObject.temperatureLevel}}, only != null if TemperatureLevelCirculation = UfcManualConfig: {{updatedFunctionInput.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius}}, only != null if TemperatureLevelCirculation = UfcManualConfig: {{updatedFunctionInput.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius.pwhcTemperatureCelsius}}, uuid of the key switch: {{updatedFunctionInput.keySwitchUuid}}, Uuid for the DTE (water heating element): {{updatedFunctionInput.dteUuid}}, Uuid for UFC fault contact, only allowed for a circulation function: {{updatedFunctionInput.ufcFaultContactUuid}}, List of circulation valves: {{updatedFunctionInput.circulationValveConfigurationMapping}}, Device uuid's for the flush operation. The first element will be flushed first, the second element will be flushed second and so on.: \"{{updatedFunctionInput.flushableDevicePointUuids}}\", Sensor for pwc: {{updatedFunctionInput.temperatureSensorPwcDevicePointUuid}}",
        "SetDisabledTimestamp": ": {{requesterUserId}}, Name of the function: {{devicePointGroupFunctionName}}",
        "SetExcecutedAtLeastOnce": "requesterUserId: {{requesterUserId}}, true = if this function is at least executed once. Used to calculate the next flush after a power loss: {{functionInternal.executedAtLeastOnce}}, Clique of the function: {{functionInternal.cliqueId}}, Is the function disabled?: {{functionInternal.disabledTimestamp}}, Last execution of the flush for the pwh: {{functionInternal.flushSchedule.lastExecutionPwhTimestamp}}, Last execution of the flush for the pwc: {{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp}}, End timestamp of the cleaning shutdown: {{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp}}, true = flush all devices from DevicePointArrangement in paralell, false = flush the devices one after another (sequential order): {{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel}}, Flush if this threshold is reached aka stagnation time max: {{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours}}, The flush is starting at this point in time, e.g. 05.06.19 08:32: {{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc}}, Waiting time between two flushes: {{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours}}, functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated: {{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated}}, functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan: {{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan}}, functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon: {{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon}}, functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue: {{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue}}, functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed: {{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed}}, functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu: {{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu}}, functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri: {{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri}}, functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat: {{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat}}, functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun: {{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun}}, Start of the range, only hours and minutes are used, e.g. 02:03: {{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun.noFlushFrame.fromHourMinute}}, End of the range, only hours and minutes are used, e.g. 06:59: {{functionInternal.flushSchedule.lastExecutionPwhTimestamp.lastExecutionPwcTimestamp.cleaningShutdownEndTimestamp.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun.noFlushFrame.fromHourMinute.toHourMinute}}, functionInternal.circulationValveUuids: {{functionInternal.circulationValveUuids}}, true = use legacy versions of flush and thermal disinfection: {{functionInternal.legacy}}, Name of the function. Is unique, could be used as id: {{functionInternal.name}}, functionInternal.remark: {{functionInternal.remark}}, Type of the function e.g. circulation: {{functionInternal.type}}, functionInternal.circulationInput.temperatureLevelObject.temperatureLevel: {{functionInternal.circulationInput.temperatureLevelObject.temperatureLevel}}, only != null if TemperatureLevelCirculation = UfcManualConfig: {{functionInternal.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius}}, only != null if TemperatureLevelCirculation = UfcManualConfig: {{functionInternal.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius.pwhcTemperatureCelsius}}, functionInternal.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius.pwhcTemperatureCelsius.isSelectable: {{functionInternal.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius.pwhcTemperatureCelsius.isSelectable}}, uuid of the key switch: {{functionInternal.keySwitchUuid}}, Uuid for the DTE (water heating element): {{functionInternal.dteUuid}}, Uuid for UFC fault contact, only allowed for a circulation function: {{functionInternal.ufcFaultContactUuid}}, Use UFC, only allowed for a circulation function: {{functionInternal.useUFC}}, List of circulation valves: {{functionInternal.circulationValveConfigurationMapping}}, Device uuid's for the flush operation. The first element will be flushed first, the second element will be flushed second and so on.: {{functionInternal.flushableDevicePointUuids}}, Sensor for pwc: {{functionInternal.temperatureSensorPwcDevicePointUuid}}",
        "SetLastExecutionTimestamp": ": {{requesterUserId}}, : {{functionName}}, : {{devicePointUuid}}, true => add at the beginning of the device list, false => add at the end of the device list: {{hasHighPriority}}",
        "UpdateDevicePointGroupFunction": "requesterUserId: {{requesterUserId}}, Name of the function>: {{devicePointGroupFunctionName}}, Is the function disabled?: {{updatedFunctionInput.disabledTimestamp}}, true = flush all devices from DevicePointArrangement in paralell, false = flush the devices one after another (sequential order): {{updatedFunctionInput.flushSchedule.flushParallel}}, Flush if this threshold is reached aka stagnation time max: {{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours}}, The flush is starting at this point in time, e.g. 05.06.19 08:32: {{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc}}, Waiting time between two flushes: {{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours}}, updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated: {{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated}}, updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan: {{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan}}, updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon: {{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon}}, updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue: {{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue}}, updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed: {{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed}}, updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu: {{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu}}, updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri: {{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri}}, updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat: {{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat}}, updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun: {{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun}}, Start of the range, only hours and minutes are used, e.g. 02:03: {{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun.noFlushFrame.fromHourMinute}}, End of the range, only hours and minutes are used, e.g. 06:59: {{updatedFunctionInput.flushSchedule.flushParallel.dependOnStagnationFlushPlan.intervalHours.fixIntervalFlushPlan.startDateUtc.intervalHours.dependOnTemperatureFlushPlan.activated.flushIfTemperatureHigherThan.weeklyFlushPlan.weekDays.mon.tue.wed.thu.fri.sat.sun.noFlushFrame.fromHourMinute.toHourMinute}}, true = use legacy versions of flush and thermal disinfection: {{updatedFunctionInput.legacy}}, Name of the function. Is unique, could be used as id: {{updatedFunctionInput.name}}, updatedFunctionInput.remark: {{updatedFunctionInput.remark}}, Type of the function e.g. circulation: {{updatedFunctionInput.type}}, updatedFunctionInput.circulationInput.temperatureLevelObject.temperatureLevel: {{updatedFunctionInput.circulationInput.temperatureLevelObject.temperatureLevel}}, only != null if TemperatureLevelCirculation = UfcManualConfig: {{updatedFunctionInput.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius}}, only != null if TemperatureLevelCirculation = UfcManualConfig: {{updatedFunctionInput.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius.pwhcTemperatureCelsius}}, updatedFunctionInput.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius.pwhcTemperatureCelsius.isSelectable: {{updatedFunctionInput.circulationInput.temperatureLevelObject.temperatureLevel.pwhTemperatureCelsius.pwhcTemperatureCelsius.isSelectable}}, uuid of the key switch: {{updatedFunctionInput.keySwitchUuid}}, Uuid for the DTE (water heating element): {{updatedFunctionInput.dteUuid}}, Uuid for UFC fault contact, only allowed for a circulation function: {{updatedFunctionInput.ufcFaultContactUuid}}, Use UFC, only allowed for a circulation function: {{updatedFunctionInput.useUFC}}, List of circulation valves: {{updatedFunctionInput.circulationValveConfigurationMapping}}, Device uuid's for the flush operation. The first element will be flushed first, the second element will be flushed second and so on.: {{updatedFunctionInput.flushableDevicePointUuids}}, Sensor for pwc: {{updatedFunctionInput.temperatureSensorPwcDevicePointUuid}}"
      },
      "FusiDteStateMachnineFatalError": "DTE controller is in fatal failure mode, because {{reason}}.",
      "FusiRestartMessageTypes": "System is going to reboot, because the Fusi restart service is executed.",
      "HygieneCleansingFailedDeviceReason": {
        "DeviceStateAfterStartIsNotOk": "device state after start is not okay",
        "FailedStart": "failed start",
        "FailedTemperature": "failed temperature",
        "InitialDeviceStateIsNotOk": "initial device state not okay",
        "Timeout": "timeout",
        "UnkownError": "unknown error"
      },
      "MessagesTableSvc": {
        "CreateEventType": "user identifier of the requester: {{requesterUserId}}, the index of the message entry: {{messageId}}, name of existing event type (ALARM, EVENT, DISRUPTION, MAINTENANCE, ...): {{eventType}}, an error code: {{errorCode}}, summary of the message: {{summary}}, description of the message: {{description}}",
        "DeleteLastMessages": "user identifier of the requester: {{requesterUserId}}, the index of the message entry: {{messageId}}, name of existing event type (ALARM, EVENT, DISRUPTION, MAINTENANCE, ...): {{eventType}}, an error code: {{errorCode}}, summary of the message: {{summary}}, description of the message: {{description}}",
        "DeleteMessages": ": {{requesterUserId}}, message id's: \"{{messageIds}}\" ",
        "DeleteMessagesAnyDeletedMarkOlderThanBoundedAllCliquesInternal": ": {{requesterUserId}}, message id's: \"{{messageIds}}\" ",
        "DeleteMessagesOlderThan": ": {{requesterUserId}}, message id's: \"{{messageIds}}\" ",
        "DeleteMessagesOlderThanBoundedAllCliquesInternal": "key: {{key}}, value: {{value}}",
        "ResetMessageAcknowledged": "user identifier of the requester: {{requesterUserId}}, a comma-separated list of indices of the entries of the messages (Integer-List, e.g.: 1,2,3): \"{{messageIds}}\" ",
        "ResetMessageAnyDeletedMark": "user identifier of the requester: {{requesterUserId}}, a comma-separated list of indices of the entries of the messages (Integer-List, e.g.: 1,2,3): \"{{messageIds}}\" ",
        "ResetMessageFixed": "user identifier of the requester: {{requesterUserId}}, a comma-separated list of indices of the entries of the messages (Integer-List, e.g.: 1,2,3): \"{{messageIds}}\" ",
        "ResetMessageOwnDeletedMark": "user identifier of the requester: {{requesterUserId}}, a comma-separated list of indices of the entries of the messages (Integer-List, e.g.: 1,2,3): \"{{messageIds}}\" ",
        "ResetMessageViewed": "user identifier of the requester: {{requesterUserId}}, a comma-separated list of indices of the entries of the messages (Integer-List, e.g.: 1,2,3): \"{{messageIds}}\" ",
        "SetMessageAcknowledged": "user identifier of the requester: {{requesterUserId}}, a comma-separated list of indices of the entries of the messages (Integer-List, e.g.: 1,2,3): \"{{messageIds}}\" ",
        "SetMessageAnyDeletedMark": "user identifier of the requester: {{requesterUserId}}, a comma-separated list of indices of the entries of the messages (Integer-List, e.g.: 1,2,3): \"{{messageIds}}\" ",
        "SetMessageFixed": "user identifier of the requester: {{requesterUserId}}, the index of the message entry: {{messageIndex}}, name of existing event type (ALARM, EVENT, DISRUPTION, MAINTENANCE, ...): {{eventType}}, an error code: {{errorCode}}, summary of the message: {{summary}}, description of the message: {{description}}",
        "SetMessageOwnDeletedMark": "user identifier of the requester: {{requesterUserId}}, the index of the message entry: {{messageIndex}}, name of existing event type (ALARM, EVENT, DISRUPTION, MAINTENANCE, ...): {{eventType}}, an error code: {{errorCode}}, summary of the message: {{summary}}, description of the message: {{description}}",
        "SetMessageViewed": "user identifier of the requester: {{requesterUserId}}, a comma-separated list of indices of the entries of the messages (Integer-List, e.g.: 1,2,3): \"{{messageIds}}\" ",
        "UpdateMessageAny": "user identifier of the requester: {{requesterUserId}}, All messages older than this time will be deleted (examples: '2019-06-18T06:14:48', '2019-06-18 06:15', '2019-06-19'): {{timestampValue}}",
        "UpdateMessageAnyByIndex": "user identifier of the requester: {{requesterUserId}}, All messages older than this time will be deleted (examples: '2019-06-18T06:14:48', '2019-06-18 06:15', '2019-06-19'): {{timestampValue}}, Count of messages to be deleted: {{count}}",
        "UpdateMessageOwn": "user identifier of the requester: {{requesterUserId}}, All messages older than this time will be deleted (examples: '2019-06-18T06:14:48', '2019-06-18 06:15', '2019-06-19'): {{timestampValue}}, Count of messages to be deleted: {{count}}",
        "UpdateMessageOwnByIndex": "user identifier of the requester: {{requesterUserId}}, Count of messages to be deleted: {{count}}"
      },
      "PointAddressTableSvc": {
        "AssignPointAddressToControllerPoint": "Requester User Id: {{requesterUserId}}, Building of point address: {{param.building}}, Area of point address: {{param.area}}, Room of point address: {{param.room}}, Segment of point address: {{param.segment}}",
        "AssignPointAddressToControllerPointId": "Requester User ID: {{requesterUserId}}, Building of point address: {{param.building}}, Area of point address: {{param.area}}, Room of point address: {{param.room}}, Segment of point address: {{param.segment}}",
        "AssignPointAddressToDevicePoint": "Requester User ID: {{requesterUserId}}, pointAddress.building: {{pointAddress.building}}, pointAddress.area: {{pointAddress.area}}, pointAddress.room: {{pointAddress.room}}, pointAddress.segment: {{pointAddress.segment}}, pointAddress.newBuilding: {{pointAddress.newBuilding}}, pointAddress.newArea: {{pointAddress.newArea}}, pointAddress.newRoom: {{pointAddress.newRoom}}, pointAddress.newSegment: {{pointAddress.newSegment}}",
        "ChangePointAddressArea": "Requester User ID: {{requesterUserId}}, pointAddress.building: {{pointAddress.building}}, pointAddress.area: {{pointAddress.area}}, pointAddress.room: {{pointAddress.room}}, pointAddress.segment: {{pointAddress.segment}}, pointAddress.newBuilding: {{pointAddress.newBuilding}}, pointAddress.newArea: {{pointAddress.newArea}}, pointAddress.newRoom: {{pointAddress.newRoom}}, pointAddress.newSegment: {{pointAddress.newSegment}}",
        "ChangePointAddressBuilding": "Requester User ID: {{requesterUserId}}, pointAddress.building: {{pointAddress.building}}, pointAddress.area: {{pointAddress.area}}, pointAddress.room: {{pointAddress.room}}, pointAddress.segment: {{pointAddress.segment}}, pointAddress.newBuilding: {{pointAddress.newBuilding}}, pointAddress.newArea: {{pointAddress.newArea}}, pointAddress.newRoom: {{pointAddress.newRoom}}, pointAddress.newSegment: {{pointAddress.newSegment}}",
        "ChangePointAddressRoom": "Requester User ID: {{requesterUserId}}, pointAddress.building: {{pointAddress.building}}, pointAddress.area: {{pointAddress.area}}, pointAddress.room: {{pointAddress.room}}, pointAddress.segment: {{pointAddress.segment}}, pointAddress.newBuilding: {{pointAddress.newBuilding}}, pointAddress.newArea: {{pointAddress.newArea}}, pointAddress.newRoom: {{pointAddress.newRoom}}, pointAddress.newSegment: {{pointAddress.newSegment}}",
        "CreatePointAddressWithCliqueId": "User identifier: {{requesterUserId}}, id of the clique: {{cliqueId}}, building of a point address: {{building}}, area of a point address: {{area}}, room of point address: {{room}}, segment of a point address: {{segment}}",
        "DeletePointAddress": "Requester User ID: {{requesterUserId}}, input.building: {{input.building}}, input.area: {{input.area}}, input.room: {{input.room}}, input.segment: {{input.segment}}, input.controllerID: {{input.controllerID}}",
        "SetPointAddress": "Requester User ID: {{requesterUserId}}, pointAddressParam.targetUUID: {{pointAddressParam.targetUUID}}, pointAddressParam.newCliqueID: {{pointAddressParam.newCliqueID}}",
        "SetPointAddressArea": "Requester User ID: {{requesterUserId}}, input.devicePointUUID: {{input.devicePointUUID}}, input.building: {{input.building}}, input.area: {{input.area}}, input.room: {{input.room}}, input.segment: {{input.segment}}",
        "SetPointAddressBuilding": "Requester User ID: {{requesterUserId}}, pointAddressParam.building: {{pointAddressParam.building}}, pointAddressParam.area: {{pointAddressParam.area}}, pointAddressParam.room: {{pointAddressParam.room}}, pointAddressParam.segment: {{pointAddressParam.segment}}, pointAddressParam.newCliqueID: {{pointAddressParam.newCliqueID}}",
        "SetPointAddressCliqueId": "RequesterUserID: {{requesterUserId}}, Target UUID: {{targetUUID}}",
        "SetPointAddressCliqueIdByName": "RequesterUserID: {{requesterUserId}}, Controller ID: {{controllerID}}",
        "SetPointAddressRoom": "Requester User ID: {{requesterUserId}}, Target UUID: {{targetUUID}}",
        "UnassignPointAddressFromControllerPoint": "Requester User ID: {{requesterUserId}}, input.building: {{input.building}}, input.newArea: {{input.newArea}}, input.newRoom: {{input.newRoom}}, input.newSegment: {{input.newSegment}}",
        "UnassignPointAddressFromControllerPointId": "Requester User ID: {{requesterUserId}}, input.building: {{input.building}}, input.area: {{input.area}}, input.newRoom: {{input.newRoom}}, input.newSegment: {{input.newSegment}}",
        "UnassignPointAddressFromDevicePoint": "Requester User ID: {{requesterUserId}}, input.building: {{input.building}}, input.area: {{input.area}}, input.room: {{input.room}}, input.newSegment: {{input.newSegment}}"
      },
      "PreferenceTableSvc": {
        "SetPreference": "requestUserId: {{requestUserId}}, uuid: {{uuid}}, applicationKey: {{applicationKey}}, content: {{content}}",
        "SetPreferenceAsJson": "requestUserId: {{requestUserId}}, uuid: {{uuid}}, applicationKey: {{applicationKey}}, content: {{content}}",
        "SetSystemPreference": "applicationKey: {{applicationKey}}, content: {{content}}",
        "SetSystemPreferenceAsJson": "applicationKey: {{applicationKey}}, content: {{content}}"
      },
      "ProductionFunctionTestPassedMessageTypes": "Factory function test successful.",
      "ReportFilterTableSvc": {
        "AddConfiguration": "uuid: {{uuid}}",
        "DeleteConfiguration": "configuration: {{configuration}}"
      },
      "ReportTableSvc": {
        "AddService": "user identifier: {{requesterUserId}}, clique of the service creator: {{serviceParameters.cliqueId}}, id of the service (rowId): {{serviceParameters.serviceId}}, user uuid of the service creator: {{serviceParameters.createdByUuid}}, name of the service: {{serviceParameters.serviceName}}, name of the files created by the service: {{serviceParameters.fileNameWithoutExtension}}, what should the service do, if it gets triggered? possible options: write usbfile, upload file to sftp-server, send email: {{serviceParameters.action}}, if Action = email, send the service output to this email address: {{serviceParameters.emailAddress}}, hostname of the sftp-server, e.g. 127.0.0.1: {{serviceParameters.sftpOptionsInput.host}}, port of the sftp-server, e.g. 22: {{serviceParameters.sftpOptionsInput.host.port}}, user name for the sftp-server login: {{serviceParameters.sftpOptionsInput.host.port.username}}, password for the sftp-server login: {{serviceParameters.sftpOptionsInput.host.port.username.password}}, path on the sftp-server (store new files on this location): {{serviceParameters.sftpOptionsInput.host.port.username.password.destinationPath}}, how gets the service triggered? possible options: event (e.g. new ALARM), manual, cronjob, each x records (data log entries): {{serviceParameters.trigger}}, if Trigger = event, defines the trigger events, e.g. TriggerMessageTypes = \"ALARM | DISRUPTION\": \"{{serviceParameters.triggerMessageTypes}}\", if Trigger = data, we send a report after each TriggerDataIntervalCount new entries in data_dataLog: {{serviceParameters.triggerDataIntervalCount}}, if Trigger = cronjob, defines the cronjob execution time: {{serviceParameters.cronJobTimeStr}}, uuid of the device point which created this data point: {{serviceParameters.dataQueryParameters.devicePointName}}, uuid of the device point which created this data point: {{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid}}, name of the device, e.g. \"Wall-E 2\": {{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid}}, type of the device, e.g. \"Wall-E\": {{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName}}, number of the channel, e.g. 6 (6 = Temperature_Get, see enum ChannelValueCodes or emico c api): {{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId}}, channel description, e.g. Get Temperature: {{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription}}, channel unit, e.g. DegC: {{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit}}, serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin: {{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin}}, Consider only datalog elements with date less or equal DateUTCMax: {{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax}}, serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase: {{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase}}, Alternative option to set DateUTCMin and DateUTCMax Only in combination with DateUTC: {{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase.dateOffsetSec}}, Value should be greater equal ValueMin if we want to allow negatives values, we have to change the generator constaint \"if (valueMin lower 0.0) then\": {{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase.dateOffsetSec.valueMin}}, Value should be lower equal ValueMax: {{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase.dateOffsetSec.valueMin.valueMax}}, Desired Datatype: {{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase.dateOffsetSec.valueMin.valueMax.dataType}}, should include virtual initial value if no DataPoint matches filter criteria the last DataPoint befor selected timeframe is given: {{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase.dateOffsetSec.valueMin.valueMax.dataType.virtualInitValue}}, Limits the number of returned data log entries (obtained by the query): {{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase.dateOffsetSec.valueMin.valueMax.dataType.virtualInitValue.limit}}, Offset for the query result (useful for pagination): {{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase.dateOffsetSec.valueMin.valueMax.dataType.virtualInitValue.limit.offset}}, Predicate for the seek pagination (row id): {{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase.dateOffsetSec.valueMin.valueMax.dataType.virtualInitValue.limit.offset.skipToken}}, Order the returned data log entries (by now there is only the \"Date\" column supported): {{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase.dateOffsetSec.valueMin.valueMax.dataType.virtualInitValue.limit.offset.skipToken.orderBy}}, Order of the returned data log entries (dependent to OrderBy) \"asc\" or \"desc\" allowed, default OrderBy column is \"date\": {{serviceParameters.dataQueryParameters.devicePointName.devicePointUuid.deviceUuid.deviceTypeName.dataPointId.dataPointDescription.dataPointUnit.dateUtcMin.dateUtcMax.dateUtcOffsetBase.dateOffsetSec.valueMin.valueMax.dataType.virtualInitValue.limit.offset.skipToken.orderBy.order}}",
        "DeleteDatalogsOlderThanBoundedAllCliquesInternal": "user identifier: {{requesterUserId}}, id of the service: {{serviceId}}",
        "DeleteService": "user identifier of the requester: {{requesterUserId}}, Delete only messages with CreatedTimestamp lower equal deleteOlderThan: {{deleteOlderThan}}, Limit the number of deleted messages: {{maxNumberOfDeletedMessages}}, true = delete only messages with DeletedBy != NULL: {{needsDeletedMark}}"
      },
      "SetDeviceMaintenanceMessageType": "Maintenance performed by {{requesterUserId}}",
      "SystemRestartMessageTypes": "System was restarted.",
      "ThermalDisinfectionFailedDeviceMessageTypes": "Thermal disinfection failed for function \"{{functionName}}\" with device \"{{devicePointName}}\", because {{thermalDisinfectionFailedDeviceReason}}. Additional information: {{thermalDisinfectionFailedDeviceReasonParameter}}.",
      "ThermalDisinfectionFailedDeviceReason": {
        "AbortedByUser": "aborted by the user",
        "DeviceFailed": "device failed",
        "DeviceStateIsNotOk": "device state is not okay",
        "Exception": "exception",
        "UnkownDeviceStatus": "unknown device state"
      },
      "ThermalDisinfectionFailedMessageTypes": "Thermal disinfection successful for function \"{{functionName}}\" with devices \"{{devicePointArrangementNames}}\" and valves \"{{circulationValvesNames}}\" and DTE \"{{dteName}}\", because {{thermalDisinfectionFailedReason}}. Additional information: \"{{thermalDisinfectionFailedReasonParameters}}\".",
      "ThermalDisinfectionFailedReason": {
        "Exception": "exception",
        "SomeDevicesFailed": "some devices failed"
      },
      "ThermalDisinfectionResetDeviceFailedMessageTypes": "Thermal disinfection function \"{{functionName}}\". Reset device {{devicePointName}} failed, because {{thermalDisinfectionResetDeviceFailedReason}}. Additional information: {{thermalDisinfectionResetDeviceFailedReasonParameter}}.",
      "ThermalDisinfectionResetDeviceFailedReason": {
        "Exception": "exception"
      },
      "ThermalDisinfectionStartedMessageTypes": "Thermal disinfection started for function \"{{functionName}}\" with devices \"{{devicePointArrangementNames}}\" and valves \"{{circulationValvesNames}}\" and DTE \"{{dteName}}\".",
      "ThermalDisinfectionSuccessfulMessageTypes": "Thermal disinfection successful for function \"{{functionName}}\" with devices \"{{devicePointArrangementNames}}\" and valves \"{{circulationValvesNames}}\" and DTE \"{{dteName}}\".",
      "UpdateDeviceFailedMessageTypes": "Device update failed for {{deviceName}} of type {{deviceType}} with serial number {{serialNumber}}. This update failed, because {{deviceUpdateFailedStatus}}.",
      "UpdateDeviceStartMessageTypes": "Device update started for {{deviceName}} of type {{deviceType}} with serial number {{serialNumber}}. This update has the software version {{deviceUpdateInfo.softwareVersion}} and patch version {{deviceUpdateInfo.patchVersion}}. The current revision number {{revisionNumberOld}} will be upgraded to {{deviceUpdateInfo.canOpenInfo.revisionNumber}}.",
      "UpdateDeviceSuccessfulMessageTypes": "Device update was successful for {{deviceName}} of type {{deviceType}} with serial number {{serialNumber}}. Upgraded the revision number from {{revisionNumberOld}} to {{revisionNumberNew}}.",
      "UserTableSvc": {
        "ChangePassword": "request user id: {{param.requesterUserId}}, param.loginName: {{param.loginName}}, param.password: {{param.password}}, param.authorityTemplateName: {{param.authorityTemplateName}}, param.firstName: {{param.firstName}}, param.lastName: {{param.lastName}}, param.email: {{param.email}}, param.majorId: {{param.majorId}}",
        "ChangeUserLockStatus": "User id \"{{requesterUserId}}\" changed lock status of \"{{userLoginName}}\" to \"{{lockFlag}}\".",
        "CreateClique": "param.reqeustUserId: {{param.reqeustUserId}}, param.userLoginName: {{param.userLoginName}}, param.newUserPassword: {{param.newUserPassword}}, param.useBeforeTimestamp: {{param.useBeforeTimestamp}}",
        "CreateUser": "param.requesterUserId: {{param.requesterUserId}}, param.userLoginName: {{param.userLoginName}}, param.newUserLoginName: {{param.newUserLoginName}}, param.firstName: {{param.firstName}}, param.lastName: {{param.lastName}}, param.email: {{param.email}}",
        "CreateUserWithCliqueId": "request user id: {{param.requesterUserId}}, param.loginName: {{param.loginName}}, param.password: {{param.password}}, param.authorityTemplateName: {{param.authorityTemplateName}}, param.firstName: {{param.firstName}}, param.lastName: {{param.lastName}}, param.email: {{param.email}}, param.cliqueId: {{param.cliqueId}}, param.majorId: {{param.majorId}}",
        "DeleteClique": "requesterUserId: {{requesterUserId}}, newLoginName: {{newLoginName}}, firstName: {{firstName}}, lastName: {{lastName}}, email: {{email}}",
        "DeleteUser": "user login name: {{loginName}}, user password: {{password}}",
        "Login": "User \"{{loginName}}\" logged in.",
        "RemoveUserAuthorityTemplate": "requesterUserId: {{requesterUserId}}, userLoginName: {{userLoginName}}, authorityTemplateName: {{authorityTemplateName}}",
        "ResetPassword": "requesterUserId: {{requesterUserId}}, userLoginName: {{userLoginName}}",
        "ResetUserDisabledTimestamp": "requesterUserId: {{requesterUserId}}, userLoginName: {{userLoginName}}",
        "SetUserAuthorityTemplate": "requesterUserId: {{requesterUserId}}, cliqueName: {{cliqueName}}, cliqueDescription: {{cliqueDescription}}",
        "SetUserDisabledTimestamp": "requesterUserId: {{requesterUserId}}, cliqueName: {{cliqueName}}",
        "UpdateClique": "requesterUserId: {{requesterUserId}}, cliqueNameOld: {{cliqueNameOld}}, cliqueNameNew: {{cliqueNameNew}}, description: {{description}}",
        "UpdateUserAnyClique": "requesterUserId: {{requesterUserId}}, loginName: {{loginName}}, cliqueNameNew: {{cliqueNameNew}}",
        "UpdateUserAnyMetadata": "Requester User ID: {{requesterUserId}}, input.disabledTimestamp: {{input.disabledTimestamp}}, input.targetLoginName: {{input.targetLoginName}}",
        "UpdateUserOwnMetadata": "Requester User ID: {{requesterUserId}}, Target Login Name: {{targetLoginName}}"
      }
    },
    "SFTP_SECURITY_ERROR": {
      "ConnectionError": "Connection error.",
      "EncryptionAlgorithmUnsafe": "Insecure encryption method selected.",
      "FingerprintDoesNotMatch": "Fingerprint does not match.",
      "HmacAlgorithmUnsafe": "Unsichere Methode \"HMAC\" gewählt.",
      "HostKeyAlgorithmUnsafe": "Insecure key method on host.",
      "KeyExchangeAlgorithmUnsafe": "Insecure key exchange method selected.",
      "MissingFingerprint": "Fingerprint missing.",
      "MissingPrivateKey": "Private key missing."
    },
    "SMTP_SECURITY_ERROR": {
      "ConnectionError": "Connection error",
      "SmtpUnsafe": "Unencrypted SMTP access"
    }
  },
  "APP": {
    "DASHBOARD": "Dashboard",
    "DEVICES": "Devices",
    "FUNCTIONS": "Functions",
    "GLOBAL_ERROR_MESSAGE_PLURAL": "There are {{controllerCount}} controllers in persistent system failure mode.",
    "GLOBAL_ERROR_MESSAGE_SINGULAR": "There is a controller in persistent system failure mode.",
    "GLOBAL_RESET_INSTRUCTIONS": "So all attached devices have been disconnected. To reset this, please disconnect the power supply of the controller.",
    "LOGOUT": "Logout",
    "LOGOUT_FAILED": "Logout failed",
    "MY_PROFILE": "My Profile",
    "NOTIFICATIONS": "Messages",
    "PROJECT": "Project",
    "PROTOCOLS": "Protocols",
    "SERVICE": "Service",
    "STATUS_ERROR": "Error",
    "STATUS_OK": "OK",
    "STATUS_WARNING": "Warning",
    "SYSTEM": "System",
    "UNKNOWN_SESSION_STATE": "Session aborted",
    "USERS": "Users"
  },
  "DASHBOARD": {
    "COULD_NOT_DELETE_DASHBOARD": "Could not delete dashboard",
    "COULD_NOT_GET_DASHBOARDS": "Could not retrieve dashboards",
    "COULD_NOT_GET_DEVICES": "Could not retrieve device list",
    "COULD_NOT_INITIALIZE_DASHBOARDS": "Initialization failed",
    "COULD_NOT_REMOVE_BACKGROUND": "Could not delete background",
    "COULD_NOT_SAVE_BACKGROUND": "Could not save background",
    "COULD_NOT_SAVE_DASHBOARD": "Could not save dashboard",
    "COULD_NOT_SAVE_DASHBOARDS": "Saving failed",
    "CREATE_DASHBOARD": "Create Dashboard",
    "DESIGNATION": "Designation (e.g. floor):",
    "DUPLICATE_NAME": "Name already exists",
    "FORBIDDEN_CHAR_ERROR": "Contains forbidden special characters",
    "MAX_LENGTH_ERROR": "Too many characters",
    "MIN_LENGTH_ERROR": "At least four characters",
    "REMOVE_PICTURE": "Remove picture",
    "TEMPERATURE": "Temperature:"
  },
  "DATEPICKER": {
    "DATE_PLACE_HOLDER": "please choose",
    "TODAY": "Today"
  },
  "DATERANGEPICKER": {
    "APPLY_TEXT": "OK",
    "CANCEL_TEXT": "Cancel",
    "CUSTOM_RANGE": "custom section",
    "DAYS": "days",
    "END_LABEL": "end date",
    "PLACE_HOLDER": "please choose",
    "SELECTED_TEXT": "Selected days",
    "START_LABEL": "start date"
  },
  "DATETIMERANGEPICKER": {
    "FROM": "From",
    "TO": "To"
  },
  "DEVICES": {
    "ACTION_ASSIGN_TO_FUNCTION": "Assign to a function",
    "ACTION_DISCONNECT_DEVICEPOINT": "Disconnect from device point",
    "ACTION_EDIT": "Edit",
    "ACTION_INFO_HEADER": "Possible Actions",
    "ACTION_LINK_DEVICEPOINT": "Link device point",
    "ACTION_SETUP_FUNCTIONS": "Assigned functions",
    "ASSIGN_DEVICE_TO_FUNCTION": "Assign device to a function",
    "ASSIGN_EXISTING_FUNCTION": "Assign existing function:",
    "BASIC_INFO_HEADER": "Basic Information",
    "CHOOSE_FUNCTION": "Please choose a function",
    "CIRCULATION_FUNCTION_SELECTION_LABEL": "Circulation function",
    "COMMENT": "Comment",
    "COMMENT_PLACEHOLDER": "e.g. installation",
    "CONFIGURE_DEVICE": "Configure",
    "CONFIG_TAB": "Configuration",
    "CONTROLLER_DETAILS": "Controller Details",
    "CONTROLLER_FAILED_RESTART": "The controller could not be restarted.",
    "CONTROLLER_POINT_SELECTION_TITLE": "Choose a controller point",
    "CONTROLLER_RESET_ALERT": "Are you sure you want to restart {{name}}?",
    "CONTROLLER_RESTARTED": "Controller restarted.",
    "CONTROLLER_TYPE": "Controller Type",
    "COULD_NOT_ADD_TO_FUNCTION": "Assginment to function failed",
    "COULD_NOT_ASSIGN_TO_CONTROLLER_POINT": "Could not assign controller to controller point",
    "COULD_NOT_ASSIGN_TO_DEVICE_POINT": "Could not assign device to the device point",
    "COULD_NOT_DISABLE_DEVICE": "Could not disable device",
    "COULD_NOT_ENABLE_DEVICE": "Could not enable device",
    "COULD_NOT_GET_AVAILABLE_SENSORS": "Could not retrieve sensors",
    "COULD_NOT_GET_DISCOVERY_STATUS": "Could not get localization status",
    "COULD_NOT_GET_FUNCTIONS": "Could not retrieve functions",
    "COULD_NOT_GET_PARAMETER_VALUES": "Could not retrieve device values",
    "COULD_NOT_GET_UPDATE_STATUS": "Could not retrieve update status",
    "COULD_NOT_LOAD_DEVICE_DATA": "Could not load device data",
    "COULD_NOT_RECORD_MAINTENANCE": "Could not record maintenance",
    "COULD_NOT_RETRIEVE_UFC_STATUS": "Status of UFC device couldn't be retrieved",
    "COULD_NOT_SET_INTERVAL": "Could not set interval",
    "COULD_NOT_START_DEVICE_SEARCH": "Could not start devicelocalization",
    "COULD_NOT_UNLINK_CONTROLLER": "Could not unallocate",
    "COULD_NOT_UNLINK_DEVICE": "Could not unallocate",
    "COULD_NOT_UPDATE_DEVICE_CIRCULATION_FUNCTION": "Could not save the circulation function",
    "COULD_NOT_UPDATE_DEVICE_CONFIG": "Could not save the device configuration",
    "CREATE_NEW_FUNCTION": "Create new function",
    "CREATE_SENSOR": "Create sensor",
    "CREATE_SENSOR_HINT": "Please create a sensor that can subsequently be linked to a sensor device point.",
    "DELETED_CONTROLLER": "Deleted controller",
    "DEVICE_DETAILS": "Device Details",
    "DEVICE_FAILED_RESTART": "Unfortunately, the device could not be reset.",
    "DEVICE_FIRMWARE_UPDATE": "Device Firmware Update",
    "DEVICE_FUNCTIONS_OVERVIEW": "Overview of the functions of the device",
    "DEVICE_INSTALLATION_SUMMARY": "{{deviceTypeName}} \"{{deviceName}}\" was installed at:",
    "DEVICE_NOT_TESTABLE": "There is no test function for the device.",
    "DEVICE_POINT_NAME": "Name",
    "DEVICE_RESET_ALERT": "Are you sure you want to reset {{name}}?",
    "DEVICE_RESTARTED": "Device has been reset.",
    "DEVICE_TYPE": "Device Type",
    "DEVICE_UNAVAILABLE": "No connection to the device.",
    "DTE_VARIANT": "DTE Variant",
    "ENTER_NEW_IP_ALERT": "Please enter a new IP address.",
    "ERROR_OCCURED": "An error occurred.",
    "ERROR_STATUS": "ERROR",
    "FACTORY_RESET": "Reset to factory settings",
    "FIND_CONTROLLER": "Find Controller",
    "FIRMWARE_UPDATE": {
      "CANNOT_EXTRACT_FILE": "{{firmwareFileName}} couldn't be extracted.",
      "DEVICE_NOT_FOUND": "The selected device could not be found",
      "FAILED": "The firmware file could not be transferred.",
      "FILE_IS_MISSING": "No signature known for {{ firmwareFileName }}. Update was cancelled due to security reasons.",
      "INVALID_FILE": "{{firmwareFileName}} doesn't match the expectations for allowed file names.",
      "ONLY_TAR_FILES_ALLOWED": "{{firmwareFileName}} doesn't have the extension '.tar'",
      "REMOTE_DEVICE_ALERT": "Update firmware on remote controller?",
      "REMOTE_DEVICE_ALERT_MSG": "Redirect to login for remote controller {{ address }}? (Opens a new window)",
      "SUCCESS": "The device firmware has been updated."
    },
    "FUNCTION_TEST": {
      "ALERT": "Are you sure you want to test this feature?",
      "COULD_NOT_CANCEL": "Device function test could not be canceled",
      "COULD_NOT_CONTINUE_STEP": "Could not continue device function test step {{name}}",
      "COULD_NOT_RESTART": "Could not restart device function test",
      "COULD_NOT_RESTART_STEP": "Could not rerun test step {{name}}",
      "COULD_NOT_RESTART_WITH_NAME": "Could not restart device function test (Originally started by {{startedBy}})",
      "COULD_NOT_SKIP_STEP": "Could not skip step {{name}}",
      "COULD_NOT_START": "Could not start device function test",
      "DEVICE_TYPE_NOT_SUPPORTED": "Device type {{type}} not supported",
      "ERROR": "Device function test was not successful.",
      "FAILED": "Device function test was not successful.",
      "FAIL_DIALOG": "The function test was not successful.",
      "INTERVAL": "Function test time interval",
      "NO_FUNCTIONS_ASSIGNED": "No functions assigned to device {{name}}.",
      "PASSED": "Test was successful.",
      "REPORT": {
        "DTE": {
          "ABORTED_TEST": "No result available for this step since the function test has been aborted.",
          "DEVICE_NAME": "DTE Name",
          "END_TIME": "End Time",
          "IS_SKIPPED": "Skipped?",
          "NO_TEST_AVAILABLE": "Currently, there is no DTE function test report available. Please navigate to the device section to start a new DTE function test.",
          "OVERVIEW": "Overview",
          "REPORT_TITLE": "Report: DTE Function Test",
          "RESULTS": "Test Cases",
          "RESULT_MESSAGES": "Results",
          "START_TIME": "Start Time",
          "TEST_ID": "Test ID",
          "USER_NAME": "User"
        }
      },
      "RESTART_ALERT": "Do you want to restart the test of this function?",
      "RESTART_ALERT_WITH_NAME": "Do you want to restart the test of this function? (Originally started by {{startedBy}})",
      "START": "Start functional test",
      "STEP_RESTART_ALERT": "Do you want to restart function test step {{name}}?",
      "SUCESS_DIALOG": "The function test was successful."
    },
    "FUNC_TEST": "Functional Test",
    "HOURS": "Hours",
    "INSTALLATION_SUCCESS_TITLE": "Device installed",
    "INTERFACE": "Interface",
    "IP_ADDRESS": "IP",
    "IP_CHANGE_FAILED": "The IP could not be changed.",
    "IP_CHANGE_SUCCESSFUL": "The IP was changed successfully: {{newIpInput}}.",
    "IS_NEW_MAINTENANCE_CARRIED_OUT": "Has a new maintenance just been carried out?",
    "LAST_MAINTENANCE": "Last maintenance:",
    "LOADING_DATA": "Loading data…",
    "LOCALIZATION_STARTED": "Localization has started.",
    "LOCALIZATION_START_FAILED": "The localization could not be started.",
    "LOCATE_DEVICE": "Locate",
    "LOCATION": "Location",
    "LOCATION_CONFIRMATION_QUESTION": "I am sure that the {{deviceTypeName}} \"{{deviceName}}\" is actually installed at the selected device point. I understand that linking a device of this type to an unintended device point constitutes a severe safety risk and can harm people.",
    "MAC_ADDRESS": "MAC",
    "MAINTENANCE_HISTORY": "Maintenance history",
    "MAINTENANCE_INTERVAL": "Maintenance interval",
    "MAINTENANCE_TAB": "Maintenance",
    "MORE_THAN_ONE_SESSION_OPENED_FOR_DTE": "This device is being at the moment controlled by another session or another user, the configuration field for this active sessions will be deactivated until the other session is closed",
    "NAME_ALREADY_ASSIGNED": "Name already assigned",
    "NAME_OF_SENSOR": "Name of the sensor",
    "NEXT_MAINTENANCE": "Next maintenance:",
    "NO_FREE_PORTS": "This device no longer has any free ports for sensors.",
    "NO_FUNCTIONS_ASSIGNED": "No functions assigned",
    "NO_UNLINKED_CONTROLLER_POINT": "There is no unused controller point left.",
    "NO_UNLINKED_DEVICE_POINT": "There is no unused device point of this type left.",
    "OFFLINE_STATUS": "OFFLINE",
    "OK_STATUS": "OK",
    "PERFORM_MAINTENANCE": "Performed maintenance",
    "PORT_TAKEN": "Sensor port taken.",
    "RELOADING_CONFIGURATION": "Applying changes…",
    "RESET_PARAM_ALERT": "Are you sure you want to reset the parameters to the default settings?",
    "RESTART_CONTROLLER": "Restart",
    "RESULT_TITLE": "Test Result",
    "REVERSE_SEARCH_DEVICES": "Identify Devices",
    "SAVE_CHANGES_ALERT": "Are you sure you want to save the changes?",
    "SEARCH_PLACEHOLDER": "Search",
    "SEARCH_SKIP_CONTROLLER": "Skip controllers",
    "SEARCH_START": "Search Devices",
    "SEARCH_STATE_CONTROLLER_DONE": "Controller search complete",
    "SEARCH_STATE_CONTROLLER_ERROR": "Controller search has failed",
    "SEARCH_STATE_CONTROLLER_RUNNING": "Controller search running",
    "SEARCH_STATE_LSS_DONE": "Device search is complete.",
    "SEARCH_STATE_LSS_ERROR": "Error when searching for CAN devices",
    "SEARCH_STATE_LSS_RUNNING": "CAN device search is running",
    "SEARCH_STOP": "Abort search",
    "SELECT_DEVICE_POINT": "Select device point",
    "SELECT_UPDATE_FILE_ALERT": "Please select the update file for the type {{deviceTypeName}}.",
    "SENSORS_LIST_AVAILABLE_MESSAGE": "The following ports are available for attaching sensors.",
    "SENSORS_TAB": "Sensors",
    "SENSOR_NAME": "Sensor Name",
    "SERIAL_NUMBER": "Serial Number",
    "SOFTWARE_VERSION": "Software Version",
    "START_CALIBRATION": "Start calibration",
    "START_REVERSE_SEARCH": "Identify Devices",
    "START_REVERSE_SEARCH_MESSAGE": "Please trigger the identification feature on the devices you want to identify. They will then be listed here.",
    "STATUS_NOT_OK": "Status: Not OK",
    "SUCCESS_MESSAGE": "Success!",
    "TYPE": "Type",
    "UNALLOCATED": "Unallocated",
    "UNASSIGNED_CONTROLLER": "Unallocated controller",
    "UNASSIGNED_DEVICE": "Unallocated device",
    "UNKNOWN_STATUS": "Status unknown",
    "UNLINK_CONTROLLER_ALERT": "Are you sure you want to unlink this controller?",
    "UNLINK_DEVICE_ALERT": "Are you sure you want to unlink this device?",
    "UPDATE_DEVICE_REPEAT": "Repeat device update",
    "UPDATE_FIRMWARE": "Update Firmware",
    "UPDATE_LICENSE_FILE": "Update license file",
    "UPLOAD": "Upload",
    "SEARCH_STATE_DONE": "Device search is complete."
  },
  "DROPDOWN": {
    "ACTION_FAILURE_TEMPLATE": "Request failed",
    "NO_RECORDS_TEMPLATE": "No records found"
  },
  "ERROR_MESSAGES": {
    "FUNCTION_TEST": {
      "COULDNT_DISPLAY_PROTOCOL": "Couldn't display test protocol. Please check error details."
    }
  },
  "FUNCTIONS": {
    "ACTION": "Action",
    "ACTIVATE_TEMPERATURE": "Activate",
    "ACTIVE": "Active",
    "CHECKING_KEY_SWITCH": "Checking key switch…",
    "CHECK_AVAILABILITY_OF_DEVICES": "Checking availability of devices…",
    "CHECK_IF_THERMAL_DISINFECTION_IS_RUNNING": "Checking if thermal disinfection is already running…",
    "CONFIRMATION_QUESTION": "Shall the thermal desinfection be started? This constitutes a risk of scalding at the following device points!",
    "COULD_NOT_ABORT_THERMAL_DISINFECTION": "Could not abort thermal disinfection",
    "COULD_NOT_CLAIM_DTE_TEMPERATURE": "Confirmation could not be transmitted",
    "COULD_NOT_DELETE_FUNCTION": "Could not delete function",
    "COULD_NOT_ENABLE_FUNCTION": "Could not enable function",
    "COULD_NOT_GET_CIRCULATION_TEMPERATURES": "Could not retrieve circulation temperatures",
    "COULD_NOT_GET_STATE_OF_THERMAL_DISINFECTION": "Could not retrieve thermal disinfection phase",
    "COULD_NOT_INITIALIZE_DIALOG": "Could not initialize dialog",
    "COULD_NOT_START_THERMAL_DISINFECTION": "Could not start thermal disinfection",
    "COUL_NOT_GET_COMPATIBLE_DEVICE_POINTS": "Could not retrieve compatible device points",
    "COUL_NOT_GET_FUNCTIONS": "Could not get functions",
    "DELETE_FUNCTION": "Delete Function",
    "DETAILS_HOUR_PLACEHOLDER": "Hours",
    "DETAILS_SECTION_CALENDAR": "Rinse by Calendar",
    "DETAILS_SECTION_CIRCULATION": "Circulation and temperature settings",
    "DETAILS_SECTION_INTERVAL": "Rinse by Interval",
    "DETAILS_SECTION_TEMPERATURE": "Rinse by Temperature",
    "DETAILS_STEP": "Details",
    "DEVICES_STEP": "Devices",
    "EDIT_FUNCTION": "Edit Function",
    "EDIT_FUNCTION_MODAL_TITLE": "Edit Function",
    "ERROR_MESSAGES": {
      "CIRCLUATION_VALVE_CAN_ONLY_BE_ASSIGNED_ONCE": "Circulation valve already assigned to a function",
      "FUNCTION_CREATION_FAILED": "Function creation failed",
      "FUNCTION_UPDATE_FAILED": "Function update failed",
      "NAME_MIN_LENGTH_WARNING": "At least 4 characters",
      "NAME_NOT_UNIQUE": "A function with this name already exists.",
      "UFC_STATUS_INVALID": "Invalid UFC status",
      "DEVICE_POINT_CAN_ONLY_BE_ASSIGNED_ONCE": "Device Point already assigned to a function",
      "TEMPERATURE_LEVEL_VALIDATION_MESSAGE": "Temperature must be between 30° and 70°",
      "TEMPERATURE_LEVEL_DEFAULT_MANDATORY": "Please select at least the first temperature level"
    },
    "EXECUTION_DONE_FEEDBACK": "The function \"{{name}}\" has started.",
    "EXECUTION_FAILED_FEEDBACK": "Error! The function \"{{name}}\" could not be started.",
    "FUNCTION": "Function",
    "FUNCTION_DELETE_WARNING": "Are you sure you want to remove the function?",
    "FUNCTION_DESCRIPTIONS": {
      "CIRCULATION": "Automatically triggers water circulation. Needs at least one of either DTE or circulation device.",
      "HYGIENE_FLUSH_CALENDAR": "Flushes devices based on calendar.",
      "HYGIENE_FLUSH_INTERVAL": "Flushes devices after a time interval.",
      "HYGIENE_FLUSH_USAGE": "Flushes devices that have been unused for a given time.",
      "THERMAL_DISINFECTION": "Thermal disinfection of any selected devices."
    },
    "FUNCTION_NAMES": {
      "CIRCULATION": "Circulation and temperature selection",
      "HYGIENE_FLUSH_CALENDAR": "Hygiene flush (calendar)",
      "HYGIENE_FLUSH_INTERVAL": "Hygiene flush (interval)",
      "HYGIENE_FLUSH_USAGE": "Hygiene flush (usage)",
      "THERMAL_DISINFECTION": "Thermal Disinfection",
      "THERMAL_RINSE": "Thermal Disinfection"
    },
    "FUNCTION_STEP": "Function",
    "GROUP_IS_BLOCKED_FOR_THERMAL_RINSING": "Group is blocked for thermal disinfection…",
    "INTERVAL_START_TIME": "Start Time",
    "KEYSWITCH_IS_ALREADY_ACTIVATED": "The key switch has already been activated. Please reset the key switch and activate it again to start the thermal disinfection.",
    "LABEL_CHECKBOX_PARALLEL_FLUSH": "Rinse in parallel",
    "LABEL_DETAILS_NONE_USE_INTERVAL": "Non-use interval:",
    "LABEL_DETAILS_NO_RINSE_INTERVAL": "Do not rinse from",
    "LABEL_DETAILS_OCLOCK": "O'clock",
    "LABEL_DETAILS_RINSE_TO": "to",
    "LABEL_DEVICES_SELECT_CIRCULATION_DEVICE": "Select circulation devices:",
    "LABEL_DEVICES_SELECT_DTE_DEVICE": "Select a DTE device:",
    "LABEL_DEVICES_SELECT_KEY_SWITCH_DEVICE": "Select a key switch device:",
    "LABEL_DEVICES_SELECT_TEMPERATURE_SENSOR": "Choose a temperature sensor:",
    "LABEL_DTE": "DTE:",
    "LABEL_FLUSH_OPTION": "Flush options:",
    "LABEL_FUNCTION": "Function:",
    "LABEL_GO_BACK": "Go back",
    "LABEL_INTERVAL": "Interval",
    "LABEL_INVALID_TIME": "Invalid time",
    "LABEL_NAME": "Name:",
    "LABEL_OPEN_CIRCULATION_VALVE": "Circulation valve to be opened",
    "LABEL_SELECT_DEVICES": "Select the devices on which the function should run:",
    "LABEL_SELECT_DEVICES_OF_OTHER_FUNCTION": "Use devices from another function:",
    "LABEL_SEQUENCE_TAPS": "Sequence of the taps:",
    "LABEL_TEMPERATURE_SENSOR": "Temperature sensor:",
    "LABEL_USE_CONNECTED_UFC": "use UFC",
    "LAST_RUN_DATE": "Last Date Run",
    "NAME": "Name",
    "NEW_BUTTON_TEXT": "Create New Function",
    "NEW_FUNCTION_MODAL_TITLE": "Create New Function",
    "NO_DEVICES_FOUND": "No compatible devices found",
    "NO_DEVICE_MALE": "None",
    "NO_DEVICE_NEUTRAL": "None",
    "NO_FUNCTION_WARINING": "No compatible function available.",
    "NUMBER_OF_DEVICES": "Number of Devices",
    "PHW": "PWH",
    "PHW_C": "PWH-C",
    "POSSIBLE_ACTIONS": "Possible Actions",
    "PRESS_KEYSWITCH_TO_START_THERMAL_FLUSH": "Please activate the key switch to start the thermal disinfection.",
    "REQUIRED_FIELD": "Required field",
    "SAVE_BUTTON": "Save",
    "SECTION_DETAILS_THERMAL_DISINFECTION": "Thermal Disinfection",
    "SECTION_RINSE_AFTER_NO_USE": "Rinse After Non-Use",
    "SET_TEMPERATURE": "Set temperature",
    "SHOULD_FUNCTION_BE_STARTED_NOW": "Should \"{{functionName}}\" be started now?",
    "START_FUNCION_MANUALLY": "Start Function Manually",
    "TEMPERATURE_LEVEL": "Temperature level",
    "TEMPERATURE_LEVEL_1": "Temperature level 1",
    "TEMPERATURE_LEVEL_1_NOT_SET": "Temperature level 1 is not set",
    "TEMPERATURE_LEVEL_2": "Temperature level 2",
    "TEMPERATURE_LEVEL_3": "Temperature level 3",
    "TEMPERATURE_LEVEL_4": "Individually",
    "TEMPERATURE_LEVEL_CHANGE_WARNING": "Temperature reduction must be done with ultra-filtration (ABC standard). Lowering the temperature without ultrafiltration at your own risk!",
    "TEMPERATURE_LEVEL_VALIDATION_MESSAGE": "Value must be between 30 and 70°C",
    "TEMPERATURE_OF_HEATER_INDETERMINATE": "The temperature of the DHW heater cannot be determined automatically. At least 70°C is required for thermal disinfection. Please confirm when this temperature is reached.",
    "TEMPERATURE_SETTINGS_WARNING": "The temperature setting is not active because no sensor has been selected.",
    "TEMPERATURE_WARMER_THAN": "Temperature warmer than",
    "THERMAL_RINSING_COMPLETED": "The thermal rinse has been completed.",
    "THERMAL_RINSING_COULD_NOT_COMPLETE": "The thermal rinse could not be completed successfully.",
    "THERMAL_RINSING_IN_PROGRESS": "The thermal disinfection is carried out…",
    "THERMAL_RINSING_IN_UNKNOWN_STATE": "The thermal rinse is in an unknown phase.",
    "WATER_IS_HEATED": "Water is being heated…",
    "WATER_IS_HEATED_SECOND_ATTEMPT": "Water is being heated (second attempt)…",
    "COULD_NOT_DISABLE_FUNCTION": "Could not disable function"
  },
  "GLOBAL": {
    "ACTION": "Action",
    "ACTIVE": "Active",
    "BACK_BUTTON_TEXT": "Previous",
    "CANCEL_BUTTON_TEXT": "Cancel",
    "CLOSE_BUTTON_TEXT": "Close",
    "COMPANY_NAME": "Viega Germany",
    "COULD_NOT_INITIALIZE": "Initialization failed",
    "COULD_NOT_LOAD_PRIVILEGES": "User privileges could not be loaded",
    "CREATE_BUTTON_TEXT": "Create",
    "DATE": "Date",
    "DESCRIPTION": "Description",
    "EDIT_BUTTON_TEXT": "Edit",
    "FALSE": "no",
    "INACTIVE": "Inactive",
    "LOADING_DATA": "Loading data…",
    "MIN_LENGTH": "At least {{num}} characters",
    "NAME": "Name",
    "NEXT_BUTTON_TEXT": "Next",
    "NO_BUTTON_TEXT": "No",
    "OK_BUTTON_TEXT": "OK",
    "PRODUCT_NAME": "AquaVip Solutions",
    "QUIT_BUTTON_TEXT": "Quit",
    "REQUIRED_FIELD_TEXT": "Required field",
    "SAVE_BUTTON_TEXT": "Save Changes",
    "SKIP_BUTTON_TEXT": "Skip",
    "STATUS": "Status",
    "TRUE": "yes",
    "YES_BUTTON_TEXT": "Yes"
  },
  "GLOBAL_ERROR_HANDLER": {
    "HTTP_400": "Incorrect request",
    "HTTP_401": "Session timed out",
    "HTTP_403": "Access not allowed",
    "HTTP_404": "Not found",
    "HTTP_504": "Controller cannot be reached",
    "UNKNOWN_ERROR": "Unknown error"
  },
  "GRID": {
    "CLEAR_BUTTON": "Clear",
    "EMPTY_RECORD": "No records to display",
    "FILTER_BUTTON": "Filter",
    "ITEM": "item",
    "ITEMS": "items"
  },
  "LANGUAGE": {
    "GERMAN": "German"
  },
  "LOGIN": {
    "BUTTON_TEXT": "Login",
    "CHANGE_PASSWORD_BUTTON": "Set Password",
    "CHANGE_PASSWORD_TITLE": "Please choose a new password.",
    "CLIENT_CERTIFICATE_STATUS": "Client side certificate valid",
    "CONFIRM_PASSWORD": "Confirm Password",
    "ERROR_MESSAGE": "Login failed",
    "INVALID_NEW_PASSWORD": "New password is same as old one, please change it.",
    "NEW_PASSWORD": "New Password",
    "OLD_PASSWORD": "Old Password",
    "OLD_PASSWORD_IS_INCORRECT": "The old password is incorrect.",
    "PASSWORD": "Password",
    "PASSWORDS_DO_NOT_MATCH": "New password and password confirmation do not match.",
    "PASSWORD_CHANGED": "Password updated",
    "PASSWORD_INSECURE": "The password does not meet the requirements for a secure password.",
    "UNKNOWN_ERROR": "An unknown error has occurred.",
    "USERNAME": "Username",
    "USER_LOCKED": "User is locked, please contact your administrator."
  },
  "NOTIFICATIONS": {
    "ACKNOWLEDGED_ON": "Acknowledged on",
    "ACKNOWLEDGE_SUCCESS": "Message acknowledged",
    "CANCEL": "Cancel",
    "CONFIRM": "Confirm",
    "COULD_NOT_ACKNOWLEDGE": "Could not acknowledge message",
    "COULD_NOT_FIX": "Could not resolve message",
    "DONE": "Done",
    "ERROR_CODE": "Error code",
    "EVENTS": "Events",
    "FIXED_ON": "Fixed on",
    "MESSAGE_DETAIL": "Message Details",
    "MESSAGE_SOURCE": "Source",
    "MESSAGE_TYPE": "Message type",
    "REPORTS": "Reports",
    "RESOLVE": "Resolve",
    "RESOLVE_SUCCESS": "Message resolved",
    "SEEN_ON": "Seen on"
  },
  "PAGER": {
    "ALL": "All",
    "CURRENT_PAGE_INFO": "{0} of {1} pages",
    "FIRST_PAGE_TOOLTIP": "Go to first page",
    "LAST_PAGE_TOOLTIP": "Go to last page",
    "NEXT_PAGER_TOOLTIP": "Go to next pager",
    "NEXT_PAGE_TOOLTIP": "Go to next page",
    "PAGER_ALL_DROP_DOWN": "Items",
    "PAGER_DROP_DOWN": "Items per page",
    "PREVIOUS_PAGER_TOOLTIP": "Go to previous pager",
    "PREVIOUS_PAGE_TOOLTIP": "Go to previous page",
    "TOTAL_ITEMS_INFO": "({0} items)",
    "TOTAL_ITEM_INFO": "({0} item)"
  },
  "PROJECT": {
    "AREAS": "Areas",
    "ASSIGN_FUNCTION": "Assign function",
    "ASSIGN_GLOBALLY_UNIQUE_NAME": "Please assign a globally unique name for the device:",
    "BASE_DATA": "Base Data",
    "BASIC_INFO": "Basic Info",
    "BUILDINGS": "Buildings",
    "CHANGE_PICTURE": "Change Picture",
    "COMPANY": "Company",
    "CONTROLLER_NAME_TAKEN": "Controller name already assigned",
    "COULD_NOT_DELETE": "Could not delete item",
    "COULD_NOT_FACTORY_RESET": "Could not reset",
    "COULD_NOT_GET_CONTROLLER_INFO": "Could not retrieve controller information",
    "COULD_NOT_GET_DEVICE_INFO": "Could not retrieve device information",
    "COULD_NOT_GET_DEVICE_VALUES": "Could not retrieve device values",
    "COULD_NOT_GET_PROJECT_SETTINGS": "Could not retrieve project settings",
    "COULD_NOT_GET_PROJECT_STRUCTURE": "Could not retrieve project structure",
    "COULD_NOT_RESET": "Could not reset project",
    "COULD_NOT_SET_PROJECT_IMAGE": "Could not assign project image",
    "COULD_NOT_SET_PROJECT_SETTINGS": "Could not save project settings",
    "CREATE_AREA_TITLE": "Create area",
    "CREATE_BUILDING_TITLE": "Create building",
    "CREATE_CONTROLLER_FAILED": "Controller point could not be created.",
    "CREATE_DEVICE_FAILED": "Device point could not be created.",
    "CREATE_DEVICE_TITLE": "Create Device",
    "CREATE_ROOM_TITLE": "Create room",
    "CREATE_SEGMENT_TITLE": "Create segment",
    "DEVICE_NAME_TAKEN": "Device name already assigned",
    "DEVICE_POINT_CONFIG": "Device Point Configuration",
    "DEVICE_TYPE": "Device Type:",
    "DUPLICATE": "Duplicate",
    "EDIT_AREA_TITLE": "Edit area",
    "EDIT_BUILDING_TITLE": "Edit building",
    "EDIT_CONTROLLER_FAILED": "Could not edit controller point",
    "EDIT_DEVICE_FAILED": "Could not edit device point",
    "EDIT_ROOM_TITLE": "Edit room",
    "EDIT_SEGMENT_TITLE": "Edit segment",
    "EXPORT": "Export",
    "EXPORT_CONFIG_FAILED": "The project configuration could not be exported.",
    "FILE_NOT_SUPPORTED": "The file format is not supported.",
    "FILE_SIZE_TOO_LARGE": "The selected file is too large, file cannot be uploaded.",
    "FILE_TAB": "Project File",
    "FUNCTIONAL_OVERVIEW": "Functional Overview",
    "IMPORT": "Import",
    "IMPORT_DATA_COMFIRMATION": "The import overwrites the current project and restarts the controller! Are you sure you want to continue?",
    "IMPORT_DATA_ERROR": "Error - The project could not be imported.",
    "IMPORT_DATA_SUCCESSFUL": "The project was imported successfully. The controller is now restarted.",
    "IMPORT_MODAL_TITLE": "Warning - import project",
    "INSTALLATION": "Installation",
    "INVALID_ENTRY": "Invalid entry",
    "INVALID_IP_ADDRESS": "Invalid IP address",
    "IP_ADDRESS": "IP address:",
    "LOCATION": "Location",
    "MASTER_DATA": "Master Data",
    "NAME": "Name:",
    "NEW_AREA": "New Area",
    "NEW_BUILDING": "New Building",
    "NEW_DEVICE_POINT": "New Device Point",
    "NEW_ROOM": "New Room",
    "NEW_SEGMENT": "New Segment",
    "PLACE": "Place",
    "POST_CODE": "Post Code",
    "REMARK": "Remark:",
    "REMOVE": "Remove",
    "REMOVE_DEVICE_ALERT": "Are you sure you want to remove {{deviceName}}?",
    "RESET": "Reset",
    "RESET_DATA_ALERT": "Are you sure you want to reset the project data?",
    "RESET_DEVICE": "Reset to factory settings",
    "RESET_PARAMS_ALERT": "Are you sure you want to reset the parameters to the default settings?",
    "RESET_PARAMS_SUCCESSFUL": "Success!",
    "RESPONSIBLE": "Responsible",
    "REVISION_NUMBER": "Revision number:",
    "ROAD": "Road",
    "ROOMS": "Rooms",
    "ROOT_NAME": "Project",
    "SEGMENTS": "Segments",
    "SERIAL_NUMBER": "Serial number:",
    "STRUCTURE": "Project Structure",
    "TITLE": "Title"
  },
  "PROTOCOLS": {
    "ADD_REPORTING_SERVICE": "Add reporting service",
    "APRIL": "April",
    "AUGUST": "August",
    "CHOOSE_MEASUREMENT_FILTER": "Choose a measurement filter",
    "COULD_NOT_CREATE_SERVICE": "Could not create reporting service",
    "COULD_NOT_DELETE_REPORT_SERVICES": "Could not remove reporting service",
    "COULD_NOT_EDIT_SERVICE": "Could not modify reporting service",
    "COULD_NOT_GET_SERVICES": "Could not retrieve reporting services",
    "COULD_NOT_INITIALIZE_PLOT_PAGE": "Could not initialize Measurement Data (graph)",
    "COULD_NOT_RUN_REPORT_SERVICES": "Could not run reporting service",
    "DAILY": "daily",
    "DECEMBER": "December",
    "DEVICE_NAME": "Device Name",
    "DOC_MANAGEMENT": "Document Management",
    "EMAIL": "Email",
    "EXPORT_DATA": "Export Data",
    "EXPORT_SETTINGS": "Export Settings",
    "FEBRUARY": "February",
    "FILE_NAME": "Filename",
    "FILE_NAME_WITHOUT_EXT": "Filename without extension",
    "FILTER_SELECTION": "Filter Selection",
    "FILTER_TEMPLATE": "Sample Template",
    "FRIDAY": "Friday",
    "FTP": "FTP/SFTP",
    "FTP_FINGERPRINT": "Fingerprint",
    "FUNCTIONS": "Functions",
    "GET_FILTER": "Get the filter",
    "INVALID_MODEL_STATE": "The field or fields \"{{fields}}\" are incorrect.",
    "JANUARY": "January",
    "JULY": "July",
    "JUNE": "June",
    "KEEP_OLD_FILTERS": "Keep old filters",
    "LIVE": "Live",
    "MANUAL_EXECUTION": "manual execution",
    "MARCH": "March",
    "MAY": "May",
    "MEASUREMENT_DATA": "Measurement Data",
    "MEASUREMENT_DATA_GRAPH": "Measurement Data (graph)",
    "MEASURING_POINT": "Measuring Point",
    "MONDAY": "Monday",
    "MONTHLY": "monthly",
    "NAME": "Name",
    "NON_ZERO_READING": "yes",
    "NOVEMBER": "November",
    "NO_FILTER": "-",
    "NO_UNIT": "no unit",
    "NUMBER_OF_DATA_ENTRIES": "Number of data entries",
    "NUMBER_OF_EVENTS": "by number of events",
    "OCTOBER": "October",
    "ON_EVENT": "on event",
    "OPERATING_SYSTEM": "Operating System",
    "PERIOD": "Period",
    "PHYSICAL_UNIT_LEFT": "Physical unit (left Y axis)",
    "PHYSICAL_UNIT_RIGHT": "Physical unit (right Y axis)",
    "PLEASE_CHOOSE": "please choose",
    "READING": "Reading",
    "REMOVE_REPORT_ALEART": "Are you sure you want to remove the reporting service {{serviceName}}?",
    "REPORTING_SERVICE": "Reporting Service",
    "REPORT_CREATION_NOTIFICATION": "Document is being created. This may take a moment.",
    "RESET_FILTER": "Reset Filter",
    "RUN_REPORT_ALEART": "Are you sure that you want to run the reporting service {{serviceName}}?",
    "SATURDAY": "Saturday",
    "SEPTEMBER": "September",
    "SERVER_PATH": "Server path",
    "SFTP": "FTP/SFTP",
    "SUMMARY": "Summary",
    "SUNDAY": "Sunday",
    "THURSDAY": "Thursday",
    "TIME": "Time",
    "TUESDAY": "Tuesday",
    "USB_DRIVE": "USB Drive",
    "USER": "User",
    "USER_ACTIONS": "User Actions",
    "WEDNESDAY": "Wednesday",
    "WEEKLY": "weekly",
    "WEEK_DAY": "Weekday",
    "YEARLY": "yearly",
    "ZERO_READING": "no"
  },
  "SHARED": {
    "COULD_NOT_LOAD_FILTER_TEMPLATES": "Could not load filter templates",
    "COULD_NOT_SAVE_FILTER_TEMPLATES": "Could not save filter templates",
    "FILTER_TEMPLATES": "Filter Templates",
    "TEMPLATE_NAME_QUESTION": "What should the filter template be called?"
  },
  "SUPPORT": {
    "AUSTRIA": "Austria",
    "CHOOSE_YOUR_COUNTRY": "Select Your Country",
    "GERMANY": "Germany",
    "LICHTENSTEIN": "Lichtenstein",
    "SERVICE": "Service",
    "SWITZERLAND": "Switzerland",
    "TECHNICAL_SUPPORT": "Technical Support",
    "TECHNICAL_SUPPORT_SOFTWARE_SUPPORT": "Technical Support / Software Hotline"
  },
  "SYSTEM": {
    "ACCESS_PASSWORD": "Access Password",
    "ACCESS_USERNAME": "Access Username",
    "ACTIVATE_SUMMER_WINTER_CHANGEOVER": "Activate summer / winter time changeover",
    "ALTERNATE_DNS_SERVER": "Alternate DNS Server",
    "CANCEL_EDIT_SETTINGS": "Cancel",
    "CONTROLLER_OVERVIEW": "Controller Overview",
    "CONTROLLER_OVERVIEW_IP": "IP",
    "CONTROLLER_OVERVIEW_LAST_NOTIFICATION": "Last Notification",
    "CONTROLLER_OVERVIEW_MAC": "MAC",
    "CONTROLLER_OVERVIEW_NAME": "Name",
    "CONTROLLER_OVERVIEW_STATUS": "Status",
    "CONTROLLER_SECTION": "Controller",
    "CONTROLLER_TIME": "Controller Time (Specified in browser time zone)",
    "CONTROLLER_TIMEZONE": "Controller Timezone",
    "DNS_SERVER": "DNS Server",
    "DOMAIN": "Domain",
    "EDIT_SETTINGS": "Edit",
    "EMAIL_ADDRESS_SENDER": "Email Address (sender)",
    "EMAIL_SECTION": "Email",
    "ERROR": "Error",
    "HOSTNAME": "Hostname",
    "LANGUAGE_SECTION": "Language",
    "OFFLINE": "Offline",
    "ONLINE": "Online",
    "OUTGOING_MAIL_SERVER": "Outgoing Mail Server",
    "OUTGOING_PORT": "Outgoing Port",
    "REQUIRED_FIELD": "Required field",
    "SAVE_CHANGES": "Save Changes",
    "SAVE_SYSTEM_SETINGS_FAIL_MESSAGE": "Saving failed. Check your entries and try again.",
    "SWITCHED_OFF": "Switched off",
    "SWITCHED_ON": "Switched on",
    "SYSTEM_LANGUAGE": "System Language",
    "SYSTEM_SETTINGS": "System Settings",
    "TIME_SECTION": "Time"
  },
  "TIMEZONES": {
    "GMT": "(GMT) Western Europe Time, London, Lisbon, Casablanca",
    "GMT+1": "(GMT +1:00) Brussels, Copenhagen, Madrid, Paris",
    "GMT+10": "(GMT +10:00) Eastern Australia, Guam, Vladivostok",
    "GMT+11": "(GMT +11:00) Magadan, Solomon Islands, New Caledonia",
    "GMT+12": "(GMT +12:00) Auckland, Wellington, Fiji, Kamchatka",
    "GMT+2": "(GMT +2:00) Kaliningrad, South Africa",
    "GMT+3": "(GMT +3:00) Baghdad, Riyadh, Moscow, St. Petersburg",
    "GMT+3_5": "(GMT +3:30) Tehran",
    "GMT+4": "(GMT +4:00) Abu Dhabi, Muscat, Baku, Tbilisi",
    "GMT+4_5": "(GMT +4:30) Kabul",
    "GMT+5": "(GMT +5:00) Ekaterinburg, Islamabad, Karachi, Tashkent",
    "GMT+5_5": "(GMT +5:30) Bombay, Calcutta, Madras, New Delhi",
    "GMT+5_75": "(GMT +5:45) Kathmandu",
    "GMT+6": "(GMT +6:00) Almaty, Dhaka, Colombo",
    "GMT+7": "(GMT +7:00) Bangkok, Hanoi, Jakarta",
    "GMT+8": "(GMT +8:00) Beijing, Perth, Singapore, Hong Kong",
    "GMT+9": "(GMT +9:00) Tokyo, Seoul, Osaka, Sapporo, Yakutsk",
    "GMT+9_5": "(GMT +9:30) Adelaide, Darwin",
    "GMT-1": "(GMT -1:00) Azores, Cape Verde Islands",
    "GMT-10": "(GMT -10:00) Hawaii",
    "GMT-11": "(GMT -11:00) Midway Island, Samoa",
    "GMT-12": "(GMT -12:00) Eniwetok, Kwajalein",
    "GMT-2": "(GMT -2:00) Mid-Atlantic",
    "GMT-3": "(GMT -3:00) Brazil, Buenos Aires, Georgetown",
    "GMT-3_5": "(GMT -3:30) Newfoundland",
    "GMT-4": "(GMT -4:00) Atlantic Time (Canada), Caracas, La Paz",
    "GMT-5": "(GMT -5:00) Eastern Time (US & Canada), Bogota, Lima",
    "GMT-6": "(GMT -6:00) Central Time (US & Canada), Mexico City",
    "GMT-7": "(GMT -7:00) Mountain Time (US & Canada)",
    "GMT-8": "(GMT -8:00) Pacific Time (US & Canada)",
    "GMT-9": "(GMT -9:00) Alaska"
  },
  "USERS": {
    "ADMIN_ROLE": "Administrator",
    "CANNOT_DISABLE_USER": "Could not disable user",
    "CANNOT_ENABLE_USER": "Could not enable user",
    "CANNOT_GET_USER_DATA": "Could not retrieve user data",
    "CANT_DELETE_SELF_ALERT": "{{loginName}} cannot be deleted: You cannot delete yourself.",
    "COULD_NOT_GET_USER_DATA": "Could not retrieve user data",
    "COULD_NOT_SAVE_EDITS": "Could not save edits",
    "COULD_NOT_UPDATE_PASSWORD": "Could not save password",
    "CREATE_USER_ERROR": "Cannot create {{newUserName}} An error occurred.",
    "CREATE_USER_SUCCESS": "User {{loginName}} was created successfully.",
    "CREATE_USER_TEXT": "Create User",
    "DELETE_USER_ALERT": "Are you sure you want to remove user {{loginName}}?",
    "DELETE_USER_ERROR": "{{loginName}} cannot be deleted. An error occurred.",
    "DISABLED": "Disabled",
    "EDIT_USER": "Edit User",
    "EMAIL": "Email",
    "EMAIL_EXISTS": "A user with this email address does already exist.",
    "EMAIL_PLACE_HOLDER": "jondoe@twms.de",
    "ENABLED": "Enabled",
    "FIRSTNAME": "First Name",
    "FIRSTNAME_PLACE_HOLDER": "Jon",
    "GROUP": "Group",
    "GUEST_ROLE": "Guest",
    "INSECURE_PASSWORD_TEXT": "Password too insecure",
    "INVALID_EMAIL_TEXT": "Not a valid email",
    "INVALID_FIELD_NO_SPACES": "No spaces allowed",
    "INVALID_NEW_PASSWORD": "Reused password detected. Please enter another password.",
    "IS_LOCKED": "is locked",
    "IS_NOT_LOCKED": "is not locked",
    "LASTNAME": "Last Name",
    "LASTNAME_PLACE_HOLDER": "Doe",
    "LAST_LOGIN": "Last Login",
    "LOCK_SECTION_LABEL": "Lock User",
    "LOGINNAME": "Login Name",
    "PASSWORDS_NOT_EQUAL": "Not matching",
    "PASSWORD_CANNOT_BE_EMPTY": "Password cannot be empty!",
    "PASSWORD_CONFIRM_MESSAGE": "Please confirm the password change with your old password.",
    "PASSWORD_NOT_UPDATED": "Password was not updated.",
    "PASSWORD_SUMMARY": "At least 6 characters - at least one lower case letter, one special character and one number.",
    "PROFILE_CLOSE": "Close",
    "PROFILE_EMAIL": "Email",
    "PROFILE_FIRSTNAME": "First name",
    "PROFILE_INVALID_EMAIL": "Invalid email",
    "PROFILE_LASTNAME": "Surname",
    "PROFILE_MODAL_TITLE": "Edit Profile",
    "PROFILE_PASSWORD": "Password",
    "PROFILE_PASSWORD_INSECURE": "Insecure Password",
    "PROFILE_PASSWORD_MISMATCH": "Passwords do not match",
    "PROFILE_PASSWORD_REPEAT": "Confirm Password",
    "PROFILE_REQUIRED_FIELD": "Required field",
    "PROFILE_REQUIREMENTS_MESSAGE": "* At least 6 characters - at least one lower case letter, one special character and one number",
    "PROFILE_SAVE_CHANGES": "Save Changes",
    "PROFILE_USERNAME": "Username",
    "SELF_EDIT_TEXT": "You can only change your own information under \"My Profile\".",
    "STATUS": "Status",
    "USERNAME_PLACE_HOLDER": "jondoe",
    "USER_ALREADY_EXISTS": "The user {{newUserName}} already exists.",
    "USER_DELETED_ALERT": "User {{loginName}} was deleted successfully.",
    "USER_GROUP": "User Group",
    "USER_INFO_NOT_UPDATED": "User data was not updated.",
    "USER_ROLE": "User",
    "USER_ROLE_NOT_UPDATED": "User role was not updated!",
    "VERIFY_PASSWORD_MESSAGE": "Please authorize yourself with your password:",
    "WRONG_ORIGINAL_PASSWORD": "The password you entered is incorrect."
  },
  "WEEKDAY": {
    "FRIDAY_SHORT": "Fri",
    "MONDAY_SHORT": "Mon",
    "SATURDAY_SHORT": "Sat",
    "SUNDAY_SHORT": "Sun",
    "THURSDAY_SHORT": "Thu",
    "TUESDAY_SHORT": "Tue",
    "WEDNESDAY_SHORT": "Wed"
  },
  "WEEKTIME_PLANNER": {
    "ACTIVATE": "Activate",
    "RINSE_TIME_1": "Rinse Time 1",
    "RINSE_TIME_2": "Rinse Time 2"
  },
  "_META": {
    "LOCALE": "en",
    "VERSION": "1.16.7-rc.2"
  }
}
